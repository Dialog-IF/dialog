%% This is the complete source of "Miss Gosling's Last Case" by Daniel Stelzer, concatenated into a single huge file. Specifically, this is a version that uses only ASCII quotation marks and disables all styling, to work around a bug in dumbfrotz. Once that bug is fixed, you can go back to the other version!

%% Including this file disables all bold and italic styling, which breaks dumbfrotz

(style class @bold)
	font-weight: normal;

(style class @italic)
	font-style: normal;

(style class @exitbar)
	font-style: normal;

(style class @title)
	font-weight: normal;

(style class @meta)
	font-style: normal;

(style class @tutorial)
	font-style: normal;

(style class @error)
	font-weight: normal;

%% Disable the inline styling used for (emph $)
(emph $Closure)
	(query $Closure)

%% And also turns on command echoing

(get replay-enabled input $Words) %% This disables actual replaying but eh
	(get input $Words)
	>> (print words $Words)
	(par)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 0 - Metadata
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(story ifid) 5F82B23F-0A2D-4C27-837B-D039EA1072DA

(story title) Miss Gosling's Last Case
(story author) Daniel M. Stelzer
(story blurb)
	"We are saddened to report that Miss Winifred Gosling of Marswich Green met her untimely demise this morning in a heartbreaking canine mishap. Miss Gosling, 76, was well-known for her long and illustrious history of crime-solving, and her loss will be keenly felt..." (par)
	What utter drivel! It wasn't "a heartbreaking canine mishap", it was arsenious oxide poisoning, and a basic Marsh test would have demonstrated that beyond a shadow of a doubt. But alas. Once again, it seems, you must take it upon yourself to do the constables' job for them, armed only with your wits and your loyal collie—and solve the case of your own murder.
(story noun) An interactive mystery
(story release 3)

%% Some style definitions

(style class @fixed) %% This isn't documented in the Dialog manual but according to the source it works
	font-family: monospace;

(style class @smallstatus)
	height: 1em;
	text-align: left; %% Moved back to the left due to progress bar on the right

(style class @largestatus)
	height: 2em;
	text-align: left;

(style class @score)
	float: right;
%%	width: 20ch; %% 18 points, plus left and right markers
	width: 40%; %% Proportional spacing works better
	text-align: right;

(style class @inlinebar)
%%	height: 1em; %% Causes problems in web player, just get rid of it
	text-align: left;
	border: 1px solid rgb\(128, 128, 100\);
	background-color: rgba\(128, 128, 100, 0.33\);
	padding: 0.125em;
	padding-left: 0.67em;
	border-radius: 12px;
	margin-top: 1em;

(style class @barpar)
	margin-top: 0.25em;
	margin-bottom: 0.25em;
	padding-left: 2em; %% Indent of all lines
	text-indent: -2em; %% Indent of first line (so in other words, indent all following lines by 2em)

(style class @listitem) %% Indent items in a list
	padding-left: 2.5em;
	text-indent: -2em;

(style class @metaverbs) %% The list of meta verbs along the top
	font-size: smaller;
	text-align: center;
%%	font-style: italic;

(style class @exitbar) %% Most likely only used on Z-machine where styling is limited, so don't bother with anything fancy
	margin-bottom: 1em;
	font-style: italic;

(style class @initial-spacer)
	margin-bottom: 2em;

(style class @title)
%%	font-family: Garamond, serif;
	font-weight: bold;
	font-size: 1.4em;
	margin-top: 1em;

(style class @roomheader)
	margin-top: .3em;
%%	font-family: Garamond, serif;
	font-size: 1.2em;

(style class @meta) %% Used for text coming from the parser
	font-style: italic;
	font-style: normal !important; %% When compiling to the Z-machine, Dialog will ignore this, but in CSS, it'll override the previous line - because the sans-serif font is enough of a distinction for us
	font-size: 0.9em;
	font-family: Helvetica, sans-serif;
	margin-top: 1em;
	margin-bottom: 1em;
	background-color: rgba\(0, 0, 255, 0.1\);
	border: 1px solid blue;
	margin-left: 1em;
	margin-right: 1em;
	padding: 0.5em;
%%	color: blue !important;

(style class @tutorial) %% Used for tutorial prompts
	font-style: italic;
%%	font-style: normal !important;
%%	color: green !important;
	margin-top: 1em;
	margin-bottom: 1em;
	background-color: rgba\(0, 128, 0, 0.1\);
	border: 1px solid rgb\(0, 128, 0\);
	margin-left: 1em;
	margin-right: 1em;
	padding: 0.5em;
%%	font-family: Helvetica, sans-serif;

(style class @gold) %% Used for one special purpose in the endgame
	font-style: italic;
	font-style: normal !important;
%%	font-family: Helvetica, sans-serif;
	margin-top: 1em;
	margin-bottom: 1em;
	background-color: rgba\(255, 195, 0, 0.1\);
	border: 1px solid rgb\(255, 195, 0\);
	margin-left: 1em;
	margin-right: 1em;
	padding: 0.5em;

(style class @hint) %% Used for hint messages
	font-style: italic;
	font-style: normal !important;
%%	font-family: Helvetica, sans-serif;
	margin-top: 1em;
	margin-bottom: 1em;
	background-color: rgba\(128, 0, 32, 0.1\); %% #800020 burgundy
	border: 1px solid rgb\(128, 0, 32\);
	margin-left: 1em;
	margin-right: 1em;
	padding: 0.5em;
	--lightgray: \#FF7652; %% Overriding the CSS variables used for the text color in each mode
	--black: \#771900;

(style class @error) %% Used for error messages of various sorts
	font-weight: bold;
	color: red !important;

(style class @center) %% Used for, well...centering, but specifically for the (any key or link) predicate
	width: 100%;
	text-align: center;
	font-style: italic;

(fleuron) %% Also for this
	(div @center) {\~ \* \~ \* \~ \* \~ \* \~}

%% Resources

(define resource @hints) hints.html; a file of hints

(define resource @map) map.png; a map of the game

(define resource @forum) https://intfiction.org/

(define resource @email) mailto:dsdraco7\@gmail.com

%% Status bars of various sorts

(redraw status bar) %% Handles both the main bar and the inline bar
	(if) (opening cutscene) (then)
		%% Just the location and progress, no exits
		(status bar @smallstatus) {
			(score headline)
			(location headline)
		}
		%% Special link bar for the intro cutscene
		(if) (link bar enabled) (interpreter supports links) (then) %% Only do this if we have actual hyperlinks, otherwise it's a bit odd
			(inline status bar @inlinebar) {
				(exhaust) {
					*(opening suggestion) %% See intro.dg
				}
			}
		(endif)
	(elseif) (link bar enabled) (then) %% One or two lines at the top, one inline
		(if) (interpreter supports links) (then)
			(status bar @largestatus) { %% Two lines
				(score headline)
				(location headline)
				(meta verbs headline)
			}
		(else)
			(status bar @largestatus) { %% One line
				(score headline)
				(location headline)
			}
			(if) ~(warned about disabled links) (then)
				(div @meta) { Note: With these settings, the link bar will be displayed, but with plain text instead of links. You can disable it in the SETTINGS. }
				(now) (warned about disabled links)
			(endif)
		(endif)
		(inline status bar @inlinebar) {
			(exhaust) *(inline status element) %% See utils.dg for this
		}
	(elseif) (status bar enabled) (then) %% Two lines at the top
		(status bar @largestatus) {
			(score headline)
			(location headline)
			(line)
			(exits headline)
		}
	(else) %% No lines at the top, one inline
		(div @exitbar) {
			(exits headline)
		}
	(endif)

%% (location headline) is in doglib.dg, unchanged from the standard

(score headline) %% Rewritten to use a progress bar
	(current score $Score)
	(maximum score $Max)
	(div @score)
		(progress bar $Score of $Max)

(exits headline) %% All new
	(current room $Room)
	Exits: 
	(exhaust) {
		*(direction $Dir) %% Querying this first ensures a consistent order
		(from $Room go $Dir to $Target)
		(if) (room $Target) (then)
			(name $Dir)
		(elseif) (door $Target) ($Target is in scope) (then)
			(if) ($Target blocks passage) (then) %% Parentheses if it's closed
				\( (name $Dir) \)
			(else)
				(name $Dir)
			(endif)
		(endif)
	}

(meta verbs headline) %% Similarly
	(div @metaverbs) {
		(link) undo (bullet)
		(link) save (bullet)
		(link) restore (bullet)
		(link) think (bullet)
		(link [help with links]) help (bullet) %% HELP changes depending if you used a link or a command
		(link) about (bullet)
		(link resource @map) map (bullet)
		(link resource @hints) hints
	}

%% Miscellaneous configuration

(library links enabled)
	~(opening cutscene) %% No links in the intro

(link bar enabled) %% Starts out turned on, then is turned off if the interpreter can't handle it - this flag can be configured with LINKS ON and LINKS OFF
(initial setup)
	(if) ~{ (interpreter supports links) (interpreter supports inline status bar) } (then)
		(now) ~(link bar enabled)
	(endif)

(status bar enabled) %% Likewise
(initial setup)
	(if) ~(interpreter supports status bar) (then)
		(now) ~(status bar enabled)
	(endif)

(default actions enabled)
%% (default action (door $Obj) [enter $Obj]) %% Caused problems with hyperlinks
(default action $Obj [recall $Obj])
	~($Obj is in scope)
(default action (animate $Obj) [recall $Obj])
	~(player can see $Obj) %% Don't add the location information from RECALL if they're currently visible, just do an EXAMINE instead

%% The scoring system

(scoring enabled)
	~(opening cutscene) %% Don't show the score at all until this is done

(score notifications are on) %% Avoid a compiler complaint about this if (scoring enabled) depends on a dynamic predicate - the initial state of one dynamic predicate can't depend on another

(maximum score $N) %% Starts at 18, but certain things increase both the current score and the max score
	(extra points $P)
	(18 plus $P into $N)

(extra points $P)
	(accumulate 1)
		(#cistern is visited) (or)
		(ritual succeeded)
	(into $P)

(current score $Score) %% This is normally implemented as a variable, but here, we calculate it dynamically instead!
	(accumulate 1)
		%% INTRODUCTION
		~(opening cutscene) (or) %% This one's just padding to get us to a max of 18
		{~(opening cutscene) ~(player is imprisoned)} (or) %% Make sure you don't have one point on the progress bar during the opening
		(introduction finished) (or)
		%% GARDEN
		(#frontdoor is unlocked) (or)
		(seen through both bottles) (or)
		(gardener exculpated) (or)
		%% ATTIC
		(#attic-w is visited) (or)
		(#a-windows is open) (or)
		(nephew exculpated) (or)
		%% CELLAR
		(#cellar is visited) (or)
		(carrots have been taken) (or)
		(friend exculpated) (or)
		%% UPSTAIRS
		(#suitedoor is unlocked) (or)
		(#mirror is open) (or)
		(companion exculpated) (or)
		%% FINALE
		(embezzlement known) (or)
		(recorder in place) (or)
		(confession recorded) (or)
		%% SECRETS
		(#cistern is visited) (or)
		(ritual succeeded)
	(into $Score)

(score details)
	%% First, things you've already done
	(if) (current score 0) (then)
		You haven't earned any points yet.
	(else)
		You've earned points for: (line)
		(exhaust) { *(score detail line) (line) }
	(endif)
	(par)
	%% Next, things you need to do
	(maximum score $Max)
	(if) (current score $Max) (then)
		Your work here is finished.
	(else)
		Right now, you need to: (line)
		(exhaust) { *(task detail line) (line) }
	(endif)
	(par)

%% GENERAL GUIDANCE

(task detail line)
	(current player $Player)
	($Obj is #heldby $Player) %% Don't need a multiquery because of the inventory limit
	(evidence $Obj)
	(bullet) Show your evidence to the constables

%% INTRODUCTION

(score detail line)
	~(opening cutscene)
	(bullet) Finding a way to interact with the world
(task detail line)
	(opening cutscene)
	(bullet) Find a way to interact with the world

(score detail line)
	~(opening cutscene)
	~(player is imprisoned)
	(bullet) Escaping the armchair
(task detail line)
	(player is imprisoned)
	(bullet) Escape from this armchair

(score detail line)
	(introduction finished)
	(bullet) Proving it was murder
(task detail line)
	~(player is imprisoned)
	~(introduction finished)
	(bullet)
	(if) (#torch is nowhere) (then)
		Find your torch,
	(else)
		Draw the constables' attention to the torch,
	(endif)
	to prove that this was no accident

%% GARDENS

(score detail line)
	(#frontdoor is unlocked)
	(bullet) Gaining access to the gardens
(task detail line)
	(introduction finished)
	(#frontdoor is locked)
	(bullet) Access the gardens, where the rosebushes are

(score detail line)
	(seen through both bottles)
	(bullet) Identifying the (target colour) roses
(task detail line)
	(#frontdoor is unlocked)
	~(seen through both bottles)
	(bullet) Figure out which roses are (target colour)

(score detail line)
	(gardener exculpated)
	(bullet) Exculpating your gardener Alfred
(task detail line)
	(seen through both bottles)
	~(gardener exculpated)
	(bullet) Prove that the roses weren't poisoned

%% ATTIC

(score detail line)
	(#attic-w is visited)
	(bullet) Gaining access to the attic
(task detail line)
	(introduction finished)
	(#attic-w is unvisited)
	(bullet) Access the attic, where your laboratory is

(score detail line)
	(#a-windows is open)
	(bullet) Opening the attic windows
(task detail line)
	(#attic-w is visited)
	(#a-windows is closed)
	(bullet) Let some light into the attic

(score detail line)
	(nephew exculpated)
	(bullet) Exculpating your nephew Nigel
(task detail line)
	(#a-windows is open)
	~(nephew exculpated)
	(bullet) Prove that no one has tampered with your chemicals

%% CELLAR

(score detail line)
	(#cellar is visited)
	(bullet) Gaining access to the root cellar
(task detail line)
	(introduction finished)
	~(#cellar is visited)
	(bullet) Access the root cellar, where those carrots are stored

(score detail line)
	(carrots have been taken)
	(bullet) Finding the carrots
(task detail line)
	(#cellar is visited)
	~(carrots have been taken)
	(bullet) Locate the carrots in the root cellar

(score detail line)
	(friend exculpated)
	(bullet) Exculpating your friend Charlotte
(task detail line)
	(carrots have been taken)
	~(friend exculpated)
	(bullet) Prove that the carrots weren't poisoned

%% UPSTAIRS

(score detail line)
	(#suitedoor is unlocked)
	(bullet) Gaining access to your bedroom suite
(task detail line)
	(introduction finished)
	(#suitedoor is locked)
	(bullet) Access your bedroom suite, where your medications are

(score detail line)
	(#mirror is open)
	(bullet) Opening the medicine cabinet
(task detail line)
	(#suitedoor is unlocked)
	(#mirror is closed)
	(bullet) Open the locked medicine cabinet

(score detail line)
	(companion exculpated)
	(bullet) Exculpating your companion Emily
(task detail line)
	(#mirror is open)
	~(companion exculpated)
	(bullet) Prove that the medications weren't poisoned

%% FINALE

(score detail line)
	(embezzlement known)
	(bullet) Discovering the real identity of the murderer
(task detail line)
	(#libdoor is unlocked)
	~(embezzlement known)
	(bullet) Discover the real murderer

(score detail line)
	(recorder in place)
	(bullet) Hiding a tape recorder
(task detail line)
	(embezzlement known)
	~(recorder in place)
	(bullet) Establish evidence the constabulary will accept

(score detail line)
	(confession recorded)
	(bullet) Recording Hughes's confession
(task detail line)
	(recorder in place)
	~(confession recorded)
	(bullet) Trick Hughes into a confession

%% SECRETS

(score detail line)
	(#cistern is visited)
	(bullet) Discovering the secrets buried under your garden \(?\)

(score detail line)
	(ritual succeeded)
	(bullet) Performing a Druidic ritual \(?!\)

%% NPCs for RECALL purposes - never put on-stage

#gardener
(name *) Alfred
(dict *) Mr Mister Tucker gardener
(descr *) Alfred Tucker has been your gardener for years. Ever diligent, with a good eye for aesthetics; it's thanks to him that the colours of your flower beds go together so nicely. You could imagine him committing murder, perhaps, if he had the right motivation—but he would do it in anger, with his own hands. Cold, impersonal poison is not his style.
(animate *)
(male *)
(proper *)

#nephew
(name *) Nigel
(dict *) Mr Mister Nigel Gosling nephew
(descr *) Your nephew Nigel is such a dear. He worries about everything, and at your age, you have to admit it's not entirely without cause. You wouldn't put it past him to contemplate murder, perhaps, but he'd immediately talk himself out of it.
(animate *)
(male *)
(proper *)

#friend
(name *) Lottie
(dict *) Mrs Charlotte Peabody friend
(descr *) Lottie—that is, Mrs Charlotte Peabody—is your closest friend in the area, and her regular visits for tea and gossip are a highlight of your week. She's a meticulous, analytical sort, always picking out the flaws in a plan; if she turned her mind to murder, she would have a better alibi and a less obvious method.
(animate *)
(female *)
(proper *)

#companion
(name *) Emily
(dict *) Ms Miss Morris companion
(descr *) You used to feel a bit ashamed to admit it, but a companion really is a necessity at your age. She checks in on you periodically, arranges your medicines, and handles any problems before they come up; not the brightest girl, perhaps, but a very good heart. She'd be horrified by the very idea of murder, and probably end up in tears for even thinking about it.
(animate *)
(female *)
(proper *)

#macaulay
(name *) Lord Andrew Macaulay
(dict *) Macauley %% Because I keep misspelling it myself
(heads *) Macaulay Macauley
(descr *) Taking him down was one of the highlights of your career. You have the case files on display in your reception room.
(animate *)
(male *)
(proper *)

#elisabeth
(name *) Elisabeth Macaulay
(dict *) Elizabeth Macauley %% Likewise
(heads *) Elisabeth
(descr *) Lord Macaulay's sister is a cunning one, certainly. She led you on quite the wild goose chase during the investigation, and you were very nearly taken in by it.
(animate *)
(female *)
(proper *)

%% For completeness, though it's never linked anywhere
(name *) Doctor Fletcher
(dict *) dr
(descr *) Doctor Fletcher is the local coroner and pathologist. (emph {He}) should know how to test for arsenic, at least.
(animate *)
(male *)
(proper *)

%% And finally some background scenery that doesn't fit anywhere else

%% Don't disambiguate about useless background scenery
(unlikely $Action)
	*($Obj is one of $Action)
	(background $Obj)

#bg-lightswitch
(name *) light switch
(dict *) switches
(descr *) Not much use, with the electricity out.
(switchable *)
(background *)
(*(indoors $) attracts *)

(narrate switching on *) Watson paws at the light switch until it clicks on. Nothing changes.
(narrate switching off *) Watson paws at the light switch until it clicks off. Nothing changes.

#bg-windows
(name *) miscellaneous windows
(dict *) window shade frame shutter shades shutters curtain curtains
(plural *)
(descr *) You've always liked having plenty of natural light.
(openable *) %% Not really
(* is open)
(background *)
(*(indoors $) attracts *)

(instead of [open/close *]) You keep most of the shades permanently open, at this point. Opening and closing them just got to be too much of a hassle.

#bg-grass
(name *) grass
(dict *) ground dirt soil
(descr *) Quite well-maintained.
(background *)
(*(outdoors $) attracts *)

#bg-sky
(name *) sky
(dict *) cloud clouds sun
(descr *) It's a lovely afternoon. Really a shame you can't feel the sun...
(out of reach *)
(background *)
(*(outdoors $) attracts *)

#bg-door
(name *) various doors
(dict *) door doorway
(plural *)
(descr *)
	Most of the doorways in your house don't merit any special notice.
	(div @meta) { If you want to look through a door, use the direction instead, like LOOK NORTH. }
(background *)
($Room attracts *) %% Avoid disambiguation
	(indoors $Room)
	~(cellar $Room)
(instead of [open/close *])
	(try [examine *])
(instead of [enter *])
	None of the doorways here merit special attention. Which do you mean?
	(div @meta) { Unless a door is specifically described, you can just use the compass directions instead of bothering with them. }

(indoors $Room) %% Not making it an access predicate because of the second line
	~(outdoors $Room)
	~($Room is in secret region)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 1A - Exculpate the Dog
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 0 - Setting Up
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(intro)
	(exhaust) *(initial setup)
	Dear me. What happened?
	(par)
	Your vision is a bit blurry. Nothing hurts, at least. You can hear Watson barking. It's bright, very bright, so it must be morning.
	(par)
	The last thing you remember was coming down the stairs. Did you stumble and fall? Nigel would fuss and scold you over it, saying to be more careful at your age. Things are coming into focus now...
	(par)
	Oh. Oh no.
	(par)
	(now) (opening cutscene)
	(try [look])

#spectre
(current player *)
(name *) spectral self
(your *)
(animate *)
(female *)
(* is #in #b-stairs)
(intangible *) %% We should write special responses for actions, but this will catch any that we don't
(descr *) Well, you (emph {feel}) fine. You don't look any different, at least to your eyes. You seem to be wearing your (maybe link #dress), the one with the pattern of little flowers on it, which you certainly weren't when you fell. This sort of existence will certainly take some getting used to.

#dress %% Just for flavor
(name *) favourite dress
(your *)
(dict *) pattern of little flowers frock clothes clothing favorite
(* is #wornby #spectre)
(intangible *)
(descr *) You've always liked this one. Just the right amount of colour, bright and cheerful without being gaudy. You certainly weren't wearing it when you fell; you had a comfortable nightdress on. But, well, comfort doesn't seem to be much of a concern any more.

(unlikely $Action) %% Avoid disambiguating with it, with both "clothes" and "flowers"
	(* is one of $Action)

#corpse
(name *) corpse
(dict *) dead body cadaver me blood neck
(your *)
(appearance *)
	Your
	(if) (opening cutscene) (then)
		body
	(else)
		(link) body
	(endif)
	lies at the bottom of the stairs.
(descr *)
	Oh, dear. You must have fallen down the stairs and broken your neck. At least there isn't much blood...and, well, it must have been quick.
(* is #in #b-stairs)

(perform [kiss/taste *])
	Watson lavishes your body in affection, like he does every morning. But the corpse is cold and unresponsive, and he looks up at you with a scared little whimper.

#nightgown
(name *) nightdress
(dict *) night gown dress nightgown robe pajama pajamas comfortable
(your *)
(descr *)
	It was comfortable, at least.
(* is #wornby #corpse)

#watson
(name *) Watson
(dict *) dog collie paw paws fur
(heads *) watson dog collie
(proper *)
(animate *)
(male *)
(* is #in #b-stairs)
(appearance *)
	(opening cutscene) %% He has no description outside the cutscene, since he's always assumed to be with you
	Ever-faithful Watson is crouched over it, whimpering faintly.
(descr *)
	Watson is a wonderfully intelligent collie, and he's been oh so much help in your past investigations. You've trained him quite well, if you do say so yourself.

#b-stairs
(room *)
(name *) bottom of the stairs
(look *)
	This was once the front room of your house, before you sealed off the door here and built the larger front room on the other side. Now it just serves as a little hallway connecting the evening room to the (maybe link #south) to the dining room to the (maybe link #north). The stairs to the (maybe link #east) lead up to the first floor.
%% (from * go #south to #eveningroom) %% See police tape section
%% (from * go #north to #diningroom)
(from * go #up to #east)
(from * go #east through #stairs to #t-stairs)
(from * go #west through #backdoor to #lawn)

#stairs
(name *) stairs
(dict *) stair staircase steps step banister
(door *)
(descr *)
	Solid and sturdy. And now, it seems, the cause of your untimely death. That's always the danger of moving around in the dark—even in your own house, there's always the risk of a deadly fall.

(when * blocks passage) %% You can't go upstairs until the introduction is finished
	~(introduction finished)
	"Oi! No! Shoo!" Watson makes it barely halfway up the stairs before Constable Phillips is pushing him back down. "Not until I finish my investigation!"

#backdoor
(name *) back door
(door *)
(* is closed)
~(openable *)
(descr *)
	You boarded it up long ago. The new front door on the other side of the house is much better.
(prevent [open *])
	Not a chance. You sealed it up thoroughly so it wouldn't let a draft in; now it would take a good carpenter to get it open again, which Watson distinctly is not.

%% The only things you can do during the cutscenes are actions from *you*, not from Watson
(cutscene allows action [examine $])
(cutscene allows action [look])
(cutscene allows action [recall $])
(cutscene allows action (command $)) %% Not sure if this is actually necessary - they might bypass prevent rules?

(prevent [talk to $Person])
	(opening cutscene)
	(The $Person) show(s $Person) not the slightest hint of recognition.
	(if) (animate $Person) (then)
		You might as well be talking to a brick wall.
	(endif)
	(now) (tried talking)

(prevent $Action) %% Most actions are blocked during this sequence - we use (prevent $) instead of (instead of $) to allow things to redirect, ensuring we only have to handle one conversation action
	(opening cutscene)
	~(cutscene allows action $Action)
	%% Giving orders to Watson acts differently from the rest
	(if) ($Action = [tell #watson to | $Order]) (then)
		(now) (watson has noticed you)
		(now) (tried commanding)
		Watson perks up, about to (describe action $Order) (no space) —until one of the constables grabs him by the collar. (par)
	(elseif) ($Action = [tell $Person to | $Order]) (then)
		(try [talk to $Person])
	(else)
		(now) (tried physicality)
		You focus your thoughts, and try to (describe action $Action), and yet nothing seems to happen... (par)
		(select)
			(now) (watson has noticed you)
			Watson looks up at you and blinks in surprise.
		(or)
			Watson cocks his head to one side with a confused whine.
		(or)
			Watson lets out an inquisitive bark.
		(or)
			Watson looks up at you and pants happily.
		(stopping)
		(par)
	(endif)

%% For simplicity, we also block parse errors and disambiguation during this
(parse partial action $)
	(opening cutscene)
	Your mind is still a bit fuzzy, and you can't quite make sense of that idea at the moment.
	(tick) (stop)
(disambiguate action [$Head|$] $Result)
	(opening cutscene)
	($Result = $Head) %% We just take the first one to avoid a disambiguation process

%% And blank lines should be taken as doing nothing
(parse commandline [] with choices $)
	(opening cutscene)
	(tick) (stop)

%% (test @intro with inputs [[x watson] [north] [zxcvb] [undo] [watson , north] [hughes , wait]])

%% And pretend this is a choice-based game for the opening cutscene, with hand-picked inputs

(opening suggestion)
	~(examined corpse)
	(div @barpar) (link) { look at my body }
(after [examine #corpse])
	(opening cutscene)
	(now) (examined corpse)

(opening suggestion)
	(examined corpse)
	~(examined ghost)
	(div @barpar) (link [look at myself]) { look at yourself }
(after [examine #spectre])
	(opening cutscene)
	(now) (examined ghost)

(opening suggestion)
	~(examined dog)
	(div @barpar) (link) { look at Watson }
(after [examine #watson])
	(opening cutscene)
	(now) (examined dog)

(opening suggestion)
	(#hughes is #in #b-stairs)
	~(examined constables)
	(div @barpar) (link) { look at the constables }
%% The flag is set in actions.dg, see there for the reason

(opening suggestion)
	~(tried physicality)
	(div @barpar) (link) { stand up }

(opening suggestion)
	~(tried physicality)
	(div @barpar) (link) { go upstairs }

(opening suggestion)
	~(tried physicality)
	(div @barpar) (link) { go to the sitting room }

(opening suggestion)
	~(tried talking)
	(#hughes is #in #b-stairs)
	(div @barpar) (link) { talk to Inspector Hughes }

(opening suggestion)
	(examined dog)
	~(tried commanding)
	(div @barpar) (link) { tell Watson to come here }

(opening suggestion)
	(examined dog)
	(tried talking)
	~(tried commanding)
	(div @barpar) (link) { tell Watson to stop the Inspector }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Cutscene/Tutorial
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(appearance #hughes) %% Only one paragraph about all of them
	(opening cutscene)
	Inspector Hughes is peering down at the scene over his bushy moustache, his gaggle of lower-ranking constabulary hurrying to carry out his orders.
(appearance #phillips)
	(opening cutscene)
(appearance #davis)
	(opening cutscene)

(on every tick)
	(opening cutscene)
	(par)
	(select)
		%% Nothing
	(or)
		"What's this then?" Inspector Hughes strides into the hall, flanked by a little gaggle of lower-ranking constabulary. "Bloody hell...so this is how the old bird finally went. Never thought she'd meet her end in an accident, not after a career of dealing with crime."
		(now) (#hughes is #in #b-stairs)
		(now) (#phillips is #in #b-stairs)
		(now) (#davis is #in #b-stairs)
	(or)
		Constable Phillips sets to work marking out where you've fallen, while his colleague Davis examines your body. Hughes strokes his moustache as he surveys the stairs. "Looks like an open-and-shut case. Look at 'er nightdress. Must have got up in the morning and took a tumble down the stairs." (par)
		The morning? No...no, that's not right. It was just past midnight...you were trying to find your way downstairs with a torch...you had to get to...the telephone, wasn't it? Everything is so fuzzy...
	(or)
		The Inspector turns to go. "For all we know, that bloody dog of hers might have given her a push." Watson?! He would never! "I'll get the coroner in. Davis, get a report written up and sent to Biddlecombe by the end of today. Looks like it really was an accident in the end." (par)
		No! That's it! You woke up, you recognised those symptoms...the choking feeling, the burning in your stomach—how could you ever mistake the signs of white arsenic poisoning? (par)
		You tried to get to the telephone, but the electricity had gone out again. You were making your way down with a torch...that's it, the torch would prove it was the middle of the night, not the morning, now wouldn't it? Now where in heaven's name did it get off to?
	(or)
		"For once, a nice, open-and-shut case." (par)
		Oh, that small-minded Inspector! Even a perfunctory investigation should find signs of poison! But he's so sure it was your ordinary morning routine that he won't even consider the possibility.
	(or)
		Hughes strides out while Davis finishes up her measurements. "And get that bloody creature out of our way!" Suddenly Phillips has grabbed Watson by the collar and is dragging him off to the sitting room. (par)
		(if) (watson has noticed you) (then)
			Watson's eyes are fixed on you as he's pulled away, whimpering and scrabbling at the carpet. Even if the police won't listen, Watson will! So you imagine yourself following him, and the world around you changes...
		(else)
			As Watson is pulled away he looks up, his eyes focused right on yours, and lets out a thunderous bark. Can he see you, even if the humans can't? You imagine yourself following him, and the world around you changes...
		(endif)
		(any key or link)
		(finish the cutscene)
	(stopping)

(finish the cutscene)
	(now) ~(opening cutscene)
	(now) (player is imprisoned)
	(now) (#hughes is nowhere)
	(now) (#phillips is #in #t-stairs) %% To stop you from going upstairs
	(now) (#davis is #on #davischair) %% Her chair in the dining room
	(move player to #in #sittingroom)
	(banner)
	(try [look])

(give the tutorial)
	~(opening cutscene)
	~(tutorial is finished)
	(par)
	(tutorial prompt)
(after $Action)
	~(opening cutscene)
	~(tutorial is finished)
	(par)
	(tutorial response for $Action)

(late on every tick)
	(give the tutorial)

(tutorial response for [push/pull/examine #chair]) %% Putting this first so it sets the flag properly
	~(tried chair)
	(now) (tried chair)
	(fail)

(tutorial prompt)
	~(tried examining)
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			In this state, you can't do much yourself. The best you can do is (span @fixed) LOOK around, (span @fixed) EXAMINE something, or (span @fixed) RECALL a person.
		}
	(else)
		(div @tutorial) {
			In this state, you can't do much yourself. (link) Look around to get a description of your surroundings, then click the name of an object to examine it, like the (link) ball .
		}
	(endif)
	(now) (tried examining) %% EXPERIMENT - make this never repeat
(tutorial response for [examine/recall $])
	~(after tried examining)
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			Since you (span @fixed) EXAMINE so many things in your investigations, you can abbreviate it to (span @fixed) X .
		}
	(else)
		(div @tutorial) {
			If you click the name of something that isn't close at hand, the game will tell you where you last saw it. For people, it will also tell you what you remember about them.
		}
	(endif)
	(now) (after tried examining)

(tutorial prompt)
	~(tried taking)
	(current room #sittingroom)
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			For anything more elaborate than that, you'll have to rely on Watson. For example, tell him to (span @fixed) TAKE THE BALL.
		}
	(else)
		(div @tutorial) {
			For anything more elaborate than that, you'll have to rely on Watson. Once you've drawn his attention to something, the link bar will show the various things he can do with it. (par)
			You can also type in commands for Watson directly, like (span @fixed) {TAKE THE BALL} (no space). This is never truly necessary—the game can be played entirely via links—but can sometimes be easier than searching for the right link for what you want to express.
		}
	(endif)
	(now) (tried taking) %% EXPERIMENT - make this never repeat
%%(tutorial response for [take $])
%%	~(tried taking)
%%	(now) (tried taking)

(tutorial prompt)
	~(tried inventory)
	($ is #heldby #spectre) %% Strictly speaking, the player encloses these objects, not Watson
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			If you say (span @fixed) INVENTORY, Watson will show you what he's holding.
		}
	(else)
		(div @tutorial) {
			Watson can only hold one thing in his mouth at a time, but he's very good at manipulating objects in various ways. Anything he's holding will be shown at the top of the link bar.
		}
		(now) (after tried inventory) %% No action needed when there's a link bar
	(endif)
	(now) (tried inventory) %% EXPERIMENT - make this never repeat
(tutorial response for [inventory])
	~(after tried inventory)
	(div @tutorial) {
		He can only hold one thing in his mouth at a time, but he's very good at manipulating objects in various ways.
	}
	(now) (after tried inventory)

(tutorial prompt)
	~(tried manipulation)
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			You've taught Watson plenty of ways to manipulate objects: he can (span @fixed) TAKE and (span @fixed) DROP them, but also (span @fixed) PUSH , (span @fixed) PULL , (span @fixed) OPEN , (span @fixed) CLOSE , (span @fixed) CLIMB , and (span @fixed) SEARCH them, among others.
		}
	(else)
		(div @tutorial) {
			You've taught Watson plenty of ways to manipulate objects; the link bar will suggest the ones that might be useful for a particular thing. Small items can be picked up or dropped, devices can be switched on or off, doors can be opened or closed, and so on. Clicking (link) Watson will list some of the general tricks he's mastered, like "(no space) (link) speak (no space)" and "(no space) (link) {roll over} (no space)".
		}
		(now) (afer tried manipulation) %% No particular action needed for the choice version
	(endif)
	(now) (tried manipulation) %% EXPERIMENT - make this never repeat
(tutorial response for [push/pull/climb/search/open/close/squeeze $])
	~(after tried manipulation)
	(if) ~(link bar enabled) (then) %% Not strictly necessary but future-proofing
		(div @tutorial) {
			The text will usually imply what actions will be useful for certain objects. But if you're not sure what to do with something, (span @fixed) {HELP \[OBJECT\]} \(e.g. (span @fixed) {HELP BALL} \) will give suggestions.
		}
	(endif)
	(now) (after tried manipulation)

%% Putting this after manipulation since PUSH/PULL CHAIR will suggest a direction - the player should figure out on their own that the chair can move, since that's a bit of a puzzle
(tutorial prompt)
	(tried chair)
	~(tried going)
	~(after tried going)
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			To navigate between rooms, use compass directions, like (span @fixed) {GO WEST} \( or simply (span @fixed) W \) . If you know where you want to end up, you can also GO TO a particular place, or (span @fixed) FIND a particular thing.
		}
	(else)
		(div @tutorial) {
			To navigate between rooms, use the compass directions shown in the link bar. If you know where you want to end up, you can also type the name of a room and let Watson handle the navigation.
		}
	(endif)
	(now) (tried going) %% EXPERIMENT - make this never repeat
(tutorial response for [leave $ $ with $]) %% In the tutorial it'll always be with the chair
	~(after tried going)
	Some people do think it's odd that you've taught him compass directions, but he would always get so confused between (strong {your}) right and (strong {his}) right. This just works out better all around. %% This one isn't in a tutorial box since it's in-character text
	(now) (after tried going)

(meta verb list)
	A few special commands are always available:
	(help item {(link) (span @fixed) UNDO to take back your last action})
	(help item {(link) (span @fixed) SAVE and (link) (span @fixed) RESTORE to save your game})
	(help item {(link) (span @fixed) THINK to list the puzzles you're facing and the ones you've already solved})
	(help item {(link) (span @fixed) HELP for a full list of commands})
	(help item {(link) (span @fixed) ABOUT for information about the game})
	(help item {(link) (span @fixed) MAP to see a map of the house})
	(help item {(link) (span @fixed) HINTS if you're stuck on a puzzle})

(tutorial prompt)
	~(mentioned meta)
	(if) ~(link bar enabled) (then)
		(div @tutorial) {
			(meta verb list)
			(help item {(link) (span @fixed) RESTART to start over from the beginning, or (link) (span @fixed) QUIT to exit the game completely}) %% These two aren't really meaningful in the choice version since they're offered in a separate menu instead
		}
	(else)
		(div @tutorial) {
			(meta verb list)
			There are links to these at the top of the page for easy access.
		}
	(endif)
	(now) (mentioned meta) %% No action needed

(tutorial prompt)
	~(player is imprisoned)
	(div @tutorial) {
		Watson is free, and it's time to solve this case! First, you'll have to get back to the scene of the crime: if you can find evidence that this happened at midnight instead of in the morning, maybe that will convince the constables that it wasn't an accident. (par)
		Good luck, detective!
	}
	(now) (tutorial is finished)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Escape!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#sittingroom
(name *) sitting room
(room *)
(look *) The big south-facing (link) windows in this room give it the best light in the house, so you always take your breakfast and tea here. Normally it would be half-filled with your potted plants, but you took those out for Alfred to look at last week, and you haven't had a moment to move them back in yet. The room continues (#west) from here, while the hall leads (#north) over a small step to the rest of the house.
(from * go #north to #hall)
(from * go #west to #eveningroom)
(from * go #south to #baywindow)

#eveningroom
(name *) evening room
(room *)
(look *) Really this is just another part of the sitting room, but when the house was modernised and electrified, the west half was lit up and the east half left to its natural light. So you've taken to calling this the evening room, a comfortable place to sit after supper when you don't want to brave the stairs to the library. The stairs themselves end to the (#north), up a small step.
%% (from * go #north to #b-stairs) % See later where we implement crime scene tape
(from * go #east to #sittingroom)

#chair
(name *) comfortable chair
(dict *) comfy rolling wheel wheels favourite favorite armchair arm
(heads *) chair armchair
(dict *)
	~(player is imprisoned)
	toppled fallen
(your *)
(actor supporter *)
(pushable *)
	(player is imprisoned) %% Once it's fallen it's no longer pushable
(* is #in #sittingroom)
(descr *)
	Wonderfully comfortable, with just the right amount of back support for reading. You've mounted it on wheels so you can get sunlight in the sitting room in the morning and lamplight in the evening room at night, and cleared the floor so the wheels don't get stuck on anything.
	(if) (player is imprisoned) (then)
		(par) Watson's (link) lead is looped over one of the posts, where he can't unhook it himself.
	(endif)
(appearance *)
	(player is imprisoned)
	Watson's lead has been looped over the post of (link [my favourite chair]) {your favourite chair}, keeping him from interfering in the crime scene. %% The status-link-the hack makes it read as "your favourite chair" in the text but "my favourite chair" in the links; it was bugging me
	{
		*($Obj is #under *)
		(par) (appearance $Obj #under *)
	}
(appearance *)
	~(player is imprisoned)
	Your (link) chair lies toppled, no longer keeping Watson imprisoned.
	%% Things under it are now hidden from view so they're no longer explicitly described, though they can be found with LOOK UNDER or SEARCH

%% Things can be placed under it
(* accepts #under)

%% Rules for moving it around

(narrate leaving $Room $Dir with *)
	Watson tugs on his lead, and the chair on its wheels glides smoothly along behind. You drift after him to the (name $Dir).
	(if) ($ is #under *) (then)
		(collect $Obj)
			*($Obj is #under *)
		(into $List)
		(par) (The $List) prove(s $List) too small to foul the wheels, and (is $List) left behind.
		(exhaust) { *($Obj is one of $List) (now) ($Obj is #in $Room) }
	(endif)
	(par)

(after [leave $ $ with *]) %% If you throw the books to the other room, then roll the chair over them, they should end up underneath it
	(current room $Room)
	(collect $Obj)
		*($Obj is #in $Room)
		(item $Obj) %% Very important, this!
	(into $List)
	(if) (nonempty $List) (then)
		(exhaust) { *($Obj is one of $List) (now) ($Obj is #under *) }
		(The $List) end(s $List) up under its wheels. (par)
	(endif)

(prevent [push * $]) %% It's already not (pushable $) when it's fallen, but give a better error message
	~(player is imprisoned)
	The chair's wheels aren't much use when it's fallen like this. Best to leave it for someone with hands to right.

(instead of [leave $ $Dir]) %% Can't move while tied to it without bringing it along!
	(player is imprisoned)
	\( pulling (the *) along \) (line)
	(try [push * $Dir])

(perform [leave $ $Dir with *]) %% It falls if you push it while the wheels are fouled
	(#books is #under #chair)
	Watson lopes back (name $Dir), pulling the chair behind him...until it catches, pulling him up short. One of your books is trapped under the wheel! But he keeps pulling, and between the lead on the post pulling it forward and the caught wheel holding it back, it topples forward with a grand, stately (emph {crash}).
	(par) With the top posts now resting on the floor, the lead is within Watson's reach, and with a look of doggy triumph he pulls it free!
	(now) ~(player is imprisoned)

(prevent [leave $ #north with *]) %% North exits are the ones with steps
	Watson scampers up over the (link) step with ease, but the lead catches and he's drawn up short—it's simply too high an obstacle for the chair's wheels to handle. He falls back with a sad whimper.

(prevent [throw $Obj #north]) %% Avoid softlock if you throw all the items out of the room
	(player is imprisoned)
	Best not. While Watson is tied up like this, he'd have no way to get (it $Obj) back.

%% And, make sure the player can use other phrasings than PUT BOOKS UNDER WHEELS
(instead of [put $Obj #behind *])
	(try [put $Obj #under *])

(perform [push/pull $Obj]) %% When the chair is upright, things pushed off it end up underneath it instead
	(player is imprisoned)
	($Obj is #on *)
	(now) ($Obj is #under *)
	(if) ($Obj = #books) (then) %% Should only be able to be the books, but for safety
		(narrate putting $Obj #under *)
	(else)
		(The $Obj) tumbles in front of the chair's wheels.
	(endif)

(instead of [drop $Obj])
	(player is imprisoned)
	(#watson is #in $Room) %% Only when you're actually on the floor
	(* is #in $Room)
	(try [put $Obj #under *])

(narrate putting #books #under *)
	(player is imprisoned) %% This only happens from actions like DROP if you're imprisoned, otherwise it's an explicit attempt to hide something under the chair
	The books tumble around and under the chair's wheels in a messy pile.

#step %% If they try X STEP or whatever
(name *) step
(descr *) The floor to the north is about eight inches higher than the floor in here, making a little step up.
(#sittingroom/#eveningroom attracts *)
(instead of [enter/climb *]) (try [go #north])

#leash
(name *) lead
(dict *) collar leash
(item *)
(* is #wornby #watson)
(descr *)
	A proper collar, and a proper lead, for whenever you take Watson out of the house.
	(if) (player is imprisoned) (then)
		It's now keeping him from moving more than four feet from the (link) chair .
	(else)
		It's trailing loosely behind him now, occasionally getting under his feet.
	(endif)

(narrate inventory wearing)
	(player is imprisoned)
	His (link) collar keeps him from moving more than four feet from the chair.

(narrate inventory wearing)
	He's also, as always, wearing his (link) collar .

(prevent [remove/take *])
	Watson tries to struggle out of the collar, but to no avail. You've put quite a lot of effort into making that impossible.

(instead of [push * $Dir]) %% In case someone tries PULL LEASH
	(player is imprisoned)
	(try [push #chair $Dir])
(instead of [pull *])
	(player is imprisoned)
	(try [pull #chair])

%% This serves no game purpose but is useful for the tutorial
#ball
(name *) rubber ball
(dict *) toy dog hard
(heads *) ball
(item *)
(biteable *)
(* is #in #sittingroom)
(descr *)
	It's a hard rubber ball, the sort Watson loves to chew on.
	(if) (#treat is #in *) (then)
		You've put a treat inside it for him to try to work out, a little puzzle for him to solve.
	(else)
		The puzzle is now solved, the toy bereft of treats.
	(endif)
(initial appearance *)
	A (link) { rubber ball } lies on the floor nearby.

(perform [push/pull *])
	Watson bats at the toy, but the treat doesn't come out. It'll take more force than that.

(perform [squeeze/open/attack *])
	(if) (#treat is #in *) (then)
		Watson squeezes the toy between his paws, but can't quite get the right angle to extract the treat inside.
	(else)
		Watson squeezes the toy happily.
	(endif)

(perform [eat *])
	(if) (#treat is #in *) (then)
		Watson gnaws happily at the toy, chomping on it at different angles until the (link) treat inside pops out!
		(#watson is $Rel $Holder)
		(now) (#treat is $Rel $Holder)
	(else)
		Watson gnaws happily at the toy, but no more treats come out.
	(endif)

#treat
(name *) treat
(dict *) dog snack
(heads *) treat snack
(item *)
(* is #in #ball)
(descr *)
	A tasty snack to reward Watson's puzzle-solving skills.
(edible *)
(initial appearance *)
	A (link) {dog treat}, extracted from the chew toy, is just waiting to be devoured.

%% And back to the puzzle itself
#bookshelf
(name *) bookshelf
(dict *) book shelf case high
(heads *) shelf case
(actor supporter *)
(* is #in #eveningroom)
(appearance *)
	(if) (#books is #on *) (then)
		Your (link) {collection of mystery novels} is kept on a (link) {high shelf}, out of Watson's reach.
	(else)
		The (link) {high shelf} now stands bereft of books.
	(endif)
(descr *)
	You made sure to put the bookshelf high enough that Watson couldn't reach it. It's not that he'd chew on the books; no, he's (emph {far}) too well-trained for that. But he has a tendency to knock things over in his excitement.
	(if) (#books is #on *) (then)
		Now your (link) {paperback murder mysteries} are both safe, and within easy reach. Easy reach for a human, at least.
	(else)
		It doesn't seem to have helped much, in the end.
	(endif)

(when $Obj is out of reach) %% Overriding the "when" predicate here for a custom tutorial message
	{ ($Obj = *) (or) ($Obj is nested #on *) }
	(current player $Player)
	~($Player is #on $) %% Out of reach unless you're on a supporter of some kind
	Watson stretches his body, trying to reach (the $Obj), then settles back with a sad whimper.
	(if) ~(tutorial is finished) ~(hinted out of reach) (then)
		(div @tutorial) { Messages like this, telling you why you can't do something, often indicate puzzles to be solved. In this case, the shelf is too high for Watson to reach; perhaps he could reach it if he were higher up? }
		(now) (hinted out of reach)
	(endif)

(out of reach $Obj)
	(current player $Player)
	($Player is nested #on *)
	~{ (supporter $Obj) (or) ($Obj is nested #on $) }

%% Jumping from the shelf, or pushing things from it, should send them to the step
(* overlooks #on $Step)
	*($Step is #in #eveningroom)
	~($Step = *)
	(actor supporter $Step)

#books
(name *) books
(plural *)
(dict *) book novel novels mystery murder mysteries collection of paperback
(heads *) book
(item *)
(* is #on #bookshelf)
(descr *) Most of your books are kept in the library upstairs, of course, but you've turned this room into such a lovely place to read in the evenings, and the stairs have been getting harder to manage every year. So you've started a collection of paperback mystery novels down here, for when you're in the mood for some light reading.
(appearance * #under #chair) Your (link) {collection of mystery novels} is scattered across the floor, getting under the chair's wheels.
(flammable *)
(legible *)
(printing *) Plenty of classic Agatha Christies here, though they're hard to read when you can't turn the pages.

%% (test @escape with inputs [ [x ball] [watson , take ball] [inventory] [push ball] [bite ball] [drop ball] [eat treat] [push chair] [w] [x shelf] [climb shelf] [jump on chair] [jump on shelf] [books] [push books] [down] [down] [push books] [east] [north] [west] [north] [tape] [bite tape] [north] ])

(on every tick)
	(player is imprisoned)
	(#eveningroom is visited)
	(start hint timer for #chair)

(hint for #chair at 10 turns)
	(div @hint) { If you could somehow knock the chair down, Watson could pull his leash free...but pulling it just makes it roll around. What if something stopped it from rolling? }

(hint for #chair at 15 turns)
	(div @hint) { If Watson put something large enough under the wheels, then pulling on the leash might knock the chair down. }

(hint for #chair at 20 turns)
	(div @hint) { There aren't many options to work with here—the ball and treat are too small, the binocular stand can't move. Those (link) books would work, but the shelf is too high for Watson to reach. How could he get up higher? }

(hint for #chair at 25 turns)
	(div @hint) { If Watson pulls the chair into the evening room, he can stand on it to reach the shelf. }

(hint for #chair at 30 turns)
	(div @hint) { Once Watson can reach the shelf, he can push the books to knock them down onto the chair, then push them again to send them to the floor \(or take them and put them under the wheels\). Then, going east to the sitting room will topple the chair and set him free. }

(stop hints for #chair)
	(#books is #under #chair)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Exculpation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% First, let's make sure the player doesn't leave the little opening area yet. Otherwise they'll run into puzzles that don't function at this stage.

(prevent entering $Room)
	~(introduction finished)
	~($Room is one of [#sittingroom #eveningroom #hall #b-stairs])
	(if) (current room #b-stairs) (then)
		($Link = [look])
	(elseif) (#s-tape is handled) (then)
		($Link = [go to the bottom of the stairs])
	(elseif) (current room #eveningroom) (then)
		($Link = [go through the police tape])
	(else)
		($Link = [go to the evening room])
	(endif)
	(The $Room) is that way, but best avoid it for now. If Watson makes a nuisance of himself, the constables will secure him better next time—you need to (link $Link) {get to the crime scene} and prove it was murder!

%% There are three possible hiding places at the bottom of the stairs, all of which need to be checked to find the torch

(all hiding places checked)
	(vent is checked)
	(phone is checked)
	(stack is checked)

#torch
(name *) torch
(your *)
(dict *) flash light flashlight lamp
(item *)
(switchable *)
(* is on)
(descr *)
	It's a very durable torch, even if it's not waterproof, and provides a good, steady light. The sort you can rely on when the electricity is out. Very useful if you were, say, trying to get down to the phone after midnight to report that you'd been poisoned. (par) It's currently
	(if) (* is on) (then)
		shining brightly
	(else)
		turned off
	(endif) .
(initial appearance *)
	(* is $Rel $Obj)
	The (link) torch you used last night has fallen (name $Rel) (the $Obj).
(* provides light)
	(* is on)

(prevent [take/push/pull/switch *])
	(* is pristine)
	Best not to move it yet. The constables need to see that you dropped it when you fell, rather than Watson bringing it in later.
(instead of [switch on/off *])
	(* is pristine)
	(try [take *])

#i-vent
(name *) grate
(dict *) vent grating air duct
(descr *) Things are always falling and getting lost in it. You kept meaning to put some sort of screen over it, but, well, you never quite found the time.
(container *) %% Not really
(instead of [search *])
	(try [look #in *])
(initial appearance *)
	A big (link) grate is set into the floor under the stairs.
(appearance *) %% No appearance during the cutscene
	(opening cutscene)
(* is #in #b-stairs)

(prevent [put $Obj #in *])
	Best not. Even if you got (the $Obj) down there, it would be such a pain to fish (it $Obj) back out.

(perform [look #in *])
	(#torch is nowhere)
	(now) (vent is checked)
	Watson works one paw into the grate and fishes around in there.
	(if) (all hiding places checked) (#torch is pristine) (then)
		Something clanks—he's found your (link) torch !
		(now) (#torch is #in *)
	(else)
		But he turns up nothing but dust.
	(endif)

#phone
(name *) telephone niche
(dict *) phone nook alcove
(descr *) It is, even you have to admit, rather old-fashioned to have a telephone niche. Most people keep their telephones on tables now. But you always liked how it looked, so when you upgraded to a modern telephone, you kept it in the old niche. Things do occasionally roll under it and get lost.
(instead of [search *])
	(try [look #under *])
(initial appearance *)
	Your telephone hangs in its (link) niche on the north wall.
(appearance *) %% No appearance during the cutscene
	(opening cutscene)
(* is #in #b-stairs)

(* accepts #under)
(perform [look #under *])
	(#torch is nowhere)
	(now) (phone is checked)
	Watson noses under the telephone niche, fishing around with one paw.
	(if) (all hiding places checked) (then)
		Something clanks—he's found your (link) torch !
		(now) (#torch is #under *)
	(else)
		But he retreats a moment later, nothing found.
	(endif)

#newspapers
(name *) stack of newspapers
(dict *) pile news papers paper newspaper old
(heads *) stack
(descr *) You've gathered up the old ones here for Nigel to take the next time he comes by. There's something he does with them, and he always takes them off your hands when they start piling up. It's possible something could roll behind them.
(item *) %% Not really, but this ensures TAKE gets suggested
	(#newspaper-old is pristine) %% Stop suggesting once you've taken the one
(instead of [search *])
	(try [look #behind *])
(initial appearance *)
	Various old (link) newspapers are stacked in the corner.
(appearance *) %% No appearance during the cutscene
	(opening cutscene)
(legible *)
(printing *) You can't really read the text when they're bundled together like this.
(* is #in #b-stairs)

(* accepts #behind)
(perform [look #behind *])
	(#torch is nowhere)
	(now) (stack is checked)
	Watson pushes his nose into the stack, feeling around for anything behind it.
	(if) (all hiding places checked) (then)
		Something clanks—he's found your (link) torch !
		(now) (#torch is #behind *)
	(else)
		But he pulls back with a sad (emph {wuf}). Nothing.
	(endif)

%% (test @torch with inputs [[x torch] [vent] [look in vent] [phone] [look in phone] [look under phone] [newspaper] [look behind newspaper] [get torch] [turn off torch] [bark]])

(on every tick in #b-stairs)
	~(opening cutscene)
	~(introduction finished)
	(if) (#torch is nowhere) (then)
		(start hint timer for #b-stairs)
	(else)
		(start hint timer for #torch)
	(endif)

(hint for #b-stairs at 10 turns)
	(div @hint) { There are a few different places your torch might have fallen. Time for some detectively diligence! }

(hint for #torch at 5 turns)
	(if) (link bar enabled) (then)
		(div @hint) { The (link) Watson link will list various general tricks he's learned, which don't pertain to any particular object. One of those may be the key here. }
	(else)
		(div @hint) { If one of the constables comes in here, you can point them to the torch. But how to attract their attention? }
	(endif)

(hint for #torch at 10 turns)
	(div @hint) { Out of all the tricks Watson knows, (link) { (span @fixed) SPEAK } is probably the best for drawing attention. }

(stop hints for #b-stairs)
	(#torch is in room $)

(stop hints for #torch)
	(constable target #b-stairs) (or) (#torch is handled)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - Consequences
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(prevent [bark]) %% Added for consistency, though it does make the following code a bit less useful
	~(player is imprisoned)
	~(introduction finished)
	(#torch is nowhere)
	Oh, best not. Barking is sure to draw the constables' attention, and until he has some actual evidence to show them, it would just get him tied up again—possibly in a way he can't escape.

(after [bark])
	(par)
	(if) ~(introduction finished) (then)
		(#davis is in room $Room)
		(current room $Target)
		(if) ($Room = $Target) (then)
			Davis starts at the noise, then looks down at Watson in confusion. After a moment she scritches his head before turning back to her work.
		(elseif) ($Room = #diningroom) ~(constable target $) (then)
			Off in the dining room, Davis sets aside her work with a sigh
			(if) (current room #b-stairs) (#n-tape is pristine) (then)
				and undoes the police tape
				(now) (#n-tape is handled)
			(endif)
			.
			(now) (#davis is #in #diningroom) %% Avoid the second report of her getting up from her chair
			(now) (constable target $Target)
		(else)
			Davis turns toward the new source of noise.
			(now) (constable target $Target)
		(endif)
		(now) (constable message suppressed) %% Don't give a second message this turn
	(else)
		(#davis is in room $Room)
		(current room $Target)
		(if) ~($Room = $Target) (then)
			Off in (the $Room),
		(endif)
		Davis steadfastly ignores the sound. She's investigating a murder now, and can't be distracted by barking dogs!
	(endif)

(constable has reached $Room)
	(current room $Room)
	(#torch is pristine)
	(#torch is in room $Room)
	(#torch is $ $Parent)
	Davis scans the room for anything amiss. Nothing, nothing...then Watson barks again, sniffing at (the $Parent), and she takes a closer look.
	(par) "What's this? A torch?" She fishes it out, turning it over in her hand. "Still on, cells still good. Why would she 'ave had a torch at nine in the morning on a bright sunny day?"
	(par) You watch as it clicks in her head, and she hurries to the telephone. "Something's wrong here. I better ring the Inspector and tell the boys at the lab..."
	(any key or link)
	(introduction concludes)
	(exhaust) *(end the introduction)

(introduction concludes)
	(par)
	"...results back from Fletcher at the lab. The Marsh test was positive. Arsenic poisoning, without a doubt." Well, obviously; you could have told them yourself if you'd made it to the phone in time. The constables are gathered around your dining room table now, listening as Davis summarises the situation. "Given her experience with poisons, it's unlikely this was an accident. I think we need to seriously consider the possibility of foul play." (par)
	Hughes is tugging at his moustache. "Hmph. Quite. Good catch with the torch; would have been a disgrace for the department if we'd missed that. Now that we know, we're not going to leave a single stone unturned. Do we have a motive? Inheritance?" (par)
	"It seems likely. We found a will in her library. Various bequests to charities and organizations, and four specific people who will benefit quite, well, substantially." (par)
	"Opportunity?" (par)
	Phillips clears his throat. "I've been going through her diary." Inevitable, you suppose—you would have done the same—but rude nonetheless. "Fletcher says death occurred between midnight and 2:00 AM, and the poison must have been consumed—orally—somewhere between four and twelve hours before that. That gives all four of them the opportunity." (par)
	Hughes furrows his bushy eyebrows. "Four to twelve hours? She had lunch with me at the King's Arms yesterday. I'll be asking some questions around there." (par)
	Davis lays her papers out on the table. "Each of those people had access to her food or drink within that timespan." \( "Or medication," Phillips adds. \) (par)
	"First is her nephew Nigel. That afternoon, he was helping her go through some records in her attic. It seems she's got a sort of a laboratory up there, and he could have tampered with her chemicals." Nigel? He'd never have the stomach for it. (par)
	"Second is Mrs Charlotte Peabody. Gosling had dinner with her that night, and specifically mentioned a one-peck bundle of carrots Peabody brought from the farmer's market. Gosling ate plenty, but Peabody didn't touch them." Well, of course. Lottie can't stand the smell of carrots, that's why she gave them to you in the first place. "We need to find and test the remaining carrots." (par)
	"Third is Alfred Tucker, her gardener." Preposterous. "After supper she drank an herbal tea made with (target colour) roses. They must have been gathered from one of her gardens. Arsenious oxide is sometimes used as a weed killer. If Tucker applied some to the flower petals, she'd be poisoned some time later, when she finally made tea from those ones." Not at all his style. "We need to find the bush she took these from and test if it's absorbed anything." (par)
	"Finally, there's her aide, Emily Morris." Emily? The girl never had a malicious thought in her life. "She arranged for all her medications, and could easily have tampered with them." (par)
	(link) Hughes stands, smoothing out his now-frazzled moustache again. "Right then! (link) Biddlecombe will be setting up in the library to handle communications. (link) Phillips , I want you to find and test those medications first thing. They have to be somewhere in her room. (link) Davis , track down the details on those suspects. We'll be asking them a few questions. We'll have this case cracked right open before it hits the papers!" He glares down at Watson, who's snuffling curiously at his hand. "And get that bloody beast out of here!" (par)
	(any key or link)

(end the introduction)
	(now) (#torch is #on #table)
	(now) (#torch is handled)
	(now) (#torch is off)
	(now) (#davis is #on #davischair)
	(now) (#sandwich is #on #table)
	(now) (#phillips is #in #bedroom)
	(now) (#biddlecombe is #in #library)
	(now) (#recorder is #on #table)
	(now) (introduction finished)

(end the introduction)
	(move player to #in #kitchen)
	(try [look])

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 1B - The Framework for the Game
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - General Map
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Just for fun
(door *(police tape $))
((police tape $Obj) blocks passage)
	($Obj is pristine)
(initial appearance (police tape $Obj))
	~(opening cutscene)
	(current room $Room)
	(from $Room go $Dir to $Obj)
	(collect words) %% Make sure the link doesn't disambiguate
		(name $Dir) police tape
	(into $FullName)
	A layer of (link $FullName) {police tape} blocks off the door to the (name $Dir).
(biteable *(police tape $))

(perform [eat (police tape $Obj)])
	(if) ($Obj is pristine) (then)
		Watson chomps down on the police tape, taking a big chunk out of the middle and chewing it happily while the ends flutter to the ground.
		(now) ($Obj is handled)
	(else)
		Watson takes a few more happy bites. It's one of his favourite things to chew.
	(endif)
(instead of [attack/take/push/pull/open (police tape $Obj)])
	(try [eat $Obj])

(unlikely [examine (police tape $Obj)]) %% Avoid disambiguating for a simple command NORTH

(name (police tape $Obj))
	($Obj is handled)
	shredded police tape
(name (police tape $)) police tape
(dict (police tape $Obj)) %% Ensure TO THE NORTH and such is understood
	(current room $Room)
	(from $Room go $Dir to $Obj)
	to (name $Dir)
(dict (police tape $Obj))
	($Obj is handled)
	shred shreds of torn

(heads (police tape $Obj)) %% Avoid annoying disambiguation - you usually mean the intact stuff
	(if) ($Obj is handled) (then)
		shredded
	(else)
		police tape
	(endif)

(descr (police tape $Obj))
	Bright yellow tape meant to keep people out of a crime scene.
	(if) ($Obj is handled) (then)
		This one has been chewed to bits and won't keep anyone out of anything.
	(else)
		(current room $Room)
		(from $Room go $Dir to $Obj)
		It's thoroughly blocking the (name $Dir) door.
	(endif)
(dict (police tape $)) crime scene
(legible *(police tape $))
(printing (police tape $Obj))
	(if) ($Obj is pristine) (then)
		"CRIME SCENE – DO NOT CROSS – CRIME SCENE"
	(else)
		"...DO...CR...IME S..."
	(endif)

#n-tape
(police tape *)

#s-tape
(police tape *)

(from #eveningroom go #north through #s-tape to #b-stairs)
(from #b-stairs go #south through #s-tape to #eveningroom)

(from #diningroom go #south through #n-tape to #b-stairs)
(from #b-stairs go #north through #n-tape to #diningroom)

%% Add some hints in case people get stuck on this

(on every tick)
	~(opening cutscene)
	~(player is imprisoned)
	(#s-tape is pristine)
	(start hint timer for #s-tape)

(hint for #s-tape at 5 turns)
	(div @hint) { That (link) { police tape } is meant to keep you out of the crime scene, but too bad. You need to get in there to solve the case! }

(hint for #s-tape at 10 turns)
	(div @hint) { Really, police tape is more a suggestion than a real barrier. Watson's teeth should make short work of it. }

(stop hints for #s-tape)
	(#s-tape is handled)

%% Ground floor rooms

#hall
(room *)
(name *) ground floor hall
(dict *) lavatory bathroom toilet hallway %% If people use GO TO
(heads *) hall
(room header *) Hall
(look *) This narrow hallway is right at the centre of the house, linking the sitting room to the (#south) to the kitchen to the (#north). To the (#west), dark stairs lead down to the cellar, and to the (#east) used to be a closet until you had it turned into a tiny little lavatory.

(prevent [leave * #east])
	Watson just sits down and wags his tail happily. You've taught him not to go in there, since all he'd do is try to drink the toilet water; anyway, there's barely enough room to turn around there, and nothing in there would be much help in solving your murder.

(from * go #south to #sittingroom)
(from * go #north to #kitchen)
(from * go #west through #c-stairs to #landing)
(from * go #down to #west)

#kitchen
(room *)
(name *) kitchen
(look *) Your kitchen isn't spacious by any stretch of the imagination, but you've always found it cozy rather than cramped. A big door leads (#west) to the dining room, and a smaller one leads (#southeast) to your new reception room; the rest of the house is back to the (#south).

(from * go #south to #hall)
(from * go #west to #diningroom)
(from * go #southeast to #frontroom)
(from * go #east to #southeast)
(from * go #out to #southeast)

#diningroom
(room *)
(name *) dining room
(look *) This is the proper place to share a meal with someone, with plenty of windows, a big (link) table , and a lovely (link) chandelier . (link) {Display cabinets} along the walls show off some of your favourite curiosities from your long career; doors lead (#east) to the kitchen and (#south) to the rest of the house.

%% (from * go #south to #b-stairs) %% See police tape section
(from * go #east to #kitchen)

#chandelier
(name *) chandelier
(dict *) lovely electric light candle candles lights crystal crystals
(descr *) It was once a beautiful arrangement of crystal and candles, and now it's a beautiful arrangement of crystal and electric lights.
(* is #in #diningroom)
(out of reach *)

#d-cabinet
(name *) cabinets
(dict *) cabinet case cases display curio curios
(plural *)
~(opaque *)
~(openable *)
(descr *)
	You would never call yourself (emph {vain}), or overly proud of your success. But you could never resist showing off a few of your best and most notable accomplishments. Right now, you have the (link) {evidence from the Disgybl Gwydion case} laid out here, with some of your other cases displayed in (link if visited #frontroom) and (link if visited #balcony).
(* is #in #diningroom)
(perform [search *]) The cabinets contain all sorts of curios. At the moment, in pride of place is the (link) {evidence from the Disgybl Gwydion case}.
(instead of [read *]) (try [read #case-gwydion])

#case-gwydion
(name *) evidence from the Disgybl Gwydion case
(dict *) notebook report on
(plural dict *) reports
%% for descr see secrets.dg
(after [examine *])
	(now) (cabinet finished)
(* is #in #d-cabinet)
(read to examine *)

#paperwork
(name *) Davis's reports
(dict *) paperwork
(proper *)
(plural *)
(fine where it is *)
(descr *) Poor dear, this looks like a real mess of paperwork. It can be much easier to work on cases when you're not officially part of the constabulary.
(read to examine *)
(* is #on #table)
(appearance * #on #table) %% Handled as part of Davis's chair appearance

(manipulable *) %% Just for fun
(prevent [push *])
	Oh, but that would just be mean to the poor constable. She's stressed enough as it is.

#davischair
(name *) Davis's chair
(dict *) seat
(proper *)
(actor supporter *)
(* is #in #diningroom)
(appearance *)
	(if) (#biddlecombe is in room #diningroom) (then) %% For the finale, when other constables are there
		All three (link) constables have convened around the table.
	(elseif) (#davis is #on *) (then)
		(link) {Constable Davis} herself sits in one of your chairs, hard at work. Her (link) paperwork covers the table.
	(elseif) (#davis is #in #diningroom) (then)
		%% Nothing, since "Davis is here looking frazzled" and "Davis's seat stands conspicuously vacant" look wrong next to each other
	(else)
		Constable Davis's seat stands conspicuously vacant.
	(endif)
(prevent [climb *])
	(#davis is #on *)
	"Oi! Down!" Davis pushes Watson away.

(appearance #davis #on *) %% Ensure she doesn't get double-described

#table
(name *) table
(dict *) big dining dinner
(descr *) It can seat six comfortably, but nowadays your dinners are usually for one or two. So you've made sure it's not (emph {too}) big for that.
(actor supporter *)
(* is #in #diningroom)
(appearance *) %% This one's specialised to avoid describing the paperwork, sandwich, or biscuit
	~(#watson is #on *)
	(collect $Obj)
		*($Obj is #on *)
		~($Obj is one of [#paperwork #sandwich #biscuit]) %% Described in the chair appearance or Davis's behavior
	(into $List)
	(nonempty $List)
	On the table (is $List) (a $List).

(after [take $Obj]) %% Give a little explanation the first time something is taken
	(current room #diningroom)
	($Obj is one of [#torch #recorder])
	(select) %% Display this only once
		(par) Davis has no objection to the theft of (the $Obj). She doesn't seem to care what Watson does, as long as it doesn't interfere with her paperwork or her lunch.
		(now) (constable message suppressed)
	(or)
	(stopping)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 2A - Access the Gardens
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Food Theft
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Davis starts out eating a sandwich; after the sandwich is ruined, she switches to a packet of biscuits.

#sandwich
(name *) sandwich
(descr *) There's no accounting for taste, but really, you can't help feeling a twinge of disapproval. It's too large to be a tea sandwich, but too small to be a proper lunch on its own. Surely the constabulary should be ensuring its officers have proper meals while they're investigating your murder!
(edible *)
(item *)

%% No appearance because Davis's narration mentions it
%% It starts off-stage and is moved to the table after the intro

#biscuit
(name *) biscuit
(dict *) dry cookie
(heads *) biscuit cookie
(descr *) Dry and hard, and should really be eaten with some tea. If you were still alive, you would make some for the constables, to drink while you discuss the case. But alas, brewing a proper cup is well beyond Watson's abilities.
(edible *)
(item *)

%% As above, no appearance or initial location

%% This one is just to explain where the biscuits keep coming from, without letting the player get at it
#biscuitpack
(name *) pack of biscuits
(dict *) biscuit
(heads *) pack
(descr *) Constable Davis seems to be keeping it in her pocket, away from Watson's inquisitive nose. Wise of her, really.
(item *)
(* is #heldby #davis)

%% These are important because if you steal her food, Davis will chase you
%% But most of this code has been moved to actions.dg, since it's easier to have all of Davis's movement logic in one place
%% So go look there for more info!

(perform [give $Obj to #davis])
	($Obj is one of [#biscuit #sandwich])
	Constable Davis looks sadly at her mangled (name $Obj), and unceremoniously disposes of it. She does give Watson a little pet of appreciation, though.
	(now) ($Obj is nowhere)
	(now) ~(constable is chasing)

%% This just makes Davis's AI a bit easier
(prevent [drop #sandwich/#biscuit])
	Watson pretends he didn't hear you. He's normally very good at dropping things...except when it comes to human food.
(instead of [put $Obj $ $])
	($Obj is one of [#sandwich #biscuit])
	(try [drop $Obj])
(instead of [throw $Obj $])
	($Obj is one of [#sandwich #biscuit])
	(try [drop $Obj])

(prevent [eat/taste $Obj]) %% Hint at the solution
	($Obj is one of [#sandwich #biscuit])
	~(held $Obj)
	Watson tries to reach for (the $Obj), but Davis pulls it away. He'd probably need to grab it first, to get it out of her reach.

(instead of [push $Obj]) %% Avoid problems
	($Obj is one of [#sandwich #biscuit])
	~(held $Obj)
	Watson pretends he didn't hear you. His eyes are now focused on (the $Obj), and he seems more interested in eating it than pushing it.

%% (test @outdoors with inputs [ [teleport dining room] [get sandwich] [show sandwich] [davis] [z] [get biscuit] [eat biscuit] [z] [z] [get biscuit] [e] [z] [w] [z] [z] [get biscuit] [e] [se] [eat biscuit] ])

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Geography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#frontroom
(room *)
(name *) reception room
(look *) You designed this room specifically for uninvited guests. Back when the front door was at the west end of the house, they'd have to wait awkwardly outside until you had the sitting room or dining room in order. Now, there's a place to sit and take tea with them at a moment's notice—and admire the (link) {framed case reports} on the wall—and that can make witnesses ever so much more willing to open up. What used to be the back door of the house leads (#northwest) to the kitchen, and the new (link) { front door } leads out to the (#south).
(from * go #northwest to #kitchen)
(from * go #west to #northwest)
(from * go #south through #frontdoor to #porch)
(from * go #in to #northwest)
(from * go #out to #south)

%% Moved here from the dining room - TODO is this ideal?
#case-macaulay
(name *) report on the Macaulay case
(dict *) framed
(plural dict *) reports
(descr *)
	Under all the dry, formulaic language of a police report is the story of a serial murderer who baffled the constabulary, striking apparently without rhyme or reason. The case was about to be abandoned when you uncovered the truth: (link) {Lord Macaulay} wanted to silence an old business associate, and orchestrated the other murders as a distraction. The trial is ongoing, but thanks to you, he's quite likely to be convicted; really it's become quite the press spectacle. (par)
	Apart from the report framed here, you have others on display in (link if visited #diningroom) and (link if visited #balcony). After a career like yours, it's only natural to want to admire your past victories.
(read to examine *)
(* is #in #frontroom)

#frontscenery
(name *) tables and chairs
(dict *) table chair seat
(background *)
(actor supporter *)
(descr *) Very good for interviewing witnesses, but probably not helpful here.
(* is #in #frontroom)

#frontdoor
(door *)
(name *) front door
(dict *) blue
(descr *)
	Solid and secure, and painted such a lovely shade of blue. At the moment, it
	(if) (* is locked) (then)
		is firmly locked.
	(elseif) (* is closed) (then)
		is closed, but not locked.
	(else)
		stands invitingly open.
	(endif)
(openable *)
(* is closed)
(* is locked)

(perform [bypass *])
	(now) (* is unlocked)
	The front door's lock clicks open!

(instead of [attack/bite *])
	Watson scratches plaintively at the door.
	(if) (* is unlocked) (then)
		It's already unlocked, but he seems to enjoy it nonetheless.
	(endif)

#porch
(room *)
(name *) veranda
(look *) A little refuge from the weather, for when you want the fresh outdoor air without all the sun and the rain, between the (link) {front door} to the (#north) and the lawn to the (#south).
(from * go #north through #frontdoor to #frontroom)
(from * go #south to #lawn)
(from * go #in to #north)
(from * go #out to #south)
(from * go #southwest to #south)
(* is in garden region)

#recyclebin
(name *) bin
(dict *) recycling recycle
(actor container *)
(pushable *)
(* is #in #porch)
(initial appearance *) A (link) bin in the corner collects any stray glass for recycling.
(descr *)
	Alfred's been so very into recycling recently, and he's asked you to collect any stray glass you don't need; he picks it up every week or so for processing.

(appearance *) %% Turns out the library only describes handled items, not handled pushable things!
	(* is handled)
	The (link) { recycling bin } has been pushed here, looking rather out of place.

#lawn
(outdoors *)
(name *) lawn
(look *) It's really not big enough to be called the (emph {grounds}), but you've always been proud of your lawn and gardens, encircling the house on all sides. The most important one right now is your tea garden, down to the (#south); the veranda is back to the (#north).
(from * go #north to #porch)
(from * go #northeast to #north)
(from * go #south to #garden-c)
(from * go #in to #north)
(from * go #down to #south)
(prevent [leave * $Dir])
	~($Dir is one of [#north #south #in #down])
	Watson sits back, nudging his dangling lead with his nose. He knows he's not supposed to leave the garden without someone holding his lead. And unfortunately, there's nobody around to do that any more.

#newspaper-new
(name *) current newspaper
(dict *) news paper today new today's
(descr *) More coverage of the (link) Macaulay case, it seems. Lord Macaulay has been convicted on five counts of murder \( you're quite proud of that one \); in a statement, his sister (link) Elisabeth calls the verdict "an absurdity of the highest order" and vows to "set right this gross miscarriage of justice". You'll have to keep an eye on that one.
(item *)
(initial appearance *) (link) {Today's newspaper} lies in front of the porch steps.
(flammable *)
(* is #in #lawn)

%% A tester pointed out that you should be able to show this to Davis, so
(perform [give * to #davis])
	"Hey, boy. What's this?" Davis reaches down and extricates the newspaper from Watson's mouth. "Today's paper? Do you always bring it in here? That's a good boy." And she sets it aside without a second thought. (par)
	It seems the constables will need more evidence than that to start investigating the revenge angle. Perhaps once they've run out of all their current leads they'll be more open to new ones.
	(now) (* is #on #table)

(room *(outdoors $)) %% Used to prevent light switches and such from appearing outdoors
(*(outdoors $) is in garden region)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 2B - Exculpate the Gardener
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Randomization
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(global variable (garden order $)) %% What order are the plants in?
	%% We could actually do without this at this point - we only use it in a single rule, and everything else is done with the location of the plant objects - but I'm keeping it for the moment in case that changes
(global variable (target flower $)) %% Which of the roses are we looking for?
(global variable (red bottle $)) %% Which of the bottles is the red one?
	%% If (disable bottle colour puzzle) is set, then this particular puzzle is removed

(initial setup)
	(randomise the gardens)

(randomise the gardens)
	~(garden order $) %% Ensure this only happens once
	(shuffle [#redrose #yellowrose #greenrose #beebalm #calendula #mint] into $NewList)
	(now) (garden order $NewList)
	(position the garden plants)
	(randomly select $Flower from [#redrose #yellowrose #greenrose])
	(now) (target flower $Flower)
	(if) (disable bottle colour puzzle) (then)
		(now) (red bottle #bottle1)
	(else)
		(randomly select $Red from [#bottle1 #bottle2])
		(now) (red bottle $Red)
	(endif)

(position the garden plants)
	(garden order [$One $Two $Three $Four $Five $Six])
	(now) ($One is #in #garden-nw)
	(now) ($Two is #in #garden-ne)
	(now) ($Three is #in #garden-w)
	(now) ($Four is #in #garden-e)
	(now) ($Five is #in #garden-sw)
	(now) ($Six is #in #garden-se)

(list directions $List)
	(listing $List { (direction to bed $_) } @and [] 0)

($Room has red plants)
	*($Plant is #in $Room)
	(plant $Plant)
	($Plant shows red)
($Room has green plants)
	*($Plant is #in $Room)
	(plant $Plant)
	($Plant shows green)

(display the garden plants through #baywindow)
	From this angle, you have a beautiful view of the tea garden, with its six beds arranged around the fountain in the center. The lavender in the fountain is a beautiful deep blue, but to your eyes the rest of the plants are a uniform yellowish colour—you've never been any better than Watson at distinguishing reds from yellows from greens.
	(par) (fixed pitch)
	(space 2) NW (space 2) NE (space 2) (line)
	W (space 3) <> (space 3) E (line)
	(space 2) SW (space 2) SE (space 2)
	(roman)

(display the garden plants through $Lens)
	(if) (red bottle $Lens) (then)
		($Filter = { ($_ has red plants) } )
		(now) (seen through red)
	(else)
		($Filter = { ($_ has green plants) } )
		(now) (seen through green)
	(endif)
	
	($Print = {
		(if) (query $Filter $_) (then)
			WW
		(else)
			BB
		(endif)
	} )
	
	(collect $Room)
		*(garden $Room)
		(query $Filter $Room)
	(into $White)
	(collect $Room)
		*(garden $Room)
		~(query $Filter $Room)
	(into $Black)
	
	(if) (disable bottle colour puzzle) (then)
		(if) (red bottle $Lens) (then)
			Looking through the red glass,
		(else)
			Looking through the green glass,
		(endif)
	(else)
		Through this filter,
	(endif)
	
	the garden beds in the (list directions $White) are a vibrant white, while the ones in the (list directions $Black) are featureless black.
	
	(par) (fixed pitch) %% Center is always black because the lavender is blue, so there's no reason to query it
	(space 2) (query $Print #garden-nw) (space 2) (query $Print #garden-ne) (space 2) (line)
	(query $Print #garden-w) (space 2) BB (space 2) (query $Print #garden-e) (line)
	(space 2) (query $Print #garden-sw) (space 2) (query $Print #garden-se) (space 2)
	(roman)

%% And for looking through the bottles directly in a room

(display the current room through $)
	(current room #garden-c)
	The (link) lavender appears deep black, which makes sense, since it's neither red nor green.

(display the current room through (red bottle $))
	(current room $Room)
	(garden $Room)
	Through
	(if) (disable bottle colour puzzle) (then)
		a red
	(else)
		this
	(endif)
	lens,
	(if) ($Room has red plants) (then)
		the (link) plants here look brilliant white.
	(else)
		the (link) plants here look deep black.
	(endif)
	(target flower $Flower)
	(if) ($Flower is #in $Room) (then)
		(now) (seen through red)
	(endif)

(display the current room through $)
	(current room $Room)
	(garden $Room)
	Through
	(if) (disable bottle colour puzzle) (then)
		a green
	(else)
		this
	(endif)
	lens,
	(if) ($Room has green plants) (then)
		the (link) plants here look brilliant white.
	(else)
		the (link) plants here look deep black.
	(endif)
	(target flower $Flower)
	(if) ($Flower is #in $Room) (then)
		(now) (seen through green)
	(endif)

(display the current room through $)
	(if) (disable bottle colour puzzle) (then)
		The colours of the room go strange and monochrome when seen through the bottle.
	(endif)
	%% No extra description needed if this is enabled

(seen through both bottles)
	(seen through red)
	(seen through green)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Plants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(dict (plant $)) flower flowers plant plants

(biteable *(plant $)) %% Ensure there's a link for the player to take it

(plant *(rose $))
(name (rose $)) rosebush
(dict (rose $)) rose roses thorn thorns bush bushes rosebushes
(descr (rose $))
	Alfred has planted three rosebushes at your direction; according to him, one is red, one yellow, and one green, for symmetry, though neither you nor Watson has ever been able to see the difference. The tea from them has the most wonderful smell to it, and just the right sort of sweetness. (par)
	The constables say it was (target colour) rose tea you were drinking the night of your death, so the (target colour) bush is the one you need to find.

#redrose
(rose *)
(colour *) red
(* shows red)

#yellowrose
(rose *)
(colour *) yellow
(* shows red)
(* shows green)

#greenrose
(rose *)
(colour *) green
(* shows green)

#beebalm
(plant *)
(name *) beebalm
(dict *) bee balm bergamot
(descr *)
	They may not be native here, but you've always loved the way these flowers look, and they've taken to the garden quite well. The tea has a spicy earthiness to it that always helps your digestion, and Alfred says the flowers are a bright red.
(* shows red)

#calendula
(plant *)
(name *) calendula
(dict *) marigold marigolds calendulas
(descr *)
	The bed here is overflowing with calendula marigolds, bright and cheery. They make a lovely floral tea with more bitterness to it than the roses, better for earlier in the day, and Alfred says they're a lovely golden yellow.
(* shows red)
(* shows green)

#mint
(plant *)
(name *) mint
(dict *) spearmint spear
(descr *) 
	You've made (emph {very}) sure the mint can't escape its bed, with a carefully-cleared exclusion zone around it on every side. But spearmint tea with a dash of honey is just the thing when you're feeling under the weather, and it's always best fresh. There are no flowers on this bed; just a carpet of dense green leaves clustered under the wall.
(* shows green)

(target colour)
	(target flower $Flower)
	(colour $Flower)

(instead of [bite/pull/attack (plant $Plant)])
	(try [take $Plant])

(prevent [take (rose $)])
	~(seen through both bottles)
	But can you be sure that's the (emph {right}) rose? You have three of them in the tea garden, after all, and only one of them is (target colour) . You can't make poor Watson bite thorns (emph {three}) times.
(prevent [take (plant $Plant)])
	~(target flower $Plant)
	Oh, the damage his teeth would do to your poor flowers! You can't bear the thought.
(prevent [take (plant $Plant)])
	(#rosebud is handled)
	Watson has already torn off one twig; you can't bear the thought of making him bite down on the thorns a second time, or mangling your flowers any further.

(prevent [take (target flower $Plant)])
	(just) (when we are holding something) %% Cut off all other checks, like the item check

(perform [take (target flower $Plant)])
	Watson delicately closes his mouth around one of the buds, trying to tear it free of the stem without getting pricked on the thorns. Oh, your poor flowers...but he does succeed, in the end.
	(current player $Player)
	(now) (#rosebud is #heldby $Player)
	(now) (#rosebud is handled)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Rooms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(outdoors *(garden $))

#garden-c
(garden *)
(name *) centre of the tea garden
(dict *) center
(direction to bed *) centre
(look *)
	Your tea garden is nestled deep in the foundation of the (link) {old ruins}, the stone walls rising up on every side to give the plants just the perfect amount of sunlight and shade. Here at the centre is where you placed that lovely (link) fountain , and a sturdy (link) chair , to sit in while you contemplate your options. (par)
	The garden beds themselves are arranged in a ring around you, and the path (#north) leads back to the lawn. You have a lovely view of the whole thing from your (link) {sitting room}.
(from * go #northwest to #garden-nw)
(from * go #northeast to #garden-ne)
(from * go #east to #garden-e)
(from * go #southeast to #garden-se)
(from * go #southwest to #garden-sw)
(from * go #west to #garden-w)
(from * go #northwest to #garden-nw)
(from * go #north to #lawn)
(from * go #up to #north)
(from * go #out to #north)
(instead of [leave * #south])
	There's no garden bed due south; three of them are arrayed around to the east, and three to the west.

#gardenchair
(name *) garden chair
(dict *) seat sturdy
(descr *) The perfect place to sit and appreciate the gardens.
(on-seat *)
(appearance *)
	(list objects #on *)
(* is #in #garden-c)

#gloves
(name *) gardening gloves
(dict *) glove
(pair *)
(descr *)
	(link) Alfred must have left them here, intending to keep working on these beds tomorrow. He's a diligent, hard-working man, and you've never known him to take shortcuts on his work; he prefers to handle things with his own two hands.
(* is #on #gardenchair)
(initial appearance *)
	A pair of gardening gloves has been left on the chair.

#fountain
(name *) lovely fountain
(descr *) Oh, it's just the prettiest thing, three tiers all sculpted out of that local clay with the coloured streaks through it. The pipes would always get all clogged up in the fall until you packed it full of soil and planted (link) lavender , and now it's a lovely spot of dark blue tying the whole garden together.
(container *)
(* is open)
~(openable *)
(* is #in #garden-c)

#lavender
(name *) lavender plant
(descr *) Such a wonderful blue! The other plants are all a uniform yellowish to your eyes, but that just makes the lavender stand out more. The tea from it always helps when you're having trouble falling asleep.
(plant *)
(* is #in #fountain)

#ruins
(name *) old ruins
(dict *) stones stone ruin crumbling walls wall building
(descr *) It really does give the tea garden a charming look, the crumbling stones of the old building around them. It used to be an old cottage, but you always thought a garden would look better there, and kept offering it to the police and the fire department if they wanted to destroy it for some training or other. Eventually you got tired of waiting and, well, you like to think it (emph {did}) end up providing some useful practice for them in the end. It isn't considered arson if it's your own property; you made very sure of that first.
(*(garden $) attracts *)

%% Others

(look (garden $Room))
	*($Thing is #in $Room)
	(plant $Thing)
	The garden bed under the old walls is just as neat and tidy as ever, as it should be. The ($Thing) is flourishing, ready for your next cup of tea. %% The ($Thing) instead of (The $Thing) since we know they're all common nouns and we want the link

(name (garden $Room))
	(direction to bed $Room) bed

(room header (garden $Room))
	Tea garden, (direction to bed $Room)

#garden-nw
(garden *)
(direction to bed *) northwest
(from * go #east to #garden-ne)
(from * go #southeast to #garden-c)
(from * go #southwest to #garden-w)
(from * go #south to #southwest)

#garden-ne
(garden *)
(direction to bed *) northeast
(from * go #west to #garden-nw)
(from * go #southwest to #garden-c)
(from * go #southeast to #garden-e)
(from * go #south to #southeast)

#garden-w
(garden *)
(direction to bed *) west
(from * go #northeast to #garden-nw)
(from * go #north to #northeast)
(from * go #east to #garden-c)
(from * go #southeast to #garden-sw)
(from * go #south to #southeast)

#garden-e
(garden *)
(direction to bed *) east
(from * go #northwest to #garden-ne)
(from * go #north to #northwest)
(from * go #west to #garden-c)
(from * go #southwest to #garden-se)
(from * go #south to #southwest)

#garden-sw
(garden *)
(direction to bed *) southwest
(from * go #east to #garden-se)
(from * go #northeast to #garden-c)
(from * go #northwest to #garden-w)
(from * go #north to #northwest)

#garden-se
(garden *)
(direction to bed *) southeast
(from * go #west to #garden-sw)
(from * go #northwest to #garden-c)
(from * go #northeast to #garden-e)
(from * go #north to #northeast)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - Bottles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(item *(bottle $))

#bottle1
(name *) squat bottle
(plural dict *) bottles
(dict *) stout short
(dict *)
	(disable bottle colour puzzle)
	red
(descr *)
	A wide, squat glass bottle you'd set out for recycling.
	(if) (disable bottle colour puzzle) (then)
		From the shape, it must be the red one Alfred left behind; you could never tell red from green yourself, but they do different things to the colours when you look through them.
	(else)
		Now, was this the green wine bottle from two weeks ago, or that odd red bottle Alfred left behind? You already took the label off... (par)
		You've checked in the past by looking through it and seeing what happens to colours. Red things look white through red glass and black through green glass, and vice versa; yellow things look white through both.
	(endif)
(bottle *)
(* is handled)
(* is #in #recyclebin)

#bottle2
(name *) narrow bottle
(plural dict *) bottles
(dict *) tall
(dict *)
	(disable bottle colour puzzle)
	green wine
(descr *)
	A tall, narrow glass bottle you'd set out for recycling.
	(if) (disable bottle colour puzzle) (then)
		From the shape, it must be the green wine bottle from last week; you could never tell red from green yourself, but they do different things to the colours when you look through them.
	(else)
		Now, was this the green wine bottle from two weeks ago, or that odd red bottle Alfred left behind? You already took the label off... (par)
		You've checked in the past by looking through it and seeing what happens to colours. Red things look white through red glass and black through green glass, and vice versa; yellow things look white through both.
	(endif)
(bottle *)
(* is handled)
(* is #in #recyclebin)

(garden view (bottle $Obj))
	($Obj is #on #bottleholder)

#bottleholder
(name *) binocular stand
(dict *) binoculars
(descr *)
	You'd set up a little stand in front of your best window, hoping to attach your binoculars to it for birdwatching. But then it never quite worked, because you always wanted to move them around too much; they're much better for spying on people than birds. Now it just collects dust while you try to think of something better to put on it.
(supporter *)
(initial appearance *) Your ill-conceived (link) {binocular stand} is fixed in front of the bay window.
(* is #in #sittingroom)

(prevent [put $Obj #on *])
	~(bottle $Obj)
	Watson tries to position (the $Obj) on the stand, but (it $Obj) just (doesn't $Obj) quite fit. It's really only meant to hold cylindrical things.

#baywindow
(name *) bay window
(dict *) windows
(descr *)
	When you (link [look through bay window]) {look through it}, you get a beautiful view of your tea garden.
(garden view *)
(* is #in #sittingroom)

(instead of [look #in $Obj])
	(garden view $Obj)
	(display the garden plants through $Obj)
(instead of [look #in $Obj])
	(bottle $Obj)
	(if) ~(disable bottle colour puzzle) (then)
		(The $Obj) tints everything...either red, or green. You're not quite sure which.
	(endif)
	(display the current room through $Obj)

~(unlikely [look #in (garden view $)]) %% Even though they're not containers, LOOK THROUGH makes perfect sense

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 5 - Exculpation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#rosebud
(item *)
(name *) torn-off rosebud
(dict *) rose roses branch torn off twig
(descr *) A gently-mangled twig from your rosebush. It seems these are the same (target colour) roses you made tea from on the night of your death—the ones the police think Alfred might have poisoned.
(evidence *)

(perform [bypass *])
	(current player $Player)
	The rosebud materialises in Watson's mouth!
	(now) (* is #heldby $Player)

(perform [give * to #davis])
	"Hm? What's this?" The constable looks down at the torn branch in Watson's mouth. (par)
	"Wait—is this—?" She takes it carefully, avoiding the thorns and the dog slobber. "The (target colour) roses! This must be from the same bush as the tea she drank last night! The boffins at the lab will need a look at this." (par)
	Watson sits back and wags his tail happily as Davis hurries off. It will take some time for the laboratory tests to come back, but you already know what they'll say: that the roses weren't poisoned, and Alfred is innocent.
	(now) (* is nowhere)
	(now) (#davis is #in #frontroom) %% She ran off to deliver the evidence
	(now) (constable target #diningroom)
	(now) (constable message suppressed)
	(now) (gardener exculpated)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Epilogue - Difficulty Switch
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(disable bottle colour puzzle)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 3A - Access the Cellar
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - The Dumbwaiter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% This has to come above the specific rules

(appearance (shaft $Obj)) %% Change description when dumbwaiter is there
	(#dumbwaiter is #in $Obj)
	($Obj is open)
	(appearance #dumbwaiter #in $Obj)

%% Start with specific rules for specific shafts

#shaft-a
(shaft *)
(* is #in #attic-n)
(where *) the attic

#shaft-u
(shaft *)
(* is #in #library)
(* is closed)
(appearance *) The dumbwaiter used to run through here, but you covered over the (link) shaft when you turned the room into a library. There was just too much risk of something spilling out.
(descr *) You can still push or pull the (link) wheel to send it to a different floor, but there's no way to access it from here.
(* is below #shaft-a)
(where *) the first floor
(prevent [open *]) It's thoroughly boarded up and painted over; you wouldn't even know it was there if not for the wheel. %% This will happen if the player tries to put things in it, etc
~(* accepts #in) %% Experiment - to avoid a misleading link

#shaft-g
(shaft *)
(* is #in #kitchen)
(* is below #shaft-u)
(where *) the ground floor

#shaft-c
(shaft *)
(* is #in #flooded)
(appearance *) The (link) {dumbwaiter shaft} ends here, well above Watson's head.
(appearance #dumbwaiter #in *)
	(collect $Obj)
		*($Obj is #in #dumbwaiter)
	(into $Contents)
	The (link) dumbwaiter hangs well above Watson's head, with (a $Contents) in it.
(out of reach $Obj)
	(#watson is #in #flooded)
	{
		($Obj = *)
	(or)
		($Obj has ancestor *)
	}
(descr *)
	It's always such a nuisance, the bottom of the dumbwaiter shaft being a good foot above your head. But it comes out right in the middle of the room, and better this than banging your head on it every time, or it getting all fouled up when the cellar floods. It still works well enough to bring things up to the kitchen... (par) ...for you, that is. Watson couldn't possibly reach it. He should still be able to reach the (link) wheel , at least.
(* is below #shaft-g)
(where *) the cellar

%% Then the general rules that govern them

(unlikely $Action) %% Prioritise the dumbwaiter over the shaft in disambiguation
	*($Obj is one of $Action)
	(shaft $Obj)

(container *(shaft $))
(name (shaft $)) dumbwaiter shaft
(dict (shaft $)) dumb waiter
(heads (shaft $)) shaft
~(openable (shaft $))
(opaque (shaft $))
(descr (shaft $Obj)) %% Only runs if the dumbwaiter is NOT in it, see below for why
	(dumbwaiter description)
	(par) Of course, currently the dumbwaiter is on a different floor, so there's only the empty shaft here. You can (link [push the wheel]) {push or pull the wheel} to change that.

(appearance (shaft $Obj))
	The (link) {dumbwaiter shaft} is set into the north wall.

(instead of [examine (shaft $Obj)])
	(#dumbwaiter is #in $Obj)
	($Obj is open)
	(try [examine #dumbwaiter])
(instead of [search (shaft $Obj)])
	(#dumbwaiter is #in $Obj)
	($Obj is open)
	(try [search #dumbwaiter])
(instead of [look $Rel (shaft $Obj)])
	(#dumbwaiter is #in $Obj)
	($Obj is open)
	(try [look $Rel #dumbwaiter])
(instead of [put $Item #in (shaft $Obj)])
	(#dumbwaiter is #in $Obj)
	($Obj is open)
	(try [put $Item #in #dumbwaiter])
(instead of [enter (shaft $Obj)])
	(#dumbwaiter is #in $Obj)
	($Obj is open)
	(try [enter #dumbwaiter])

(perform [put $Item #in (shaft $Obj)])
	(#dumbwaiter is $ $Other)
	Watson drops (the $Item) into the shaft, and (it $Item) fall(s $Item) away into the darkness. A moment later, you hear a
	(if) ($Other is recursively below $Obj) (then)
		($Target = #dumbwaiter)
		(emph {clang})
	(else)
		($Target = #flooded)
		(emph {splash})
	(endif)
	from below.
	(now) ($Item is #in $Target)
	(if) %% Special case that's easier to code here than in upstairs.dg
		($Item = #medchest) ($Item is locked) %% The locked chest
		($Target = #dumbwaiter) %% Hitting metal instead of water
		($Obj = #shaft-a) ($Other is one of [#shaft-g #shaft-c]) %% From at least two floors up
	(then)
		With, perhaps, a hint of cracking glass as well?
		(now) ($Item is unlocked)
		(now) ($Item is open)
	(endif)

(prevent [put #torch #in (shaft $Obj)])
	($Obj is open)
	Best not. With the electricity out, (the #torch) is your only source of light. What if something happened to it?

(prevent [enter (shaft $Obj)])
	($Obj is open)
	Watson looks down into the shaft, then looks up at you with a scared little whine.

#dumbwaiter
(name *) dumbwaiter
(heads *) dumbwaiter waiter
(dict *) dumb waiter
(container *)
(dumbwaiter description) It's a marvelous old thing, connecting all four levels of the house, and you've kept it in good condition. Much safer than carrying things up the attic stairs yourself at your age. %% Factored out so it can be called in two places
(descr *)
	(dumbwaiter description)
	(par) The (link) wheel next to the shaft moves it from one floor to another.
(appearance #dumbwaiter) %% Called by the default (appearance $) rule for the shafts
	(collect $Obj)
		*($Obj is #in #dumbwaiter)
	(into $Contents)
	The (link) dumbwaiter is here, with (a $Contents) in it.

%% It's in the library going down to start, so that the first manipulation sends it to the kitchen
(* is #in #shaft-u)
(dumbwaiter is going down)

%% The positioning of the shafts
($First is above $Second)
	($Second is below $First)
($First is recursively below $Second)
	{
		($First is below $Second)
	(or)
		($Intermediate is below $Second)
		($First is recursively below $Intermediate)
	}

(move the dumbwaiter)
	(if) (#dumbwaiter is #in #shaft-a) (then) %% At the top
		(now) (dumbwaiter is going down)
	(elseif) (#dumbwaiter is #in #shaft-c) (then) %% At the bottom
		(now) ~(dumbwaiter is going down)
	(endif)
	
	(#dumbwaiter is #in $Current)
	(if) (dumbwaiter is going down) (then)
		($New is below $Current)
	(else)
		($New is above $Current)
	(endif)
	
	(current room $Room)
	(if) ($Current is in room $Room) ($Current is open) (then)
		The dumbwaiter
		(if) (dumbwaiter is going down) (then)
			sinks
		(else)
			rises
		(endif)
		out of sight.
	(elseif) ($New is in room $Room) ($New is open) (then)
		(collect $Obj)
			*($Obj is #in #dumbwaiter)
		(into $Contents)
		The (link) dumbwaiter
		(if) (dumbwaiter is going down) (then)
			sinks
		(else)
			rises
		(endif)
		into sight
		(if) ~(empty $Contents) (then)
			, bringing you (a $Contents)
		(endif)
		.
	(else)
		The cables glide along their tracks, sending the dumbwaiter to (where $New).
	(endif)
	
	(now) (#dumbwaiter is #in $New)

#dumbwheel
(name *) wheel
(dict *) big metal
(descr *) This big metal wheel can be pushed or pulled to move the dumbwaiter.
($Room attracts *)
	*($Obj is #in $Room)
	(shaft $Obj)
(manipulable *)

(perform [push/pull *])
	(move the dumbwaiter)

(prevent [push/pull *]) %% Just to avoid problems
	(during finale)
	(recorder in place)
	But that would move the recorder away again!

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Cellar Geography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#c-stairs
(door *)
(name *) cellar stairs
(dict *) stair step steps
(descr *) Less aesthetically pleasing than the stairs up to the first floor, but just as solid.
(plural *)

#landing
(name *) landing
(room *)
(look *)
	The stairs turn around sharply here at a little wooden landing, just a foot or so above the ground. The (link) pump here is supposed to keep your cellar from flooding, but with the electricity out,
	(if) (#flooded is visited) (then)
		you now know it's thoroughly failed at that.
	(else)
		you have to fear the worst.
	(endif)
	The cellar proper is down to the (#northeast), in 
	(if) (#torch is in room #flooded) (#torch is on) (then)
	near-(no space)
	(endif)
	total darkness without the light from the hall windows, or you can go back up to the (#east).
(from * go #east through #c-stairs to #hall)
(from * go #up to #east)
(from * go #northeast to #flooded)
(from * go #down to #northeast)

#pump
(name *) pump
(dict *) sump machinery machine
(descr *) Annoyingly noisy, but that's a small price to pay to keep your cellar dry. Of course, it only works when there's electricity.
(switchable *)
(* is on)
(* is #in #landing)

#flooded
(name *) pantry
(dict *) flooded wet
(look *)
	In the torchlight, your fears are confirmed: Watson is standing in at least three inches of (link) water . Oh, what a mess... (par) The (link) door to the root cellar is now visible to the (#south).
(cellar *)
(from * go #southwest to #landing)
(from * go #up to #southwest)
(from * go #out to #southwest)
(from * go #south through #c-door to #cellar)
(from * go #in to #south)

(prevent [drop #torch]) %% Avoid the problem
	(current room $Current)
	(cellar $Current)
	Best not. It's not waterproof, and with the electricity out, it's your only source of light.

(prevent [throw #torch | $]) %% Same with throwing
	(current room $Current)
	($Current is one of [#landing #flooded])
	Best not. It's not waterproof, and with the electricity out, it's your only source of light. What if it landed in the water?

#c-door
(name *) root cellar door
(door *)
(openable *)
(* is closed)
(descr *) A spring pulls it shut automatically, to ensure the root cellar doesn't get too warm. Alas, it doesn't seem to have stopped the water.

(on every tick) %% The door closes itself automatically, ensuring that you always need to open it before going through - this means you can't open the door, go turn off the light, then come back and go through it in the dark (which would leave you stuck in the maze with no way to recognise the starting room)
	(if) (cellar door is pending) (then)
		(par) The door to the root cellar swings closed again.
		(now) (#c-door is closed)
		(now) ~(cellar door is pending)
	(elseif) (#c-door is open) (then)
		(now) (cellar door is pending) %% You get one turn with it open before it closes itself
	(endif)

(perform [recall #c-door])
	~(#c-door is in scope)
	It should be somewhere in the south wall, but in the darkness you can't quite find it.

(prevent [open #c-door])
	~(#c-door is in scope)
	The root cellar should be that way, but in the darkness you can't seem to locate the door.

(prevent [open #c-door])
	(current room #flooded) %% Only when you're on the "pull" side
	(current player $Player)
	($Item is #heldby $Player)
	Watson whines, and holds up (the $Item). This door needs to be pulled open, and he can't do that with his mouth occupied.

(prevent [leave #flooded #south])
	(#c-door is open) %% Better to fall back to the default rule (implicit open hits the prevent check) in most cases; this is just to cut off any weird exploits
	(when we are holding something)

(perform [bypass *]) %% For debugging
	The root cellar door swings open!
	(now) (* is open)

(reachable in darkness *) %% Can only be found in darkness from the back side
	(current room #cellar)

#cellar
(name *) root cellar
(cellar *)
(from * go #north through #c-door to #flooded)
(from * go #out to #north)
(from * go #in to #south)
(from * go $Dir to #maze)
	*($Dir is one of [#northeast #east #southeast #south #southwest #west #northwest])

#maze
(name *) depths of the root cellar
(cellar *)
(from * go $Dir to #maze)
	*($Dir is one of [#north #northeast #east #southeast #south #southwest #west #northwest])
(from * go #in/#out to #north)

(very unlikely [go to *])
(instead of [go to *]) (try [go to #cellar])

#floodwater
(name *) floodwater
(dict *) three inches of water flood standing cold
(descr *) Cold and wet, you have to imagine, though Watson is putting on a brave face and you yourself can't feel it at all.
(*(cellar $) attracts *)
(reachable in darkness *)
(uncountable *)

(room *(cellar $))
(inherently dark *(cellar $))
(*(cellar $) is in cellar region)

(perform [roll over])
	(current room $Room)
	(cellar $Room)
	Watson flops down in the still water, soaking his fur.
	(soak in still water) %% secrets.dg

(instead of [sleep])
	(current room $Room)
	(cellar $Room)
	(try [roll over])

(instead of [climb/enter #floodwater])
	(try [roll over])

%% A clue

#album
(name *) album
(dict *) photo photograph photographs
(an *)
(item *)
(initial appearance *) That (link) {photo album} Lottie brought has been set in the corner for when she comes back.
(descr *) (link) Lottie left it when she was over for dinner, filled with photos of her trip out to the Orient. Her son is some sort of archaeologist out there, with his wife, and she loved talking about all the intricate details of what they were doing. Fiddly details have always been her favourite thing, and she kept pushing you to keep working on those constabulary records that weren't lining up—she just had a feeling it was a sign of something worse.
(flammable *)
(* is #in #landing)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 3B - Exculpate the Nephew
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - The Recorder
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#recorder
(name *) tape recorder
(dict *) player cassette audio
(descr *)
	They make them so small nowadays, small enough to fit into a coat pocket. It seems the Inspector has Davis taking dictation for him again...at least, he did until the murder investigation took priority. (par)
	Three buttons on the bottom are labelled OFF, REC, and PLAY.
	(if) (#recorder is off) (then)
		OFF
	(elseif) (recorder is in record mode) (then)
		REC
	(else)
		PLAY
	(endif)
	is currently pressed down.
(item *)
(* is off)

(instead of [switch on *])
	There are three buttons on the recorder: OFF, REC, and PLAY.
(instead of [switch *])
	(try [switch on *])
(instead of [switch off *])
	(try [push #button-off])

%% Creating a "button" trait for simplicity
(*(button $) is #partof #recorder)
(manipulable *(button $))

(instead of [switch $Obj])
	(button $Obj)
	(try [push $Obj])
(instead of [switch on $Obj])
	(button $Obj)
	(try [push $Obj])
(prevent [switch off $Obj])
	(button $Obj)
	The only way to un-push (the $Obj) is to push one of the other buttons.

(descr (button $Obj)) It's labelled (printing $Obj).
(default action (button $Obj) [push $Obj]) %% So that OFF turns it off, etc
(before [push (button $)]) %% For convenience in the hyperlink interface - it's not really useful to have the button itself listed, since you're not going to push it twice in a row
	(now) (last named object #recorder)

(prevent [push #button-rec/#button-play]) %% Just to smooth out the ending
	(confession recorded)
	You should have the whole confession on tape now, but you would need to rewind it to check—and (emph {that}) requires hands.

#button-off
(name *) "OFF" button
(dict *) off
(button *)
(printing *) "OFF"
(perform [push *])
	The recorder clicks off.
	(now) (#recorder is off)
(prevent [push *])
	(#recorder is off)
	Watson baps at the button, but the recorder is already off.

#button-rec
(name *) "REC" button
(dict *) rec record
(button *)
(printing *) "REC"
(perform [push *])
	The recorder clicks on, and begins to record.
	(now) (#recorder is on)
	(now) (recorder is in record mode)
(prevent [push *])
	(#recorder is on)
	(recorder is in record mode)
	Watson baps at the button, but the recorder is already recording.

#button-play
(name *) "PLAY" button
(dict *) play
(button *)
(printing *) "PLAY"
(perform [push *])
	The recorder clicks on, and a tinny voice starts to play. Some sort of testimony, from the sound of it.
	(now) (#recorder is on)
	(now) (recorder is in playback mode)
(prevent [push *])
	(#recorder is on)
	(recorder is in playback mode)
	Watson baps at the button, but the recorder is already playing.

@(recorder is in record mode) %% For convenience
	~(recorder is in playback mode)

(on every tick in the presence of #recorder)
	(#recorder is on)
	(recorder is in playback mode)
	(par)
	(select) %% This is a few paragraphs from the start of Agatha Christie's first mystery novel, _The Mysterious Affair at Styles_.
		"...their country-place, Styles Court, had been purchased by Mr Cavendish early in their married life..."
	(or)
		"...he had been completely under his wife's ascendancy, so much so that, on dying, he left the place to her for her lifetime..."
	(or)
		"...as well as the larger part of his income; an arrangement that was distinctly unfair to his two sons..."
	(or)
		"...their step-mother, however, had always been most generous to them..."
	(or)
		"...indeed, they were so young at the time of their father's remarriage that they always thought of her as their own mother..."
	(or)
		"...Lawrence, the younger, had been a delicate youth. He had qualified as a doctor..."
	(or)
		"...but early relinquished the profession of medicine, and lived at home while pursuing literary ambitions..."
	(or)
		"...though his verses never had any marked success..."
	(or)
		"...John practised for some time as a barrister, but had finally settled down to the more congenial life of a country squire..."
	(or)
		"...he had married two years ago, and had taken his wife to live at Styles..."
	(or)
		"...though I entertained a shrewd suspicion that he would have preferred his mother to increase his allowance..."
	(or)
		"...which would have enabled him to have a home of his own..."
	(or)
		"...Mrs Cavendish, however, was a lady who liked to make her own plans, and expected other people to fall in with them..."
	(or)
		"...and in this case she certainly had the whip hand, namely: the purse strings..."
	(or)
		The recorder makes a sharp sound as the tape catches and skips.
	(cycling)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - The Maze
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(global variable (maze inward direction $)) %% Which direction you can go to find the carrots
(global variable (maze outward direction $)) %% Which direction you can go to escape

(instead of [leave $Source $Dir])
	(from $Source go $Dir to #maze) %% If you left through a maze exit
	(moving $Dir in the maze)

(moving $Dir in the maze) %% This is where the maze logic is handled
	(current room $Current)
	(if) (maze inward direction $Dir) (then) %% You've gone in the right direction to find the carrots!
		Watson splashes away to the (name $Dir), and you try your best to follow...until his paw hits something with a soft (emph {thump}). He must have found the carrots! (par)
		(move player to #in #maze)
		(now) (#carrots is #in #maze)
		(try [look])
	(elseif) (maze outward direction $Dir) (or) { ~(held #carrots) ($Current = #maze) } (then) %% You've gone in the right direction to escape with the carrots, OR you don't have the carrots and are moving blindly
		Watson splashes away to the (name $Dir), and you try your best to follow...until suddenly a hint of light is visible in the darkness. (par)
		(move player to #in #cellar)
		(if) (#carrots is #in #maze) (then) %% If you left them behind
			(now) (#carrots is pristine)
			(now) (#carrots is nowhere)
		(endif)
		(try [look])
	(else) %% You're moving blindly; just randomise the maze again
		(if) (held #carrots) (then) %% Hint why this doesn't work
			Watson drags the bundle aimlessly through the darkness. But it's heavy, and the going is slow; he would need to (link) {drop the bundle} or have a definite heading to get anywhere.
		(else)
			Watson splashes away blindly to the (name $Dir), and you try your best to follow. Without landmarks, it's hard to know if this is even really (name $Dir)...
		(endif)
		(par)
		(move player to #in #maze)
		(if) (#carrots is #in #maze) (then) %% If you left them behind
			(now) (#carrots is pristine)
			(now) (#carrots is nowhere)
		(endif)
		(try [look])
	(endif)
	(now) ~(maze inward direction $) %% Reset these to randomise again
	(now) ~(maze outward direction $)

(perform [smell]) %% Smelling gets you the inward direction
	(current room $Current)
	($Current is one of [#cellar #maze])
	(if) (#carrots is #in $Current) (then)
		You hear the sound of cloth rustling as Watson noses at the bundle of carrots.
	(elseif) (maze inward direction $Inward) (then)
		You hear Watson splashing around to the ($Inward).
	(elseif) (#carrots is pristine) (then) %% Randomise the inward direction!
		(collect $Dir)
			*(direction $Dir)
			~($Dir is one of [#up #down #in #out])
			~(maze outward direction $Dir)
			~{ ($Current = #cellar) ($Dir = #north) } %% That's not a maze exit
		(into $List)
		(randomly select $Chosen from $List)
		(now) (maze inward direction $Chosen)
		Watson splashes through the water as he snuffles around, before stopping a few feet off to the ($Chosen).
	(else)
		Watson splashes through the water as he snuffles around, but doesn't seem to find anything of interest.
	(endif)

(perform [listen to (current room $Current)]) %% Listening gets you the outward direction
	($Current is one of [#cellar #maze])
	(#recorder is in room #flooded)
	(#recorder is on)
	(recorder is in playback mode) %% But only if the recorder is playing
	
	(if) ($Current = #cellar) (then)
		In the silence of the root cellar, you can make out a faint noise to the (#north), and it seems Watson can too.
	(elseif) (maze outward direction $Outward) (then)
		You hear Watson splashing around to the ($Outward).
	(else) %% Randomise the outward direction!
		(collect $Dir)
			*(direction $Dir)
			~($Dir is one of [#up #down #in #out])
			~(maze inward direction $Dir)
		(into $List)
		(randomly select $Chosen from $List)
		(now) (maze outward direction $Chosen)
		Watson is silent for a moment, listening intently, before you hear him move to the ($Chosen). There seems to be some source of noise that way!
	(endif)

(perform [listen to (current room $Current)]) %% And a hint if the recorder isn't there
	($Current is one of [#cellar #maze])
	The air is still, and perfectly silent. You could hear a pin drop in the darkness.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - The Carrots
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#carrots
(name *) bundle of carrots
(dict *) carrot one peck
(dict *)
	(* is pristine)
	something some thing
(edible *)
(item *)
(descr *) A one-peck bundle of carrots, fresh from the farmer's market. Lottie picked them up as part of a good deal on onions, but she can't stand the smell, so she brought them over for you and Watson to enjoy. They should be good, even if they're mildly soggy now.
(evidence *)
(initial appearance *) From the sound of Watson's snuffling, there's (link [bundle]) something at your feet.
(reachable in darkness *) %% Always

(after [take *]) %% Ensure score doesn't go down again if you leave them behind, which resets the ($ is handled) flag
	(now) (carrots have been taken)

(prevent [eat *]) %% Normally you can't eat something when you're holding something *else*, but since this is a whole bundle, we have to drop it first
	(when we are holding something)
(perform [eat *])
	Watson extracts a carrot from the bundle and devours it, with plenty of happy crunching.

%% Also we need to prevent throwing it, since that causes problems for the puzzle!
(prevent [throw * $])
	Watson heaves the bundle with all his might, but it makes it barely a few inches. He picks it up again, chagrined.

(perform [bypass *])
	The bundle of carrots appears at your feet!
	(current room $Room)
	(now) (#carrots is #in $Room)

(perform [give * to #davis])
	Davis looks down at Watson, and winces at the sight of water being dripped all over your rug. \( Well, it can't be helped. \) It takes her a moment more to realise what exactly it's dripping from. (par)
	"The carrots!" Watson lets go obligingly as she heaves the bundle up onto the table, trying to keep it from soaking her paperwork. "Don't know how you knew we needed these, but I'll get them to the lab right away. Thanks, boy." (par)
	Watson sits back with a proud smile as Davis makes the arrangements, though he seems a bit sad not to be given a carrot himself for his efforts. The lab tests will take a while, but you're confident they'll come back clean. Lottie is innocent.
	(now) (* is nowhere)
	(now) (#davis is #in #frontroom) %% Delivering the evidence again
	(now) (constable target #diningroom)
	(now) (constable message suppressed)
	(now) (friend exculpated)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 4A - Access the Upstairs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Geography and Items
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#t-stairs
(name *) top of the stairs
(look *) The afternoon light coming through the big (link) windows makes the first floor look so cheerful and pleasant, and not at all like the place someone fell to her death just last night. It's better that way; you've never wanted this house to look dreary by any stretch of the imagination. Identical doors lead (#north) and (#south) to your library and master suite, respectively; the hallway continues to the (#northwest), and the (link) stairs lead back down to the (#west).
(room *)

(from * go #west through #stairs to #b-stairs)
(from * go #down to #west)
(from * go #northwest to #upperhall)
(from * go #north through #libdoor to #library)
(from * go #south through #suitedoor to #suite)

#suitedoor
(name *) suite door
(dict *) to %% DOOR TO THE SUITE link
(door *)
(descr *)
	It's currently
	(if) (* is locked) (then)
		closed and locked while Phillips searches the room.
	(elseif) (* is closed) (then)
		closed, but not locked.
	(else)
		wide open.
	(endif)
(openable *)
(* is closed)
(* is locked)

(appearance *)
	(* is locked)
	From the sound of it, (link) Phillips is hard at work in the suite to the (#south).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - The Smoke Alarm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#alarm
(name *) smoke detector
(dict *) fire alarm
(descr *)
	They're all the rage now, Emily keeps insisting, and soon everyone will have them; given your reputation, she says, arson is far from impossible, and you really should be prepared for it. Thankfully, it's never been needed yet. (par)
	It's a small device, a bit smaller than an ashtray, of an utterly hideous design. After you replaced the cells you left it on top of the cabinets where you wouldn't have to look at it.
(item *)
(* is hidden)
(* is #in #diningroom)

(out of reach *) %% Need to be on a supporter to get it initially
	(* is pristine)
	(current player $Player)
	~($Player is #on $)

(manipulable *) %% Suggest PUSH as well
	(* is pristine)
(perform [push *])
	(* is pristine)
	Balancing on his hind legs and stretching to his full length, Watson manages to knock the smoke detector down from its perch.
	(now) (* is handled)

(narrate taking *)
	(* is pristine)
	Balancing on his hind legs and stretching to his full length, Watson manages to knock the smoke detector down from its perch and scoop it into his mouth.

(initial appearance *) %% Appears only after it's revealed
	(if) (#diningroom is smoky) (then)
		A (link) {smoke detector} blares shrilly from atop the cabinets. Watson winces with each new shriek.
	(else)
		The (link) {smoke detector}, abandoned on top of the cabinets, is mercifully silent now.
	(endif)

(on every tick) %% Comes before constable movement due to file ordering
	(par)
	(#alarm is in room $Room)
	(if) ($Room is smoky) (then)
		(reveal #alarm) %% It's no longer hidden
		(if) ~(current room $Room) (then)
			In (the $Room), the
		(else)
			The
		(endif)
		(link) {smoke alarm}
		(if) (alarm sounded last turn) (then)
			continues
		(else)
			begins
		(endif)
		to shriek.
		(now) (alarm sounded last turn)
		(if) ($Room is one of [#t-stairs #upperhall #balcony]) (#suitedoor is locked) (then)
			(par)
			The sound of an emergency alarm is finally enough to pull (link) {Constable Phillips} away from his work. He throws open the (link) {door to the suite} and launches himself down the stairs.
			(now) (#suitedoor is unlocked)
			(now) (#suitedoor is open)
			(now) (evacuation in progress)
		(elseif) (current room #t-stairs) (#suitedoor is locked) (then)
			(par)
			Unfortunately, the sound is fainter on this floor, and Phillips doesn't seem to hear it. He continues his work as though nothing is wrong. %% A little hint if you're on the right track
		(endif)
	(else)
		(if) (alarm sounded last turn) (then)
			The alarm falls silent, and Watson can finally relax again.
		(endif)
		(now) ~(alarm sounded last turn)
	(endif)

(on every tick) %% After that last rule for simplicity
	(evacuation in progress)
	(select) %% He moves two rooms at a time
		(now) (#phillips is #in #b-stairs)
	(or)
		(now) (#phillips is #in #kitchen)
		Phillips hurries through the dining room to the kitchen.
	(or)
		(now) (#phillips is #in #porch)
		Phillips sprints out to the veranda, finally pausing to see if the alarm continues.
		(if) (#frontdoor is locked) (then) %% Don't allow this to solve the garden access puzzle
			When it doesn't, he makes sure to re-lock the door.
		(endif)
	(or)
		(now) (#phillips is nowhere)
		(now) ~(evacuation in progress)
		Phillips heads off to investigate this false alarm.
	(stopping)

(perform [bypass #suitedoor])
	Phillips throws open the suite door and launches himself down the stairs!
	(now) (#suitedoor is unlocked)
	(now) (#suitedoor is open)
	(now) (evacuation in progress)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Smoke
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(global variable (smoke spread 0))

($Room is smoky)
	(shortest path from #kitchen to $Room is $Path)
	(length of $Path into $Distance)
	(smoke spread $Spread)
	($Spread > $Distance) %% So 0 spread means no rooms are smoky

(understand command [smoketest]) %% Show which rooms are smoky
(perform [smoketest])
	(smoke spread $Spread)
	Distance: $Spread (line)
	Smoke:
	(exhaust) {
		*(room $Room)
		($Room is smoky)
		(the $Room)
	}

(perform [smell])
	(current room $Room)
	($Room is smoky)
	Watson sniffs at the air, and lets out a warning bark. Smoke. That's not good!

(early on every tick) %% Update the smoke variables
	(smoke spread $Previous)
	(if) (something is burning) (then)
		($Previous < 10) %% Just in case, don't let it get out of control (and take forever to fade)
		($Previous plus 1 into $New)
	(else)
		{ ($Previous minus 2 into $New) (or) ($Previous minus 1 into $New) } %% If it's zero, this will fail
	(endif)
	(now) (smoke spread $New)

(early on every tick) %% Report if it's reached the player
	(current room $Room)
	($Room is smoky)
	~(smoke started this turn)
	(par)
	A haze of smoke clouds the air.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - Fire
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

($Obj is burning)
	(#stove is on)
	*($Obj is nested #on #stove)
	(flammable $Obj)
(something is burning)
	($ is burning)

#stove
(name *) stove
(dict *) range stovetop top burner burners knob
(descr *)
	Not very big, perhaps, but it's very easy to work with—and very easy on your old hands. All you have to do is (link) {push the knob} and it lights.
	(if) (* is on) (then)
		The burners are currently on.
	(else)
		It's currently off.
	(endif)
(switchable *)
(supporter *)
(* is #in #kitchen)
(appearance *)
	The (link) stove is tucked away to one side
	(if) ($Fuel is burning) (then)
		, filling the room with smoke from the burning ($Fuel).
	(elseif) (* is on) (then)
		, deceptively hot.
	(elseif) ($ is #on *) (then)
		. (list objects #on *)
	(else)
		.
	(endif)

(instead of [push *])
	(try [switch *])

(prevent [climb *])
	(* is on)
	Watson takes a nervous step back at the very idea.

(narrate switching on *)
	The lighter makes a clicking sound as Watson paws at the dials, until finally he catches it just right, and the flame takes hold.
	(if) *($Obj is nested #on *) (flammable $Obj) (then)
		It's not long before (the $Obj) on top start(s $Obj) to fill the room with smoke. Really, you suppose, that's the best you can expect from a dog's cooking.
	(elseif) ($Obj is #on *) (then)
		Thankfully, (the $Obj) on top (doesn't $Obj) seem to be flammable.
	(endif)
	(now) (smoke started this turn)

(narrate switching off *)
	Watson paws at the dial again, and
	(if) ($Obj is burning) (then)
		(the $Obj) stop(s $Obj) smoking.
	(else)
		the flame vanishes.
	(endif)

(narrate putting $Obj #on *)
	(* is on)
	Watson sets (the $Obj) on the burner, careful not to singe his nose
	(if) (flammable $Obj) (then)
		, and (it $Obj) begin(s $Obj) to fill the room with smoke. Really, you suppose, that's the best you can expect from a dog's cooking.
	(else)
		, but (it $Obj) (doesn't $Obj) seem affected by the heat.
	(endif)
	(now) (smoke started this turn)

(on every tick in the presence of *)
	(* is on)
	~(smoke started this turn)
	(if) ($Obj is burning) (then)
		(The $Obj) on the stove continue(s $Obj) to smoke.
	(else)
		The burners on the stove continue to burn, heating nothing.
	(endif)

(late on every tick)
	(now) ~(smoke started this turn)

%% For how Davis reacts to this, see actions.dg

%% And let's add some options for fuel, just for fun

#junkmail
(name *) mail
(dict *) letter letters bill bills junk today today's
(uncountable *)
(item *)
%% (descr *) Nothing of importance, from the look of things. %% secrets.dg
(initial appearance *) Today's (link) mail is scattered across the floor.
(* is #in #frontroom)
(flammable *)

#newspaper-old %% To contrast with #newspaper-new on the porch
(name *) old newspaper
(dict *) news paper
(heads *) newspaper
(item *)
(descr *) Old coverage of the Macaulay case, it looks like, back when every newspaper was trying to come up with their own epithet for the killer. This one seems to have mixed it up with the Gwydion case and called him the Druidic Killer. You have the writeup in your dining room cabinet now.
(read to examine *)
(flammable *)

(perform [take/pull #newspapers])
	(if) (#newspaper-old is pristine) (then)
		Watson manages to work a single paper free of the bundle.
		(current player $Player)
		(now) (#newspaper-old is #heldby $Player)
		(now) (#newspaper-old is handled)
		(notice player's #newspaper-old) %% Ensure IT gets set appropriately, as well as the most recent object
	(else)
		Watson tugs at the bundle, but can't get another paper free.
	(endif)

%% #towel
%% (name *) towel
%% (dict *) old
%% (item *)
%% (descr *) You keep it by the pump to deal with any water that spills.
%% (flammable *)
%% (initial appearance *) An old (link) towel is wrapped around the base of the pump.

%% (test @upstairs with inputs [[teleport kitchen] [w] [get smoke alarm] [look] [bite tape] [e] [se] [get mail] [nw] [put mail on stove] [turn on stove] [w] [z] [z] [get on table] [get alarm] [down] [s] [up] [drop alarm] [down] [n] [e] [turn on stove] [w] [s] [up]])

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 4B - Exculpate the Companion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Geography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#suite
(name *) master suite
(room *)
(look *) Such a grand name for what amounts to five feet of hallway-slash-closet, connecting your bedroom to the (#west) to your bathroom to the (#northeast). The door to the (#north) leads out to the rest of the house.
(* is in suite region)

(from * go #north through #suitedoor to #t-stairs)
(from * go #out to #north)
(from * go #west to #bedroom)
(from * go #northeast to #bathroom)

#clothes
(name *) racks of clothes
(dict *) rack clothing
(heads *) clothing clothes
(plural *)
(descr *) What could the constables have been searching for in here? You keep your medicines locked in the bathroom, and the keys on the nightstand in your bedroom.
(appearance *) Your (link) {racks of clothes} stand in disarray, methodically ransacked by the constables.
(perform [search *]) Watson noses through the racks, but finds nothing except more clothes.
(* is #in #suite)

#bedroom
(name *) bedroom
(your *)
(room *)
(look *) As your age advances, the little luxuries of your bedroom have suffered for it. Even with Emily's help, you've had to recognise the difficulties in day-to-day life, and the room is now designed around being cared for rather than comfortable. The suite opens out to the (#east), and a (link) door to the (#north) leads out to the rest of the house.
(* is in suite region)

(from * go #north through #beddoor to #balcony) %% Never actually opens
(from * go #east to #suite)
(from * go #out to #east)

#bed
(name *) bed
(dict *) mattress
(your *)
(descr *) Not quite as soft as you would like it, sadly; at your age, getting into and out of it easily has become more of a priority. Now the mattress is too firm and there's an unattractively large gap underneath.
(actor supporter *)
(appearance *)
	Your (link) bed stands in equal disarray. You'd given no thought to tidying it up.
	(list objects #on *)
(* accepts #under)
(* is #in #bedroom)

#nightstand
(name *) nightstand
(dict *) night stand side table
(supporter *)
(appearance *)
	(if) ~($ is #on *) (then)
		The (link) nightstand is placed next to the head of the bed, entirely devoid of keys.
	(else)
		(list objects #on *) %% The nightstand itself isn't that important, "on the nightstand is..." is enough
	(endif)
(descr *) Functional. That's about all there is to say.
(* is #in #bedroom)

#bathroom
(name *) bathroom
(heads *) bathroom %% Removed BATH synonym because FIND BATH shouldn't disambiguate uselessly
(room *)
(look *) Watson is far more excited about this room than you are—it's normally off-limits to him, and the (link) sink , (link) bath , and (link) toilet are all mysterious and new. The only exit leads back (#southwest).
(* is in suite region)

(from * go #southwest to #suite)
(from * go #out to #southwest)

%% And just for fun; none of this is at all useful

#bath
(name *) bath
(dict *) tub bathtub basin faucet drain water
(heads *) bath tub
(actor container *)
(switchable *)
(potable *)
	(* is on)
(* is #in #bathroom)

(on every tick in the presence of *)
	(* is on)
	(current player $Player)
	Water pours from the bathtub faucet,
	(if) ($Player is #in *) (then)
		thoroughly soaking Watson's fur.
		(soak in running water)
	(else)
		straight down the drain.
	(endif)

#sink
(name *) sink
(dict *) faucet drain water
(switchable *)
(potable *)
	(* is on)
(* is #in #bathroom)

(on every tick in the presence of *)
	(* is on)
	Water rushes through the sink.

#toilet
(name *) toilet
(dict *) handle water
(* is #in #bathroom)
(container *)
(potable *)

(perform [push/pull/flush *]) %% Someone threw the keys down the toilet.
	Watson noses at the handle, and the toilet does its best to flush. But something seems to be clogging it. These old pipes jam up so easily.
(prevent [put $ #in *])
	That seems very unlikely to help this situation. In fact, it would probably make it worse.

(descr #bath/#sink/#toilet)
	Simple and functional, and unlikely to be much help with this case.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - The Cabinet
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The mirror itself

#mirror
(name *)
	(if) (* is open) (then) shattered (else) standing (endif) mirror
(dict *) medicine medicines cabinet vanity looking glass tall
(dict *)
	(* is open)
	broken
(descr *)
	More a functional piece of furniture than a beautiful one, it works as both a full-length mirror and a place to keep your medicines and toiletries.
	(if) (* is open) (then)
		Or at least, it used to.
	(else)
		You don't normally lock it, though; what would be the point, in your own bathroom? (par)
		(if) (#truncheon is #behind *) (then)
			Your (link) truncheon is wedged into the gap behind it.
		(elseif) (#earring is #behind *) (then)
			You only wish it could be set into the wall, instead of free-standing. The baseboards keep it from standing quite flush, leaving an inch or so of space behind it, and you can see a (link) glint of something caught back there.
		(else)
			The baseboards keep it from sitting quite flush against the wall, leaving an inch or so of space behind it.
		(endif)
	(endif)
(container *)
(openable *) %% It stops being "openable" once it's broken open, but this means the right actions will be suggested for it
	(* is locked)
(manipulable *)
(* is #in #bathroom)

(* is locked)
(* is closed)

(* accepts #behind) %% PUT TRUNCHEON BEHIND CABINET
	(* is locked)
(prevent [put $Obj #behind *]) %% But you can't put large objects back there - TODO is this warranted?
	(* is locked)
	~($Obj is one of [#earring #truncheon])
	There's only an inch or so of space behind the cabinet, and Watson can't quite get (the $Obj) to fit.

(narrate putting #truncheon #behind *)
	Watson manages to work the handle end into the little gap behind the cabinet, leaving it sticking out at an odd angle.

(appearance *)
	(if) (* is locked) (then)
		You keep your medicines in a mirrored (link) cabinet to one side.
		(if) (#truncheon is #behind *) (then)
			Your (link) truncheon is wedged into the gap behind it.
		(endif)
	(else)
		The mirrored (link) cabinet lies on the floor, shattered.
	(endif)

%% Actions

(prevent [attack/bite *]) %% Avoid misleading refusal message - this *is* for smashing
	(if) (* is locked) (then)
		Watson gives the mirror a mighty (emph {whap}), but it doesn't crack.
	(else)
		That seems a bit excessive at this point, doesn't it?
	(endif)

(prevent [open *])
	(* is locked)
	Watson gives it a tug, but it doesn't open. That's odd; why would it be locked?

(prevent [push/pull *])
	(* is open)
	That seems a bit gratuitous at this point, doesn't it?

(prevent [push/pull *])
	~(#truncheon is #behind *)
	Watson pushes it hard, and it wobbles a bit, but he doesn't quite have enough leverage to make it fall.

(perform [push/pull *])
	Watson gives the truncheon a vigorous tug, and for a moment, it seems like nothing will happen. But he tugs again, and the cabinet wavers—and slowly begins to topple forward! He darts out of the way as the whole cabinet comes crashing down, the mirror shattering into hundreds of pieces on the tiles.
	(exhaust) { %% Things can no longer be hidden behind it
		*($Obj is #behind *)
		(now) ($Obj is #in #bathroom)
		(now) ($Obj is handled)
		(reveal $Obj)
	}
	(now) (* is unlocked)
	(now) (* is open)
	(par)
	Your (link) {medicine box} now lies amid the wreckage.

%% A little hint
%% The earring itself serves no purpose except to hint that you can put things behind the mirror

#earring
(name *) earring
(dict *) ear ring glint red herring herrings earrings fish carnelian
(an *)
(descr *)
	(if) ~(earring revealed) (then)
		It looks like one of your (link [earring]) earrings (no space)—you'd been wondering where that went!
		(now) (earring revealed)
	(else)
		It's a cute little thing, a tiny fish carved out of carnelian. You misplaced it ages ago, and spent far too long searching for it. But of course, that's how it tends to go with red herrings.
	(endif)
(item *)
(* is hidden)
(* is #behind #mirror)

%% A player tried this and I couldn't resist
(perform [give * to #davis])
	Watson pushes the earring into the constable's hand, and she looks down in surprise. "What's this about?" (par)
	She examines it carefully for a moment, then sets it aside. Good for her; at least she knows not to spend too much time on red herrings.
	(now) (* is #on #table)

%% The truncheon

#truncheon
(name *) truncheon
(dict *) billy club stick bat baton weapon
(descr *) You got this from the constables, at (link [Emily]) Emily's insistence; she maintains that someone you exposed will eventually want revenge, and having a weapon on hand will make them think twice about coming into your house. She means well, but she's never quite understood how these things actually happen—you have no idea how to use something like this effectively, and a person bent on murder won't be dissuaded by it.
(item *)
(* is hidden)
(* is #under #bed)

(manipulable *) %% Suggest PUSH when it's wedged in place
	(* is #behind #mirror)

(perform [push/pull *])
	(* is #behind #mirror)
	(try [push #mirror])

(prevent [take *])
	(* is #behind #mirror)
	Watson tries to tug the truncheon free, but it's well and truly stuck now.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - The Locked Box
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#medchest
(name *)
	(if) (* is unlocked) (then)
		broken
	(endif)
	medicine chest
(dict *) box glass frosted frosted-glass
(item *)
(container *)
(openable *)
(* is closed)
(* is locked)
(descr *)
	You keep your various medicines locked in a little frosted-glass box, just in case anyone tries to tamper with them—you've seen the effects of that sort of thing far too often in your work.
	(if) (* is locked) (then)
		The key (emph {should}) be on your nightstand, just like the key to the cabinet.
	(else)
		After that fall, it's not securing anything any more.
	(endif)
(* is #in #mirror)

(appearance * #in #mirror) Your (link) {medicine chest} is buried in the shards.

(prevent [close *])
	(* is open)
	Watson does his best to close it, but after that fall it took, the pieces won't fit together right.

(send * down the stairs) %% If you throw it down the stairs, and the mattress isn't there, it breaks
	The box tumbles downward,
	(if) (#mattress is #in #b-stairs) (then)
		landing with a soft (emph {flump}) on the mattress.
		(now) (* is #on #mattress)
	(else)
		hitting the floor with an awful, crystalline (emph {crack}).
		(now) (* is #in #b-stairs)
		(now) (* is unlocked)
		(now) (* is open)
	(endif)

(after [throw * $]) %% Alternate solution: chuck it off the clock
	(current player $Player)
	($Player is #on #clock)
	It hits the ground with an awful, crystalline (emph {crack}).
	(now) (* is unlocked)
	(now) (* is open)

(after [throw * $])
	(* is closed) %% So it didn't actually break this time
	(par)
	Unfortunately, it seems whole and intact despite the impact. It will take more of a fall than that to crack it open.

%% You can also throw it down the dumbwaiter shaft, but since it's the only object with special code for that, it's handled as a special case in cellar.dg instead of calling out to a predicate like the stairs

(prevent [attack/eat *])
	Watson is certainly strong enough to shatter the glass between his jaws, but the thought of all those splinters in his mouth—oh, you can't bear to contemplate it.

(perform [give * to #davis])
	Davis looks blankly at the box, not understanding its significance. It seems you'll have to spell it out for her, and show her the actual medications inside.

#pillbox
(name *) pill box
(dict *) pillbox medicine pills
(heads *) box
(descr *) (link) Emily fills it with a week's worth of pills at a time, portioned out by day, so you can never forget whether you've taken them or not. You've never really been the forgetful sort, but you appreciate the gesture all the same—and now, it can demonstrate that she never tampered with them.
(edible *) %% Not really
(item *)
(evidence *)
(* is #in #medchest)

(appearance * #in #medchest) Your pill box is hidden inside.

(prevent [open/eat/bite/lick *]) Best not. You don't know what these pills might do if Watson got one in his mouth.

(perform [bypass *])
	(current player $Player)
	The pill box appears in Watson's mouth!
	(now) (* is #heldby $Player)

(perform [give * to #davis])
	Watson has to nudge Davis's hand a few times with the pill box before she hears it rattling. "What's this? Is this—are these the pills Phillips was turning the bedroom upside down for?" She actually laughs as he drops it in her hand. "How did you find these before he did? Such a good dog!"
	She opens the box and counts out the remaining pills. "I'll get these down to the lab, and they'll know if anyone tampered with them." They didn't, of course; Emily is the only one to have the opportunity, and she's too diligent to make that mistake. But this will confirm it, and rule her out once and for all.
	(now) (* is nowhere)
	(now) (#davis is #in #frontroom) %% Delivering the evidence again
	(now) (constable target #diningroom)
	(now) (constable message suppressed)
	(now) (companion exculpated)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 5A - Access the Attic
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Geography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#upperhall
(name *) upstairs hall
(look *) The hall runs alongside the staircase here before bending sharply at the end, with a little balcony to the (#south) overlooking the first floor. The top of the stairs is back to the (#southeast), and the guest room (emph {will}) be to the (#north) (no space)—once it's been properly repainted and made livable, at least.
(room *)

(from * go #southeast to #t-stairs)
%% (from * go #south to #balcony)
(prevent [leave * #north])
	The guest room is closed off until the repainting is finished. Who knows when that will be, now...

#balcony
(name *) upstairs balcony %% Helps with disambiguation
(room header *) Balcony
(heads *) balcony
(look *) The hallway ends with a narrow (link) balcony, connecting your bedroom to the (#south) with everything else to the (#north). The railing to the (#east) protects you from a dizzying drop to the bottom of the stairs. (link) Evidence from another of your past cases is displayed proudly on the wall.
(room *)
(constable avoids *) %% Don't let Davis get trapped up here

%% (from * go #north to #upperhall) %% See door code
(from * go #south through #beddoor to #bedroom)
(from * go #east to #railing)

#case-tempete
(name *) report on the (emph {Tempete}) case
(dict *) evidence customs papers
(plural dict *) reports
(descr *)
	The (emph {Tempete}) case was an odd one: a murder committed at sea, with only a half-dozen people aboard the vessel. Murder, extortion, smuggling, and worse...all spiralling from small, very human desires for money and safety. You have the customs papers here as a sort of memento. A reminder that murder is usually an ugly, desperate act, when someone's greed or fear becomes more important than someone else's life, rather than any grand plot or intricate scheme. (par)
	Apart from this one, you have other mementos on display in (link if visited #diningroom) and (link if visited #frontroom). You like to think of it as justifiably displaying your credentials rather than boasting.
(read to examine *)
(* is #in #balcony)

#railing %% This mainly exists to provide a EAST link for throwing things
(name *) railing
(dict *) balcony banister wooden wood
(heads *) railing
(descr *) A wooden railing on the (#east) edge keeps people from falling to their deaths. It is certainly an imposing drop...and, you must admit, not a very tall railing.
(* is #in #balcony)
(instead of [search *]) (try [examine *])

#beddoor %% A red herring, but it makes the geography make more sense.
(name *) bedroom door
(descr *) It's locked tight; you'll have to find another way.
(door *)
(openable *) %% Not really
(* is closed)
(* is locked)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - The Trapdoor
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#atticdoor
(name *) attic stairs
(dict *) staircase stair case step trap door trapdoor collapsible cord string dangling
(ambiguously plural *) %% Set both IT and THEM pronouns
(plural *) %% But use plural in descriptions
(door *)
(openable *)
(#balcony/#upperhall/#attic-w attracts *)
(appearance * #in #attic-w)
	(if) (* is closed) (then)
		The trapdoor is closed, the stairs drawn up and folded into the floor.
	(else)
		The collapsible stairs lead down through the trapdoor to the rest of the house.
	(endif)
(appearance * #in #upperhall)
	(if) (* is closed) (then)
		A dangling cord marks the location of the (link) trapdoor to the attic.
	(else)
		The (link) trapdoor to the attic is open, the collapsible steps leading up to the (#south).
	(endif)
(appearance * #in #balcony)
	(if) (* is closed) (then)
		A dangling cord marks the location of the (link) trapdoor to the attic.
	(else)
		The (link) trapdoor to the attic is open, blocking off the passage to the (#north). Unfortunately, the stairs are on the other side.
	(endif)

(reachable in darkness *) %% Make sure you can't get trapped in the attic - you can always open it from above, even in darkness

(from #upperhall go #up through * to #attic-w)
(from #upperhall go #south to #balcony)
	(* is closed)
%% (from #upperhall go #south to #up) %% Removed for being too confusing since you can't go north to get back
%%	(* is open)
(prevent [leave #upperhall #south])
	(* is open)
	The stairs to the attic block off that hallway completely.

(from #attic-w go #down through * to #upperhall)

(from #balcony go #north to #upperhall) %% Don't use this path in route-finding when it's blocked
	(* is closed)
(prevent [leave #balcony #north])
	(* is open)
	The stairs to the attic block off that hallway completely.

(prevent [leave #balcony #up])
	(* is closed)
	The trapdoor is closed at the moment.
(prevent [leave #balcony #up])
	(* is open)
	Unfortunately, the actual steps are on the other side; from here, it's just a big, slanted piece of wood coming down from the ceiling.
(instead of [enter *])
	(current room #balcony)
	(try [go #up])

(narrate opening *)
	(if) (current room #attic-w) (then)
		Little by little, Watson shifts his weight onto the trapdoor, until with a steady groan it swings downward and deposits him in the hall below.
		(move player to #in #upperhall)
	(elseif) (current room #upperhall) (then)
		Watson leaps upward and catches the cord in his teeth, trying to hold onto it with all his strength. For a moment it doesn't seem like his weight will be enough...but with a steady groan the trapdoor opens and the stairs swing downward. His momentum carries him off to the south, depositing him with a gentle (emph {thump}) on the balcony.
		(move player to #in #balcony)
	(else)
		Watson leaps upward and catches the cord in his teeth, trying to hold onto it with all his strength. For a moment it doesn't seem like his weight will be enough...but with a steady groan the trapdoor opens and the stairs swing downward, carrying Watson with them and depositing him with a gentle (emph {thump}) on the balcony.
	(endif)

(after [open *]) %% Because this ensures it's actually open for the room description
	(par)
	(try [look])

(narrate closing *)
	(if) (current room #attic-w) (then)
		Watson gets his paws and teeth around one of the upper steps, and tugs with all his might. It only moves a little, but that's enough for the mechanism to take over, and it snaps up into the floor.
	(else)
		Watson shoves his face and paws under the bottom step, rolling over onto his back and pushing with all his might. It only moves a little, but that's enough for the mechanism to take over, and it snaps up into the ceiling.
	(endif)

(instead of [push/pull/take/bite *])
	(if) (* is open) (then)
		(try [close *])
	(else)
		(try [open *])
	(endif)

(descr *)
	(if) (* is closed) (then)
		(if) (current room #attic-w) (then)
			They're folded up neatly into the floor, but a good (link [push stairs]) push should open them again.
		(else)
			The cord hangs down just above Watson's head, easily within reach.
		(endif)
	(else)
		(if) (current room #balcony) (then)
			You can only see the back side of them from here, completely blocking off the hallway to the north.
		(else)
			The stairs stand open, flat enough for Watson to (link [climb stairs]) climb.
		(endif)
	(endif)

(perform [bypass *])
	The attic stairs spring open!
	(now) (* is open)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Breaking Parity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% We need a way to get things to the bottom of the stairs

(instead of [throw $Obj #down])
	(held $Obj)
	(current room $Room)
	($Room is one of [#t-stairs #upperhall #balcony])
	Bracing his paws on the banister, Watson flings (the $Obj) over the edge!
	(send $Obj down the stairs) %% The default implementation is in actions.dg so that special cases can come before it, anywhere in the source

(instead of [push $Obj #down])
	(pushable $Obj)
	(current room $Room)
	($Room is one of [#t-stairs #upperhall #balcony])
	With a mighty heave, Watson shoves (the $Obj) over the edge!
	(send $Obj down the stairs)

(instead of [$Verb $Obj #east]) %% For convenience, on the balcony, take east as down
	($Verb is one of [throw push])
	(current room #balcony)
	(try [$Verb $Obj #down])

(instead of [$Verb $Obj #west]) %% And similarly west at the top of the stairs
	($Verb is one of [throw push])
	(current room #t-stairs)
	(try [$Verb $Obj #down])

%% And then a way to get down ourselves

(instead of [leave #balcony #east/#down])
	(try [jump])

(prevent [jump])
	(current room #balcony)
	~(#mattress is #in #b-stairs)
	Watson peers over the edge, then look up at you with a scared whimper. He's always been a good jumper, but after what happened last night, you can't really blame him.

(perform [jump])
	(current room #balcony)
	Watson braces himself on the edge for a moment, steeling his nerves. Then with a mighty leap, he launches himself up and over the balcony! You find yourself drifting down with him as he plummets down the stairs and lands with a (emph {whump}) on the mattress below.
	(par)
	(move player to #on #mattress)
	(try [look])

%%(suggest jumping) %% TODO experimentally removed - (Watson) link does it instead
%%	(current room #balcony)
%%	(#mattress is #in #b-stairs)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - A Soft Landing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#mattress
(name *) mattress
(descr *)
	(if) (pushable *) (then)
		Dragged out of the guest room while it's being repainted, and left in the hallway because it's too much of a hassle to move it anywhere else. At least while it's propped on its edge it doesn't get in the way too much.
	(else)
		Lying flat in an untidy heap on the floor. At least you don't have to look at your own corpse any more.
	(endif)
(pushable *)
	~(* is #in #b-stairs)
(* accepts #under) %% Because it's funny
	(* is #in #b-stairs)
(actor supporter *)
	(* is #in #b-stairs)
(* is #in #upperhall)

(appearance *)
	(if) (pushable *) (then)
		A (link) mattress is propped up against one wall, for lack of anywhere better to put it.
	(else)
		A (link) mattress lies at the bottom of the stairs, where you fell.
		(list objects #on *)
	(endif)

(send * down the stairs)
	It tumbles end-over-end in a rush of air, the corners of the fabric fluttering wildly, until it lands with a mighty (emph {whomp}) at the foot of the stairs. (par) Well, at least you won't have to look at your own corpse any more.
	(now) (* is #in #b-stairs)
	(now) (#corpse is #under #mattress) %% It's now hidden under the mattress

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 5B - Exculpate the Nephew
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Geography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(room *(attic $))
(inherently dark *(attic $Room)) %% They cease to be dark when the windows open
	(#a-windows is closed)
(*(attic $) is in attic region)

#attic-w
(side *) west
(attic *)

(from * go #northeast to #attic-n)
(from * go #north to #northeast)
(from * go #southeast to #attic-s)
(from * go #south to #southeast)
%% (from * go #down to #upperhall)

#attic-n
(side *) north
(attic *)

(from * go #southeast to #attic-e)
(from * go #east to #southeast)
(from * go #southwest to #attic-w)
(from * go #west to #southwest)

#attic-e
(side *) east
(attic *)

(from * go #southwest to #attic-s)
(from * go #south to #southwest)
(from * go #northwest to #attic-n)
(from * go #north to #northwest)

#attic-s
(side *) south
(attic *)

(from * go #northeast to #attic-e)
(from * go #east to #northeast)
(from * go #northwest to #attic-w)
(from * go #west to #northwest)

#laboratory
(name *) laboratory
(room header *) Laboratory %% To avoid the attic rule catching it
(dict *) lab
(heads *) laboratory lab %% For disambiguation with the door
(attic *)
(look *) At the very center of the attic is the laboratory, where you spend your spare time tinkering with chemicals. (link) Nigel jokes that you're a fairy-tale witch updated to the twentieth century, but it's been plenty of help with cases in the past—and besides, everyone needs a hobby.
%% Laboratory exits are defined below since they depend on the vents

%% Must come after the above, so the laboratory can override it
(name (attic $Room))
	(side $Room) side of the attic
(room header (attic $Room))
	Attic, (side $Room)
(look (attic $Room))
	There are only two real rooms in the attic: the laboratory, in the center, and everything else, forming a huge ring around it. This is the (side $Room) side of that ring, packed to the gills with the (link) clutter of a life well lived.
	(if) (#a-windows is closed) (then)
		(par) Outside your little circle of torchlight, who knows what might be hidden in the darkness?
	(endif)

#clutter
(name *) clutter
(descr *) Too many things to even list—not that that's stopped (link) Nigel from trying. He wants to make a proper inventory of it at some point, and that sort of fastidiousness is what he lives for.
(fine where it is *)
(*(attic $) attracts *)

(#poisons is #in #laboratory) %% To put it at the right point in the description

#equipment
(name *) laboratory equipment
(dict *) apparatus tool tools lab
(your *)
(descr *) It's probably a bit antiquated, by modern standards, but you've found it very serviceable.
(fine where it is *)
(* is #in #laboratory)

#labdoor
(name *) laboratory door
(dict *) lab
(door *)
(openable *)
(descr *)
	Very secure, but for safety reasons it opens at
	(if) (current room #laboratory) (then)
		(link [open the door]) {the slightest touch}
	(else)
		the slightest touch
	(endif)
	from the inside.
(appearance * #in #attic-e)
	The (link) door to your laboratory stands
	(if) (* is open) (then)
		open
	(endif)
	to the (#west).
(appearance * #in #laboratory)
	The (link) door leads out to the (#east), thankfully easier to open from this side.

(prevent [open *])
	(* is closed)
	(current room #attic-e)
	Watson tugs, but it doesn't open from this side without a key—and (emph {that}) requires opposable thumbs.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Windows
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The windows themselves

#a-windows
(name *) attic windows
(dict *) window shutter shutters chain chains heavy
(plural *)
(descr *) You've always liked large windows, but they used to turn the attic into a veritable greenhouse in the summer, so you installed heavy shutters to keep it cool while you're away. Now you can open or close them by pulling the chain...usually with a long stick, because it hangs a good eight feet above the ground.
(openable *)
(* is closed)
(* provides light)
	(* is open)
(*(attic $) attracts *)
(reachable in darkness *)
(appearance *)
	(* is closed) %% No appearance needed when open since you don't need to interact with them again
	A faint hint of light outlines the heavy (link) shutters blocking the window.

(when * is out of reach) %% Overriding this predicate instead of (out of reach *) so I can vary the message
	(current player $Player)
	~($Player is #on #clock)
	(if) ($Player is #on $Supporter) (then) %% On some other non-clock supporter
		Watson reaches for the chains, but even from (the $Supporter), they're out of reach—a good eight feet above the ground.
	(else)
		Watson looks up at the chains, and flops down forlornly. They're a good eight feet above the ground, far too high for him to jump.
	(endif)

(instead of [push/pull/take *])
	(if) (* is open) (then)
		(try [close *])
	(else)
		(try [open *])
	(endif)

(prevent [close *])
	(* is open)
	Watson tugs on the chain, but nothing happens. Something must have jammed in the mechanism.

(narrate opening *)
	From his perch atop the clock, Watson stretches up and catches the chain in his mouth. With a sharp tug the shutters all around the attic snap open, and the afternoon sunlight streams in.
(after [open *])
	(update environment around player)
	(par)
	(try [look])

(perform [bypass *])
	The attic windows fly open!
	(now) (* is open)
	(update environment around player)

%% The furniture that lets you reach it

(actor supporter *(attic furniture $))
(reachable in darkness *(attic furniture $))

(narrate climbing (attic furniture $Obj))
	(current room $Room)
	~($Obj is in room $Room) %% When you jump from one room to another
	Watson focuses intently on (the $Obj), gauging the distance for a moment. Then with a mighty leap, he launches himself across the gap!
	(now) (jumped across rooms) %% Flag that we should do a LOOK afterward

(after [climb (attic furniture $)]) %% Gotta be after the movement happens
	(jumped across rooms)
	(par)
	(try [look])
	(now) ~(jumped across rooms)

#victrola
(name *) victrola
(dict *) record player cabinet gramophone phonograph old
(attic furniture *)
(descr *)
	It's well out of date nowadays, but you always liked the older sort of phonographs that are actual pieces of furniture, over the new ones that just look like square little boxes. You just don't get a good resonance on the low notes with the new ones. And on top of that, it's how you found that clue by playing (emph {Isn't It Strange I Don't Love You}) backwards. (par)
	Though, even you have to admit that a cabinet four feet long and three feet high is a bit of a pain to fit anywhere. And thus it has found its new home up in the attic.
(appearance *)
	(if) (player can see) (then)
		Your old (link) victrola rests under the dumbwaiter.
	(else)
		You can dimly make out the shape of your old (link) victrola , pushed back against the wall.
	(endif)
	(list objects #on *)
(* is #in #attic-n)

%% And just for fun
(switchable *)
(on every tick in the presence of *)
	(* is on)
	The victrola lets out a scratchy sigh as it tries to turn.

#organ
(name *) organ
(dict *) piano upright reed pump bellow bellows key keys keyboard stop stops
(an *)
(attic furniture *)
(descr *)
	Nigel thought it was a silly purchase at the time, but you've always had an interest in the less common sorts of musical instruments. It's only the size of an upright piano, about five feet high, but it has quite a lot of different stops to combine.
(appearance *)
	(if) (player can see) (then)
		A (link) {reed organ} is positioned against the inner wall.
	(else)
		You can just about trace the outlines of a tall (link) organ against the inner wall.
	(endif)
	(list objects #on *)
(* is #in #attic-e)

%% Similarly just for fun
(manipulable *)
(perform [push/pull *])
	The organ lets out a quiet wheeze as Watson pushes on the bellows. Sadly he doesn't quite have the dexterity to reach the keys at the same time.

#clock
(name *) grandfather clock
(attic furniture *)
(descr *) It's a trophy of sorts from one of your most notable cases. Early in the evening, Lady Meldrew locked herself in her study to read; several hours later, the servants were alarmed at her unresponsiveness and broke down the door to find her dead. The butler had rigged a canister of cyanide gas to the chimes, ensuring he'd have a perfect alibi at the time of death. It is admittedly a rather unwieldy trophy, a good seven feet tall, but you'd never part with it.
(manipulable *)
(appearance *)
	(if) (player can see) (then)
		The (link) {grandfather clock} looms just under the windows.
	(else)
		The shadow of the (link) {grandfather clock} looms silently under the windows.
	(endif)
	(list objects #on *)
(* is #in #attic-s)

(prevent [push/pull/open/close *])
	Watson prods at the pendulum, but sadly, it no longer runs. The butler's machinations and the process of gathering evidence thoroughly ruined the mechanism.

%% Special scope and access rules: add it to scope if it's in an adjacent room, and allow jumping to it

(add $Obj to scope)
	*(attic furniture $Obj)
	($Obj is in room $Room)
	(current room $Current)
	(from $Current go $ to $Room)

(out of reach (attic furniture $Target)) %% It can't be reached if it's in another room
	(current room $Room)
	~($Target is in room $Room)

(refuse [climb (attic furniture $Target)])
	(just) { %% This replaces the normal refusal rules completely - including the out of reach check
		(current room $Room)
		($Target is in room $Other)
		~($Room = $Other) %% It's not in the current room
		~(light reaches ceiling $Other) %% And it's in the dark
		Watson peers toward (the $Target) in (the $Other), then whimpers nervously. He's a great leaper and could probably cross the distance, but he can't see it well enough in the dark to be sure of his landing.
	}

%% But you can't reach them from the floor if they're too tall

(prevent [climb $Obj])
	($Obj is one of [#organ #clock])
	~{
		(current player $Player)
		($Player is #on $Holder)
		(attic furniture $Holder)
	}
	Watson
	(if) ($Obj = #organ) (then)
		can just barely get his paws up on top, but it's a bit too tall
	(else)
		can't even get his paws over it; it's just too tall
	(endif)
	to jump to from the ground.

(prevent [put $ #on #clock])
	~{
		(current player $Player)
		($Player is #on $Holder)
		(attic furniture $Holder)
	}
	Watson stretches as best he can, but can't reach the top of it from here.

%% Or reach things on the floor when you're on the furniture

(out of reach $Obj)
	(current player $Player)
	($Player is #on $Holder)
	(attic furniture $Holder)
	($Holder is in room $Room)
	($Obj is #in $Room)
	~(attic furniture $Obj)
	~($Obj = #a-windows)

%% And hint it to the player

(after [look])
	(current room $Room)
	(attic $Room)
	~{ ($Room = #laboratory) (vented) } %% Can't see anything in other rooms from there
	(exhaust) {
		*(attic furniture $Obj)
		($Obj is in room $Other)
		(from $Room go $Dir to $Other)
		(par)
		Off to the (name $Dir),
		(if) (light reaches ceiling $Other) (then)
			you can clearly see (a $Obj).
			(if) (#watson is #on $) (then)
				Watson could probably make that leap.
			(else)
				Watson might be able to leap to it, from the right starting point.
			(endif)
		(else)
			you can almost make out (a $Obj).
		(endif)
	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Vents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Vent object itself

#a-vent
(name *) floor vents
(dict *) vent grates grate carpet carpeting outline outlines
(plural *)
(actor container *)
(look *) %% Room description is just the normal one, but with (in the vents) in the header
	(* is in room $Room)
	(look $Room)

(vehicle *) %% This is the secret sauce
(narrate leaving $ $Dir by *)
	You can't see Watson moving, but as he scrabbles through the vents, you find yourself pulled along to the (name $Dir).
(prevent [leave $ #down by *])
	Watson pokes at the bottom of the vent, but it only runs through this floor, not the floor below. You didn't want to leak dangerous gasses into the rest of the house.
(narrate failing to leave $ $)
	(vented)
	Watson scrabbles at the side of the vent, but it doesn't open in that direction.

(instead of [leave $ #up/#out by *]) %% Understand UP or OUT as leaving
	(try [leave *])

(*(attic $) attracts *)
(instead of $Action) %% Have them local but impossible to interact with until the windows are open
	(* is one of $Action)
	~(#a-windows is open)
	(player can see *)
	There are vents set into the floor under the carpet, to keep your laboratory well-ventilated, but the torchlight isn't bright enough to pick them out.
	(tick) (stop)
(appearance *) %% No appearance until visible
	~(#a-windows is open)

%% Map changes when you're in the vents

(vented)
	(current player $Player)
	($Player is #in *)

(from #attic-w go #east to #laboratory)
	(vented)
(from #attic-n go #south to #laboratory)
	(vented)
(from #attic-e go #west to #laboratory)
	(vented)
(from #attic-s go #north to #laboratory)
	(vented)
(from #laboratory go #west to #attic-w)
	(vented)
(from #laboratory go #north to #attic-n)
	(vented)
(from #laboratory go #east to #attic-e)
	(vented)
(from #laboratory go #south to #attic-s)
	(vented)

%% And when you're not

(from #attic-e go #west through #labdoor to #laboratory)
	~(vented)
(from #attic-e go #in to #west)
	~(vented)
(from #laboratory go #east through #labdoor to #attic-e)
	~(vented)
(from #laboratory go #out to #east)
	~(vented)
(#laboratory/#attic-e attracts #labdoor) %% Make sure the door appears in descriptions even if the connection doesn't exist

%% Opening and closing them

(vents are opened) %% We repurpose the "unlocked" flag since it doesn't do anything on rooms
	(current room $Room)
	($Room is unlocked)

(*(attic $) is locked) %% They all start locked

#a-vent
(appearance *)
	(if) (vents are opened) (then)
		The carpet has been torn up to reveal the (link) vent underneath.
	(else)
		In the afternoon sunlight, you can just barely trace the outline of the (link) vents under the carpet.
	(endif)
(descr *)
	The vents run through the floor of the attic, to keep heavier-than-air gasses from accumulating in your laboratory. A layer of carpet over the top then keeps people from tripping and breaking their ankles.
	(if) (vents are opened) (then)
		Here they gape open, the carpet pulled away.
	(else)
		In the sunlight, you can just barely trace the outlines.
	(endif)

(prevent [enter/leave *])
	~(vents are opened)
	Watson tries, but there's a layer of carpet in the way. He'll have to get through that first.

(instead of [attack/bite/pull *])
	(try [dig *])
(prevent [open *])
	(if) (vents are opened) (then)
		Watson looks at the torn-open vent and wags happily.
	(else)
		Watson paws at the carpet for a moment, but can't find a way to open it without just chewing through. And surely that's not what you want.
	(endif)
(prevent [close *])
	(vents are opened)
	Watson prods at the torn carpet. That seems unlikely to happen.
(prevent [push *])
	(vents are opened)
	Watson nudges the carpet, and it flops loosely, not posing much of an obstacle now.
(prevent [dig *])
	(vents are opened)
	Watson bats hopefully at the carpet, but with the vent torn open, it's no fun to dig at any more.

(manipulable *) %% Hint PUSH
	(vented)
	~(vents are opened)

(instead of [dig])
	(current room $Room)
	(attic $Room)
	(#a-windows is open)
	(try [dig *])

(prevent [dig *]) %% In case people have played before - though I think the previous prevent rule will take care of this already
	(#a-windows is closed)
	Watson snuffles at the carpet, but can't pick out where the vents are without more light.

%% (prevent [dig *]) %% Can only push from the inside
%%	(vented)
%%	Watson tries to get his teeth and claws into the (link) carpet from the inside, but there just isn't enough leverage to pull on it from that angle. He'll need to find another way to tear through.
(perform [dig *]) %% Actually nah that's not worth the frustration
	(vented)
	(current room $Room)
	($Room is locked)
	(now) ($Room is unlocked)
	There's a scratching, scrabbling noise as Watson struggles to get his teeth and claws into the carpet—followed by a loud, satisfying rip. His head emerges from the floor, tongue lolling out happily.

(perform [dig *])
	~(vented)
	(current room $Room)
	($Room is locked)
	(now) ($Room is unlocked)
	You kneel down and guide Watson's nose to the right place, and he starts scratching at the carpet with furious intensity. He doesn't get the opportunity to dig very often, and he's determined to make the most of this moment. Soon a corner tears free, revealing the vent hidden underneath.

(perform [push *])
	(vented)
	(current room $Room)
	($Room is locked)
	(now) ($Room is unlocked)
	Inside the vent, Watson pushes with all his might, and with a great tearing of carpet his head emerges from the floor! His tongue lolls out happily.

(prevent [jump])
	(vented)
	A muffled bark of complaint comes from the vents.

%% And finally, restrict reaching out from it

(when $Obj is out of reach) %% While in the vents, you can't reach outside them - override the "when" to customise the message
	(vented)
	~(room $Obj) %% Causes problems for the LEAVE action if the room is out of reach
	~{ ($Obj = *) (or) ($Obj has ancestor *) }
	A muffled bark resounds from inside the vents. He'd have to (link [get out of the vents]) {get out} before he could reach (the $Obj).

%% Maintain the illusion of it being multiple unrelated vents as much as we can

(prevent [drop $])
	(vented)
	There's not enough room to move things around down there.
(prevent [put $Obj #in *])
	Best not. (The $Obj) could so easily get lost.

%% And avoid weird GO TO behavior for it

(before [go to $Room])
	(vented)
	~(attic $Room) %% Only if we're leaving the attic
	(first try [leave *])

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - Exculpation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#poisons
(name *) box of poisons
(dict *) poison arsenic arsenious oxide cyanide strychnine clearly labelled
(item *)
(openable *) %% Not really
(descr *) There are plenty of nasty chemicals you need to work with in your laboratory, but these ones are so easily and dangerously misplaced that you keep them in a special sealed box. This is the one the constables think Nigel might have tampered with, causing you to poison yourself in your work.
(evidence *)
(legible *)
(printing *) ">\~POISONS\~<"

(initial appearance *)
	Your (link) {box of poisons} lies in the midst of the (link) equipment , clearly labelled for safety.

(prevent [open *])
	Oh, best not—most of these are even more toxic to dogs than to humans. Besides, the goal is to show that it (emph {hasn't}) been tampered with.

(perform [bypass *])
	The box of poisons appears in your mouth!
	(current player $Player)
	(now) (* is #heldby $Player)

(perform [give * to #davis])
	"What's this now?" Watson pushes the box insistently into Davis's hands, and she has to turn it around to read it. "Poisons? Now where on earth did you get this?" She extricates it carefully from his mouth, and opens it to see the assortment of carefully-labelled vials inside. "This would be from her laboratory, then? The nephew could have tampered with them—you," she looks severely at Watson, "need to be more careful! It could have poisoned you too." (par)
	She seals the box again. "The fingerprints will tell us one way or another." But you already know the answer; Nigel isn't the sort to do a thing like that. The tests will prove him innocent.
	(now) (* is nowhere)
	(now) (#davis is #in #frontroom) %% Delivering the evidence again
	(now) (constable target #diningroom)
	(now) (constable message suppressed)
	(now) (nephew exculpated)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 6A - Uncover the True Motive
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Library Access
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(early on every tick)
	%% Once all four suspects are ruled out...
	(gardener exculpated)
	(companion exculpated)
	(nephew exculpated)
	(friend exculpated)
	%% If the library door is still locked...
	(#libdoor is locked)
	%% Then we do the cutscene to start the finale.
	(begin the finale)

(begin the finale)
	(par)
	(any key or link)
	(par)
	Some time later, Davis is back in the dining room, going over the files. "This doesn't make sense. There were only four people with a motive and an opportunity...but no evidence pointing toward (emph {any}) of them. How else could it 'ave happened?" (par)
	She looks down at Watson, as if he's going to have an answer for her, then stands. "I'm getting the other two. We need a new direction." Biddlecombe is promptly summoned down from the (link) library , and Phillips from wherever he's gotten off to; soon all three of them are huddled together around the table, comparing notes.
	(now) (#davis is #on #davischair)
	(now) ~(constable target $)
	(now) (#libdoor is unlocked)
	(now) (#libdoor is open)
	(now) (#biddlecombe is #in #diningroom)
	(now) (#phillips is #in #diningroom)
	(now) (stop signal given) %% Cut off multiple actions if needed
	(start hint timer for #library)

(hint for #library at 5 turns)
	(div @hint) { Now that Biddlecombe is out of the (link) library , there's nobody to stop you from exploring it. }

(stop hints for #library)
	(#library is visited)

#libdoor
(name *) library door
(door *)
(descr *)
	It's currently
	(if) (* is locked) (then)
		closed and locked while Biddlecombe does her work.
	(elseif) (* is closed) (then)
		closed, but not locked.
	(else)
		wide open.
	(endif)
(openable *)
(* is closed)
(* is locked)

(perform [bypass *])
	The finale begins! The library door pops open and Biddlecombe disappears.
	(now) (#libdoor is unlocked)
	(now) (#libdoor is open)
	(now) (#biddlecombe is #in #diningroom)
	(now) (#phillips is #in #diningroom)
	(start hint timer for #library)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Find the Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#library
(name *) library
(room *)
(look *) Nobody else ever likes this room. They say the (link) carpets and the (link) drapes clash horribly with the (link) bookshelves , and they can never find what they're looking for. But that really doesn't matter; it's a place for (emph {you}) to work, study, and read, and to your eyes, the colours are perfectly fine. The only (link) door leads back to the (#south).

(from * go #south through #libdoor to #t-stairs)

#upholstery
(name *) upholstery
(dict *) carpet carpets rug rugs drape drapes curtain curtains
(descr *) (emph {Apparently}) they're an odd mixture of purple, orange, and red that clashes horribly with the (link) shelves , but to you, they go together very well.
(* is #in #library)

#libshelf
(name *) bookshelves
(dict *) book shelf shelves bookshelf books case bookcase cases bookcases
(plural *)
(openable *)
(descr *)
	(if) (* is closed) (then)
		The shelves line every wall, leaving no real place to work—your desk, after all, is hidden in the niche behind them. All you have to do now is open it.
	(else)
		The shelves have opened to reveal the secret niche with your (link) desk .
	(endif)
(legible *)
(printing *) Unfortunately, there's no way to read them without actually turning the pages.

(* accepts #on) %% Not making it an actual supporter, for simplicity
(prevent [put $Obj #on *])
	Best not. You've put great care into the organization of your shelves, and (a $Obj) simply (does $Obj) not belong.

(prevent [close *])
	(* is open)
	Watson tugs as hard as he can, but it scarcely moves—it takes significantly more force to close than to open. But the counterweighting does make it swing open oh so beautifully.

(narrate opening *)
	It's very simple, if you know the trick. You direct Watson to pull one particular book off the shelf, then a second, then a third—and as the last one falls, the cases swing silently outward to reveal your (link) desk in the niche behind them. It's still covered with those (link) {ledgers and files} from last week; you kept meaning to get back to that investigation...
	(now) (#desk is #in #library)
	(notice #desk)
	(notice #ledgers)

(* is #in #library)

#desk
(name *) desk
(dict *) niche work space workspace
(your *)
(actor supporter *)
(descr *) It is, perhaps, not truly (emph {necessary}) to hide your desk behind a bookcase. But when you came across a mechanism like this in one of your investigations, you simply couldn't resist. Now your workspace is tucked away behind the shelves when it's not being used.
(appearance *)
	Your (link) desk is now visible behind the secret door,
	(if) (#ledgers is #on *) (then)
		covered with various (link) {ledgers and files} .
	(else)
		stripped clean of evidence.
	(endif)
	(if) ~(#watson is #on *) (then)
		%% Then show the things on the desk that aren't the ledgers
		(collect $Obj)
			*($Obj is #on *)
			~($Obj = #ledgers)
		(into $List)
		(nonempty $List)
		Also on the desk (is $List) (a $List).
	(endif)
%% Starts offstage but appears when you open the shelves

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Read the Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#ledgers
(name *) ledgers and files
(dict *) ledger file records record
(plural *)
(read to examine *)
(fine where it is *)
(descr *)
	(if) (#davis is nowhere) ~(recorder in place) (then)
		Hughes will never let the other constables see this. But it can serve another purpose now—as bait, to lure him exactly where you want him.
	(elseif) (embezzlement known) (then)
		The evidence is all here: Inspector Hughes has been embezzling funds from the constabulary. And it seems he would even resort to murder to conceal that fact.
	(else)
		Dozens of records and ledgers from the constabulary are laid out here, carefully arranged so you can compare them side by side. This isn't the sort of business you normally do, but the Inspector had remarked a few weeks back that their auditors couldn't make heads nor tails of the discrepancies, and you thought it might be linked to something deeper. Really, you started to regret it by the third page, which is why you left it sitting here for a week and a half. (par)
		But being murdered does tend to lend some urgency to things. You settle yourself over the desk and direct Watson how to push the papers around, letting you look for the patterns you need. It's tedious work, but you don't seem to grow tired the way you used to. (par)
		None of these discrepancies make sense. Their bookkeeping isn't just atrocious: it seems designed to be as confusing as possible. But the only person with the authority to cause that sort of snarl... (par)
		...would be the Inspector himself.
		(now) (embezzlement known)
		(now) (#phillips is nowhere) %% For simplicity - they never show up again after this
		(now) (#biddlecombe is nowhere)
		(start hint timer for #ledgers)
	(endif)
(* is #on #desk) %% Brought into play with the desk

(hint for #ledgers at 8 turns)
	(div @hint) { You have evidence that Hughes is embezzling—the constables have to see this! You should (link) { go to the dining room} and get their attention. }

(stop hints for #ledgers)
	(#davis is nowhere)

(prevent [take *])
	Oh, there are far too many for Watson to hold.
(prevent [push *])
	But that would just make even (emph {more}) of a mess!

%% But you can't get Davis's attention any more - she's busy now

(early on every tick) %% Make sure this pre-empts the constable behavior rules
	(current room #diningroom)
	(#davis is in room #diningroom)
	(embezzlement known)
	~(confession recorded)
	Davis is hurriedly gathering up the most important files. "I have to get this all in order—the Inspector is on his way!" She spares Watson a quick, apologetic glance, then hurries out of the room.
	(now) (#davis is nowhere)
	(par) So Hughes is coming. He'll never let the other constables see the evidence now. But this isn't time to panic; it's time to (emph {act}). (par)
	You know exactly where he's going to be: in the library, destroying the ledgers. You have a chance. Push him hard enough and he'll slip—and give you the evidence you need for a conviction.
	(now) (stop signal given) %% Ensure any action in progress gets cancelled
	(start hint timer for #recorder)

(hint for #recorder at 10 turns)
	(div @hint) { You'll need hard evidence to get Hughes convicted—the sort that can stand up in court. And since a dog can't testify, that probably means some sort of recording. }

(stop hints for #recorder)
	(held #recorder)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 6B - Convict the Constable!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - Circumstances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Let's explain why you can't just leave it in the room
(prevent [drop #recorder])
	(current room #library)
	(#davis is nowhere)
	The recorder is a perfect way to get some solid evidence, but if it's sitting out in the open, Hughes is sure to see it. There must be some way to have it in this room, but out of sight.
(instead of [put #recorder | $])
	(current room #library)
	(#davis is nowhere)
	(try [drop #recorder])

(recorder in place)
	(embezzlement known) %% Hughes's crime is known
	(#recorder is on) %% Recorder is recording
	(recorder is in record mode)
	(#recorder is nested #in #dumbwaiter) %% Recorder is behind the library wall
	(#dumbwaiter is #in #shaft-u)

(recorder in place) %% Stop tracking this once it's served its purpose
	(confession recorded)

(ready for finale)
	(recorder in place)
	(current room #library)
	~(confession recorded) %% Make sure it doesn't trigger after the finale
	~(during finale) %% Or during

(on every tick)
	(ready for finale)
	(par)
	Barely a moment later the door slams open and Inspector Hughes strides in, his bulky frame wrapped in an enormous overcoat. "(no space)(emph {None of the suspects}), she says. All four of the theories ruled out. (emph {Have to look deeper}). And Biddlecombe doesn't find a single bloody thing. It's time to take care of this myself."
	(now) (#hughes is #in #library)
	(now) (inspector suppressed)
	(start hint timer for #hughes)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Annoyance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(hint for #hughes at 3 turns)
	(div @hint) { Hughes is already annoyed, and he's always hated Watson. Maybe you can make him angry enough to let something slip! }
	(start hint timer for #briefcase) %% I don't have another convenient object to use here...

(stop hints for #hughes)
	(inspector annoyance $Level)
	($Level > 0)

(hint for #briefcase at 3 turns) %% But this feels better than making #hughes2 or something
	(div @hint) { You've got him mad now! Keep it up! }

(stop hints for #briefcase)
	(inspector annoyance $Level)
	($Level > 1)

%% Every time you annoy the inspector, his annoyance level goes up by one
%% There are six ways to annoy him, but you only need three to win
(inspector annoyance $Level)
	(accumulate 1)
		(finale biting) (or)
		(finale kissing) (or)
		(finale stealing) (or)
		(finale lounging) (or)
		(finale disgusting) (or)
		(finale barking)
	(into $Level)

(during finale) %% For readability
	(#hughes is #in #library)

%% OPTION 1 - BITE HUGHES

(biteable #hughes) %% Give a little hint in the links
	(during finale)

(instead of [attack/bite/eat $Obj])
	(during finale)
	($Obj has ancestor #hughes)
	(try [attack #hughes])
(perform [attack/bite/eat #hughes])
	(during finale)
	You've trained Watson well not to get aggressive with people, but he's smart enough to understand the anger behind that command—he leaps at the Inspector with a growl, teeth bared to bite! Hughes does his best to fend him off, but his Inverness coat now has some dramatic new tears.
	(now) (finale biting)
(prevent [attack/bite/eat #hughes])
	(during finale)
	(finale biting)
	"No you don't!" Hughes slaps Watson's mouth away.
~(prevent [attack/bite/eat #hughes]) %% Remove the usual "can't attack humans" checks
	(during finale)

%% And since it's mentioned in the description, might as well
#hughescoat
(name *) Inspector Hughes's Inverness coat
(heads *) coat overcoat
(dict *) overcoat enormous
(descr *) If you hadn't seen him wearing it, you'd call it more of a tent than a coat.
(* is #wornby #hughes)

%% OPTION 2 - KISS HUGHES

(instead of [taste/kiss $Obj])
	(during finale)
	($Obj has ancestor #hughes)
	(try [kiss #hughes])
(perform [taste/kiss #hughes])
	(during finale)
	Watson needs very little encouragement to throw himself upon the Inspector, lavishing him with distinctly unwanted canine affection. Hughes tries his hardest to push him away, but Watson is undeterred, and by the time the Inspector fights free his face and hands are thoroughly wet.
	(now) (finale kissing)
(prevent [taste/kiss #hughes])
	(during finale)
	(finale kissing)
	"No! Off!" Hughes slaps Watson's mouth away.

%% OPTION 3 - STEAL FROM HUGHES

#briefcase
(name *) Hughes's briefcase
(proper *)
(dict *) brief case
(item *)
(descr *) Perfect for taking evidence away to dispose of.
(openable *)
(* is locked)

(instead of [push/pull #briefcase])
	(during finale)
	(try [take #briefcase])
(perform [take #briefcase])
	(during finale)
	The moment Hughes's back is turned, Watson reaches up and gives his briefcase a mighty shove, sending it to the floor. The Inspector whirls around a moment too late to stop him from snatching it up, and he's off on a merry chase! (par) Watson manages to evade the constable for a good while before Hughes eventually manages to snag his case back, puffing and panting for breath.
	(now) (finale stealing)
(prevent [take #briefcase])
	(during finale)
	(finale stealing)
	"Bad!" Hughes shoves Watson away before he can get hold of the case again.

%% OPTION 4 - LIE ON HUGHES'S WORK

(perform [climb #desk])
	(during finale)
	Watson's tail wags for a moment, and the Inspector has only a moment of warning before he leaps up onto the desk, papers flying everywhere! Hughes shouts something incoherent and tries to push him aside, his work now scattered all over the room.
	(now) (finale lounging)
(prevent [climb #desk])
	(during finale)
	(finale lounging)
	"No!" Hughes is ready for him this time, and Watson is unceremoniously forced back down to the floor.

%% OPTION 5 - DISGUST HUGHES

(perform [disgust])
	(during finale)
	You've trained Watson well not to do such things in the house, but you've also trained him to recognise an emergency—and this certainly qualifies. Hughes freezes in his work as he hears the telltale sound behind him.
	(now) (finale disgusting)
(prevent [disgust])
	(during finale)
	(finale disgusting)
	Hughes ignores the sound with stoic resolve.

%% OPTION 6 - BARK
%% Do we really want this one? It's kind of...easy? But also not linked, so eh

(perform [bark])
	(during finale)
	Positioning himself right behind Hughes's work, Watson waits for the perfect moment to let out a thunderous bark. The Inspector jumps, clenching his hand so hard on a pen that it snaps in half.
	(now) (finale barking)
(prevent [bark])
	(during finale)
	(finale barking)
	Hughes grits his teeth and ignores the sound.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - Hughes's Reaction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(prevent [leave #library #south])
	(during finale)
	But you can't leave now—this is your last chance before Hughes destroys the evidence!

(on every tick)
	(during finale)
	(inspector annoyance $Level)
	(if) (inspector suppressed) (then)
		(now) ~(inspector suppressed)
	(else)
		(par)
		(describe inspector annoyance level $Level)
	(endif)

(describe inspector annoyance level 0)
	(select)
		"Now, what have we here?" (link) Hughes sets his (link) briefcase on the desk.
		(now) (#briefcase is #on #desk)
	(or)
		"Oh (emph {ho})..." He runs his fingers over the outline of the secret door. "That clever old bird."
	(or)
		(select)
			(link) Hughes thumbs through the ledgers. (or)
			(link) Hughes rifles through another file. (or)
			(link) Hughes takes out another book.
		(cycling)
	(stopping)

(describe inspector annoyance level 1)
	(select)
		"Shoo! Get out of here! Go!" With a hiss of displeasure, (link) Hughes turns back to the desk.
	(or)
		(link) Hughes flips through another ledger, grumbling under his breath.
	(or)
		(select)
			(link) Hughes growls quietly as he turns to a new book. (or)
			(link) Hughes taps his fingers restlessly on the desk.
		(cycling)
	(stopping)

(describe inspector annoyance level 2)
	(select)
		"Wretched mutt! You're as bad as she was!" (link) Hughes visibly composes himself for a moment before going back to his task.
	(or)
		(link) Hughes throws a book aside with far too much force.
	(or)
		(select)
			(link) Hughes lets out a low growl of frustration as he searches. (or)
			(link) Hughes slams a fist against the bookshelf.
		(cycling)
	(stopping)

(describe inspector annoyance level 3)
	"ENOUGH!" Hughes whirls on Watson, rage burning on his face. "You confounded (emph {beast!}) I had it all arranged! There was no evidence to be found! We'd file it as an accident and close the case, or send Davis and Phillips on a snipe hunt until the case went cold! But you, you had to get in my way at every single turn!" (par)
	He snatches up a stack of papers and starts to shred them between his hands. "But it's not enough. This was the last evidence of the motive, and without it, they'll never even begin to investigate. This house is going up for auction, and (emph {you're}) going to the pound!" (par)
	He aims a petty kick at Watson as he flings the door open and storms out of the room.
	(now) (confession recorded)
	(now) (#hughes is #in #kitchen)
	(now) (#briefcase is #heldby #hughes)
	(now) (#ledgers is nowhere) %% Destroyed
	(now) (dumbwaiter is going down) %% Just make the ending a bit smoother: the first turn of the wheel will always take it to the kitchen now
	(now) (constable return pending)
	(now) (stop signal given) %% In case of multiple actions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - The End
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(early on every tick)
	(constable return pending)
	(par) You can hear the Inspector storming out, almost bowling over (link) {Constable Davis} in the process. She tries in vain to apologise as he slams the front door behind him.
	(now) (#davis is #in #frontroom)
	(now) (constable target #diningroom)
	(now) (#frontdoor is closed)
	(now) (#hughes is nowhere)
	(now) ~(constable return pending)
	(now) (constable message suppressed)

#recorder

(evidence *) %% It only becomes evidence once it has Hughes's confession
	(confession recorded)

(perform [give * to #davis])
	(confession recorded)
	"Hm? What's'at?" Davis sounds exhausted as she looks down at the recorder. "Ah, you found this for us. Thanks, dog." She checks the tape, then rewinds it and taps 'play'. (par)
	There's a minute of muffled silence, the sounds of someone rifling around in the library, and Davis frowns. But then Hughes's voice comes through loud and clear. (emph {I had it all arranged! There was no evidence to be found! We'd file it as an accident and close the case, or send Davis and Phillips on a snipe hunt until the case went cold!}) (par)
	The recorder falls from the constable's hand with a (emph {crash}). "Inspector Hughes? He— (no space) (emph {why}) (no space) —" (par)
	Watson sits back on his haunches, panting happily as Davis grabs the recorder and sprints off. Finally taking her own initiative, for once in her life; you wish you could tell her you were proud. She's the sort who will dot all the (emph {i})(no space)'s and cross all the (emph {t})(no space)'s, and with a confession like that, Hughes has no way to wiggle out of it. (par)
	The front door slams, and you're left alone in the silence. Davis will get the credit, of course, but you don't mind that; you've had plenty of glory in your time. Someone else can get the accolades for solving your own murder.
	(if) ~(ritual succeeded) (then)
		And Nigel will take good care of Watson; your will is explicit on that point.
	(endif)
	(par)
	The real question is—what comes next for you?
	(if) (ritual succeeded) (then) %% secrets.dg
		That odd ritual seems to have bound your soul to Watson, and that binding shows no signs of fading. You look down at Watson, who's sitting back on his haunches, panting happily. You might not know what the next chapter in your story will bring, but it certainly won't be the last.
		(final message)
	(endif)
	(now) (* is nowhere) %% Removes the "show your evidence to the constables" from the SCORE list
	(game over {The End})
%% This is where all the metapuzzle stuff goes.
%% SHHHH! It's a secret!
%% I considered checking it into Git as an empty file, but the need for backups outweighs the need for secrecy in this case. So I just won't release the source code publicly until the metapuzzle has been solved.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 7 - Metapuzzle and Bonus Content
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - The Clues
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% See intro.dg for where this is placed and such
#case-gwydion
(descr *)
	You normally wouldn't include an unsolved case here...much less one where the constables never proved there was even a crime committed at all. But it did get a lot of press, and it did revolve around your house—and you kicked off the whole thing when you found this notebook during renovations. It seems one of the previous occupants called himself "Disgybl Gwydion", claimed to be heir to the ancient Druids, performing strange rituals in the flower gardens and seeking eternal life. (par)
	(emph {...ancestral spirits / lares and penates, bound through belief, worship? / no, alchemical process - congelation of the soul! See Petrus Catadesmicus, (emph {Liber Animarum}) / but held to the anchor, how to move and act? / Kizzuwatnan ritual, the (emph {kuwac hapanza}) (bullet) Father's Encyclopedia vol K p 197 (bullet) replaces the nails or spikes! / must be in the right place...}) Perhaps the translation the constables gave you is faulty, or perhaps \(as you've long suspected\) it's just nonsense. But it's a reminder that sometimes there just aren't answers to be found anywhere in this world.

%% Other hints are in the credits, see actions.dg - protagonists of the other games are credited as testers, and "Winifred Gosling" is credited in them

#junkmail
(descr *)
	You receive enough mail that you have a little system for judging it. If someone wrote your name and address with their own hand, it's probably worth reading. If it's stamped on in that precise, soulless font, probably not. The Total Human Project wants more money, some new disaster has hit Pickering Station, the "BOSH" \(bureau of something-or-other\) has a bake sale coming up...none of it at all relevant now.
(legible *)
(printing *) Your name and address are stamped on with mechanical precision. No soul to it, none at all.
(biteable *)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Where
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% First, hints in this game

%% The #case-gwydion report in the dining room mentions Disgybl Gwydion, the previous owner of your house, and the #newspaper-old at the bottom of the stairs does too

%% Second, answers in another game

%% In Winter-Over, there are movies in the Rec Room that won't help you escape, including this one:
%% A MISS GOSLING MYSTERY: THE LAST OF THE DRUIDS
%% When the quaint English village of Marswich Green is disrupted...the sinister plots of Disgybl Gwydion, heir to the ancient Druids...Miss Gosling faces her greatest test against the spirit of the immortal sorcerer...what horrible secrets now lie buried beneath the calendulas?!

%% Third, effects in this game

(perform [dig])
	(current room $Room)
	(#calendula is in room $Room)
	(try [dig #calendula])

(perform [dig #calendula])
	Normally, Watson would be too well-trained to obey an order like that. He knows perfectly well that your garden is (emph {not}) for digging. And yet...he knows that there's something odd here, different from all the rest. (par)
	He throws himself into the work with great enthusiasm, uprooting your poor calendulas left and right, until with an awful lurch the garden bed collapses in on itself and sinks down into something underneath! This must be where the old cistern was, long ago; you'd been told the house had one when you bought it, but you never saw it yourself.
	(now) (cistern opened)
	(update environment around player) %% So the map connection appears

(from (garden $Room) go #down through #hole to #cistern)
	(#calendula is in room $Room) %% Only the calendulas hide the secret
	(cistern opened)

%% Block off all parsing until it's open - ensure that typing WHITE doesn't do weird things, in particular
(dict (secret $))
	~(cistern opened)
	(just) (fail)

#hole
(name *) messy tunnel
(dict *) sinkhole sink mess hole in the ground
(door *)
(descr *) (emph {Not}) what you like to see in the middle of your garden! Alfred will have quite the job ahead of him, fixing this.
(secret *)

(appearance *) A large (link) sinkhole in the middle of the garden bed thoroughly disrupts the aesthetic.
(appearance * #in #cistern) A (link) {messy hole} leads back to the garden above.

#cistern
(name *) old cistern
(room *)
(look *) The old cistern isn't especially large, and if you still had a body, you wouldn't be able to stand up without hitting your head. (link) Lichen covers the old stones, and in one corner they've crumbled away entirely into some sort of cavern beneath.
(* is in secret region)
(from * go #up through #hole to *(garden $Room))
	(#calendula is in room $Room)
(from * go #down to #cavern)
(secret *)

#lichen
(name *) lichen-covered stones
(dict *) lichen covered stone stones old bone-white bone white crumbly ancient wall walls
(descr *) The lichen is crumbly and bone-white, and it's worked its way deep into the stone over the years. How can it thrive down here without light?
(#cistern/#cavern attracts *)
(secret *)

#cavern
(name *) ancient chamber
(dict *) dome cavern
(room *)
(look *)
	This place cannot exist. It simply can't. You can't even stop your cellar from flooding, for goodness' sake; how could a chamber like this possibly stay dry? For that matter, how can you even see Watson three feet in front of you, with no light coming down from the surface? (par)
	And yet somehow it does, fifteen feet wide and round like a dome, the ancient walls crumbling with (link) lichen . A roughly-hewn (link) {slab of stone} stands right in the middle.
(* is in secret region)
(from * go #up to #cistern)
(secret *)

#altar
(name *) stone slab
(dict *) of roughly-hewn roughly hewn rough edge edges centre center altar circle bound
(actor supporter *)
(descr *) The edges are rough, but a circle in the centre is worn smooth by long use.
(* is #in #cavern)
(secret *)

(constable avoids *($ is in secret region))

(prevent [dig | $])
	(current room $Room)
	($Room is in secret region)
	Watson gives a scared little whimper, and pulls his paws in. There's something about the stone here that makes him hesitant to dig any deeper.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 3 - What
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% First, hints in this game

%% The #case-gwydion notes reference a "congelation of the soul", from a work by Petrus Catadesmicus ("Peter the Binder").

%% Second, answers in another game

%% Look up that citation in BOSH (Bureau of Strange Happenings), and you'll learn this:
%% ...what these near-sighted Fools took as Rituals of Cursing are in truth Rituals of Binding, the true Congelation of the Soul, the Chaining of the immaterial Soul to a material Anchor, by piercing with a Spike the written true Name of the subject, thus transfixing the Soul and holding it fast, should the Environment be appropriately Consecrated, and appropriately Deep within the Earth...

%% Third, effects in this game

%% A predicate for things that have your name written on them
(#junkmail bears your name)
%% TODO anything else?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 4 - How
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% First, hints in this game

%% The #case-gwydion notes also specifically mention the _kuwac hapanza_ from Kizzuwatnan ritual, and that it can be found in "Father's Encyclopedia", a particular volume and page

%% kuwac hapanza = "moistened dog" in Hittite
%% (with an asterisk that kuwac (kuwan-c) is specifically the LÚ^UR.GI7 "hound man", we're not sure of the word for "dog" itself because it's always written UR, but kuwac clearly comes from PIE *cuōn and the Hieroglyphic Luwian cognate suwanis is clearly "dog")
%% hapanza from hapae-zi "moisten" < hapac "river"

%% Second, answers in another game

%% In THE DEN, looking up the appropriate page in Father's Encyclopedia gets you this:
%% A unique aspect of certain Kizzuwatnan rituals was the <i>kuwac hapanza</i>, literally the "wet dog": a domesticated dog who had been ritually purified with running (not still!) water. Unlike the "impure" puppies used in other rituals, the <i>kuwac hapanza</i> was considered pure enough to function as an intermediary between the physical and spiritual worlds, a living anchor for the rite through which the spirits could act.

%% This is all made up, of course; Kizzuwatnan rituals *were* notable for including puppies in them, but usually the purpose of the dog was to absorb something bad (impurity, sickness, curses, etc) and then die :(

%% Third, effects in this game

%% You have to soak Watson in running water for the ritual to work

%% Watson stays wet for a certain amount of time after getting water in his fur
(global variable (wet dog timer 0))
%% This can be either still water or running water

(dog is wet)
	(wet dog timer $Time)
	($Time > 0)

(on every tick)
	(dog is wet)
	(wet dog timer $Old)
	($Old minus 1 into $New)
	(now) (wet dog timer $New)
	(if) ~(dog is wet) (then)
		Watson's fur seems to have finally dried out.
	(endif)

(soak in still water)
	(now) (wet dog timer 30)
	(now) ~(running water used)
(soak in running water)
	(now) (wet dog timer 30)
	(now) (running water used)

(dog is ritually pure)
	(dog is wet)
	(running water used)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 5 - All together now!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(perform [attack/bite/eat $Obj])
	(current room #cavern)
	(perform the ritual with $Obj)

(perform the ritual with $Obj)
	($Obj bears your name)
	(dog is ritually pure)
	%% Success!
	(ritual description with $Obj)
	(now) (ritual succeeded)

(perform the ritual with $Obj)
	($Obj bears your name)
	Watson bites (the $Obj), and you feel a strange tug at your heart...but it only lasts a moment.

(perform the ritual with $Obj)
	(dog is ritually pure)
	Watson bites (the $Obj), but you feel absolutely nothing in your soul.

(perform the ritual with $Obj) %% Fallback
	Watson bites (the $Obj), but nothing happens.

(ritual description with $Obj)
	You're not quite sure what to expect when Watson sinks his teeth into (the $Obj). Some part of you remains convinced that it's all nonsense. Another part is being steadily forced to accept the existence of ghosts, which you have steadfastly refused to accept as an explanation for murder for the past fifty-some years. (par)
	Whatever you expected, it wasn't this. (par)
	It feels like your whole spirit is being forced through a funnel just over your heart, drawn out and twisted into a cord, needled through (the $Obj) like a thread through cloth. You become your name, and your name becomes you, and Watson— (par)
	Nothing has changed, and at the same time, everything has changed. You feel no more solid than before. But in some strange way, you're more (emph {real}). More certain that your story isn't quite yet reaching its end.

(final message)
	(div @gold) {
		Congratulations on solving the metapuzzle and reaching the true ending! This puzzle was run as a competition during IFComp 2024, with the prize won by S. V. Linwood. (par)
		(bullet) Daniel Stelzer, N. Cormier, Emery Joyce, Ben Jackson, and Phil Riley
	}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 1 - The Constables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#hughes
(name *) Inspector Hughes
(dict *) Basil chief constable
(heads *) Inspector Hughes %% To avoid disambiguating with his clothes
(constable *)
(male *)
(proper *)
(descr *)
	You have a long history with Basil Hughes, and it's in no small part thanks to your investigations that he's risen through the ranks from Constable to Inspector. He has his eye on Chief Inspector now, but really, well...the man is far too close-minded, far too quick to jump to the obvious conclusion. Large and stout, with an immaculate uniform and an impressive moustache, he tries to look every bit the image of the modern constabulary.

#biddlecombe
(name *) Sergeant Biddlecombe
(dict *) constable
(constable *)
(female *)
(proper *)
(descr *)
	You've always found Biddlecombe competent enough, but utterly humourless. She does most of her work behind a desk, and you do have to admit she has a rare talent for coordination and logistics; you can't fathom why Basil
	(if) (#torch is pristine) (then) %% Still in the intro
		has her involved in this.
	(else)
		wants her doing that coordination from your library instead of the local precinct, but it is flattering in a way that he wants everyone involved in solving your murder.
	(endif)
	She's not bad-looking by any means, but she keeps her hair cut so unflatteringly short; she really ought to be thinking about a husband at her age.

#phillips
(name *) Constable Phillips
(constable *)
(male *)
(proper *)
(descr *)
	"Fastidious" is perhaps the best word to describe the young constable, so insistent on doing everything by the book. You always appreciate his thoroughness in searching for clues, now that you're in no state to be bending down and dusting for fingerprints under automobiles and such, but he'll never be promoted if he can't learn to put the pieces together himself. When he's set himself to a task, nothing short of an absolute emergency will sway him from his course.

#davis
(name *) Constable Davis
(constable *)
(female *)
(proper *)
(descr *)
	You've always seen promise in Davis, from when she was just starting out as a bright-eyed new recruit. But she's got a certain earnestness you've never quite been able to sway her from. Now she spends most of her time taking every menial task that's pushed onto her, thinking straightforward honesty is the best path to promotion. Eventually, something is bound to shake her enough to take some initiative of her own...or at least, that was always your hope.

(appearance *) %% She's the one who might appear in any room, and needs a general appearance trait
	(if) (constable is chasing) (then)
		Constable Davis is hurrying after you in hot pursuit.
	(else)
		Constable Davis is here, looking rather frazzled.
	(endif)

(animate *(constable $))

%% For EXAMINE CONSTABULARY
(plural dict (constable $)) gaggle of lower-ranking lower ranking constabulary constables
(action [examine $] may group (constable $) with (constable $))
(group-instead of [examine $List])
	(#davis is one of $List)
	(#phillips is one of $List)
	{ (#biddlecombe is one of $List) (or) (#hughes is one of $List) }
	(if) (opening cutscene) (then) %% The only times three constables are in one place are the intro and the pre-finale
		Inspector Hughes has brought Constables Phillips and Davis along, to search for clues and document what he finds.
		(now) (examined constables) %% See intro.dg for why this matters
	(else)
		(link) Davis , (link) Phillips , and (link) Biddlecombe are trying to figure out what to do next, with all four suspects ruled out.
	(endif)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Chapter 2 - Davis's Behavior
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(global variable (constable target $))

(on every tick)
	(#davis is in room $) %% Only run this if Davis is on-stage
	(handle constable behavior)

(handle constable behavior)
	(constable message suppressed) %% This flag is set if other rules have described Davis doing something already this turn
	(now) ~(constable message suppressed) %% If so, we do nothing, and unset the flag

(handle constable behavior) %% Don't run AI during the opening
	(opening cutscene)

%% Removing Watson from the table takes precedence over everything else
(handle constable behavior)
	(#davis is in room #diningroom)
	(current player $Player)
	($Player is #on #table)
	(par)
	"Down from there! Now!" Davis gives Watson a little shove, and he hops down with a whimper.
	(move player to #in #diningroom)

%% Keep Davis in the main area of the house
(constable avoids *($ is in garden region))
(constable avoids *($ is in attic region))
(constable avoids *($ is in cellar region))
(constable avoids *($ is in suite region))

%% Davis moves toward her target if she has one
(handle constable behavior)
	(constable target $Target)
	(#davis is in room $Current)
	(par)
	(if) ($Current = $Target) (then)
		(constable has reached $Target)
		(now) ~(constable target $)
	(elseif) (#davis is #on $) (then)
		Davis gets up from her chair.
		(now) (#davis is #in $Current)
	(elseif) %% Keep her from leaving the main area of the house, for sanity's sake
		(constable avoids $Target)
		%% We stop her at the first step she'd take out of her permitted area
		(first step from $Current to $Target is $Dir)
		(from $Current go $Dir to room $Next)
		(constable avoids $Next)
	(then)
		Davis turns back, not willing to follow to (the $Next).
		(now) (constable target #diningroom)
		(now) ~(constable is chasing) %% So she doesn't immediately start following again
	(else)
		{
			(first step from $Current to $Target is $Dir)
			(from $Current go $Dir to room $Next)
			(fully bound $Next)
			(if) (constable is chasing) (then) %% We use our own narration here, since the player is somehow aware of it no matter where they are in the map (for simplicity)
				Davis follows from (the $Current) to (the $Next), in hot pursuit.
			(else)
				Davis makes her way from (the $Current) to (the $Next).
			(endif)
			(now) (#davis is #in $Next)
		(or)
			%% Hopefully this never happens!
			Davis can't find any route from (the $Current) to (the $Target), and gives up.
			(if) (constable target #diningroom) (then)
				With no way to return to her work, she resorts to teleportation. Please report this as a bug.
				Details: current is $Current , target is $Target .
				(now) (#davis is #in #kitchen)
			(endif)
			She heads back toward the dining room.
			(now) (constable target #diningroom)
		}
	(endif)

(handle constable behavior) %% Notice alarm
	(something is burning)
	(#alarm is in room $Room)
	($Room is smoky)
	~(constable target $)
	As the alarm starts to blare, Davis puts aside her work with a groan.
	(now) (constable target #kitchen)

(handle constable behavior) %% Notice smoke
	(something is burning)
	(#davis is in room $Room)
	($Room is smoky)
	~(constable target $)
	At the telltale smell of smoke, Davis puts aside her work with a groan.
	(now) (constable target #kitchen)

(handle constable behavior)
	(introduction finished)
	(#davis is #on #davischair)
	(current room #diningroom)
	~(constable is chasing)
	{ (held #sandwich) (or) (held #biscuit) }
	(par)
	"Oi! What's that all about?" Davis blinks in surprise as her food is snatched away right in front of her eyes. She rises to her feet, ready to give chase!
	(now) (#davis is #in #diningroom)
	(now) (constable is chasing)

%% If she's chasing you, every turn, your room becomes her target. This happens before she executes the chase.
%% As a result, she'll never reach her target unless she's in a room with you for more than one turn.
(early on every tick)
	(constable is chasing)
	(current room $Current)
	(now) (constable target $Current)

%% The tape recorder is loud, so she'll turn it off if it's playing
(handle constable behavior)
	(player can reach #davis)
	(player can reach #recorder)
	(#recorder is on)
	(recorder is in playback mode)
	(par)
	Hearing the whine of the tape recorder, Davis reaches over and shuts it off.
	(now) (#recorder is off)

%% When she and the other constables are together at the beginning of the finale
(handle constable behavior)
	(#davis is in room #diningroom)
	(#biddlecombe is in room #diningroom)
	(if) (player can see #davis) (then)
		(par)
		(select)
			Biddlecombe and Davis are having a heated debate about the evidence. Phillips is off in the corner, running his hands through his hair.
		(or)
			Biddlecombe starts explaining something very slowly, as if Davis is an idiot.
		(or)
			Davis snatches some papers off the table and waves them in Biddlecombe's face.
		(or)
			Phillips looks like he wishes he was somewhere else.
		(or)
			The constables continue their argument.
		(stopping)
	(endif)

%% Separate from that is her behavior if she's at work and the player can see her
(handle constable behavior)
	(#davis is #on #davischair)
	(player can see #davis)
	~(constable is chasing)
	(par)
	(if) (#sandwich is #on #table) (then)
		(select)
			Davis takes a bite of her (link) sandwich .
		(or)
			(if) (cabinet finished) (then)
				Davis flips one of the sheets over, tapping her pen against the table.
			(else)
				Davis stares blankly at the (link) cabinets , lost in thought.
			(endif)
		(or)
			Davis sets her (link) sandwich aside as she pulls out another page.
		(at random)
	(elseif) (#biscuit is #on #table) (then)
		(select)
			Davis fishes another (link) biscuit out of the pack.
		(or)
			Davis absent-mindedly tries to dip her (link) biscuit in some tea, then realises she doesn't have any.
		(or)
			Davis munches on a dry (link) biscuit .
		(or)
			(if) (cabinet finished) (then)
				Davis flips one of the sheets over, tapping her pen against the table.
			(else)
				Davis stares blankly at the (link) cabinets , lost in thought.
			(endif)
		(at random)
	(elseif) (#frontdoor is locked) (then) %% Sanity check if things go badly wrong
		Davis fishes out another (link) biscuit.
		(now) (#biscuit is #on #table)
	(else) %% Biscuits are done
		(select)
			(if) (cabinet finished) (then)
				Davis flips one of the sheets over, tapping her pen against the table.
			(else)
				Davis stares blankly at the (link) cabinets , lost in thought.
			(endif)
		(or)
			Davis looks for her biscuit, realises she's run out, and sighs.
		(or)
			Davis pulls out another page, cross-checking it against the last.
		(or)
			Davis runs her hands through her hair with a sigh.
		(or)
			Davis sets the last sheet aside, turning to the next.
		(at random)
	(endif)

%% And sanity check if she gets stuck
(handle constable behavior)
	~(constable target $)
	~(#davis is #on #davischair)
	(now) (constable target #diningroom)

(constable has reached #kitchen) %% She turns off the stove, ending the smoke problems
	($Fuel is burning)
	Following the smoke to the kitchen, Davis is confronted with the horrors of the smoldering ($Fuel), and immediately turns off the stove.
	(now) (#stove is off)
	(now) (constable target #diningroom)

%% She's caught Watson in the front room!
(constable has reached #frontroom)
	(constable is chasing)
	(current room #frontroom)
	(#frontdoor is locked)
	(par)
	"Gotcha! Huh?" Davis looks down at Watson, then up at the front door. He lets his tail droop and gives her his best whine.
	(par) "You want out, then? Here you go. That should get you off my arse for a bit." She flips the lock and pushes the door open before retreating, bereft of food.
	(now) (#frontdoor is unlocked)
	(now) (#frontdoor is open)
	(now) ~(constable is chasing)
	(now) (constable target #diningroom)
	(if) (held $Snack) ($Snack is one of [#sandwich #biscuit]) (then) %% Simplifies the logic elsewhere
		(par) When you look back at Watson, he's taken advantage of the confusion to devour his snack. Well, you suppose he deserves it.
		(now) ($Snack is nowhere)
	(endif)

%% She's caught Watson in any other room!
(constable has reached $Room)
	(constable is chasing)
	(current room $Room)
	(current player $Player)
	"Gotcha!" Davis has finally cornered Watson, forcing him to open his mouth
	(if) (#sandwich is #heldby $Player) (then)
		. She looks sadly at what's become of her sandwich, and disposes of it as she turns to leave.
		(now) (#sandwich is nowhere)
	(elseif) (#biscuit is #heldby $Player) (then)
		. She looks sadly at what's become of her biscuit, and disposes of it as she turns to leave.
		(now) (#biscuit is nowhere)
	(else)
		...to find no trace left of her food. Watson looks much happier than she does as she turns to leave, empty-handed.
	(endif)
	(now) ~(constable is chasing)
	(now) (constable target #diningroom)

%% Nothing is burning, but the stove is on - turn it off
(constable has reached #kitchen)
	(#stove is on)
	Davis looks around (the #kitchen) for anything amiss, and immediately shuts off the burners.
	(now) (#stove is off)
	(now) (constable target #diningroom)

(constable has reached #diningroom)
	Davis settles back into her chair and returns to work.
	(if) (#watson is #on #davischair) (then)
		Watson is pushed firmly out of the way in the process.
		(move player to #in #diningroom)
	(endif)
	(now) (#davis is #on #davischair)
	(if) (#frontdoor is unlocked) (then) %% She's no longer eating
		(if) ~(#biscuitpack is nowhere) (then)
			She reaches for a biscuit, but the pack is empty. She disposes of it with a sigh.
			(now) (#biscuitpack is nowhere)
		(endif)
	(elseif) (introduction finished) (#sandwich is handled) (then) %% The intro is done! And the player has stolen her sandwich already
		(now) (#biscuit is #on #table) %% So she gets another biscuit
		(if) (#biscuit is pristine) (then) %% First time
			Now bereft of her sandwich, she pulls a biscuit from a pack.
		(endif)
	(endif)

(constable has reached $Room)
	Davis looks around (the $Room) for anything amiss, and finds nothing.
	(now) (constable target #diningroom)

%% And avoid her being interrupted by other actions
(prevent [give (evidence $Obj) to #davis])
	~(#davis is #on #davischair)
	Watson tries to present (the $Obj) to Davis, but she's too focused on her task to realise the significance of the evidence. Best to try that when she's sitting down.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Book 7 - Actions and Mechanics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% RECALL OBJ to remind you about people and objects

(grammar [recall/remember [any]] for [recall $])
(grammar [think about [any]] for [recall $])

~(refuse [recall $]) %% Don't require touchability!

%% ~(very unlikely [recall $]) %% Don't disprefer rooms - removed this line because it's effectively a (just) and that's bad, we make everything very unlikely anyway
(very very unlikely [recall (door $Obj)]) %% But do disprefer nonlocal doors
	(current room $Room) ~($Obj is in room $Room)
(very very unlikely [recall $Obj]) %% And things in unvisited rooms
	($Obj is in room $Room) ($Room is unvisited)
(very very unlikely [recall (background $Obj)]) %% And backdrops
(very unlikely [recall $]) %% And don't make NORTH disambiguate

(perform [recall (animate $Obj)])
	(descr $Obj)
	(if) ($Obj is in room $Room) (then)
		(if) ~(current room $Room) (then)
			(par) Currently, (it $Obj) should be in (status-link-the $Room).
		(endif)
	(elseif) ~($Obj is one of [#macaulay #elisabeth]) (then) %% The "unfortunately" message isn't really appropriate for the strangers; I could add a new predicate for it, but with so few of them it's easier to just check explicitly
		(par) Unfortunately, (it $Obj) (isn't $Obj) anywhere near your house at the moment.
	(endif)

%% Hacky but it works at this point
(go-to link (your $Room))
	(collect words)
		(name $Room)
	(into $Name)
	(link [go to my | $Name]) { go to your (name $Room) }
(go-to link $Room)
	(link) { go to (the $Room) }

(perform [recall (room $Room)])
	(current room $Start)
	(if) (shortest path from $Start to $Room is $Route) (then)
		To (go-to link $Room) (no space), you would go (link) (listing $Route {(name $_)} @then [] 0) .
	(else)
		You don't have a clear path to (the $Room) at the moment—some doors will need to be opened first.
	(endif)

(perform [recall (background $Obj)]) %% For local backgrounds, just examine them
	(current room $Room)
	($Room attracts $Obj)
	(descr $Obj)

(perform [recall $Obj])
	($Obj is in room $Room)
	(if) (current room $Room) (then)
		(The $Obj) (is $Obj) right here.
	(elseif) ($Room is visited) (then)
		You last saw (the $Obj) in (the $Room).
	(else)
		If you remember right, (the $Obj) should be in (status-link-the $Room).
	(endif)

(perform [recall $Obj]) %% If it's off-stage
	You can't recall where (the $Obj) would be now.

%% Meta commands

%% HELP

(help item $Text)
	(if) (interpreter supports inline status bar) (then) %% Hacky way of testing if it supports CSS
		(div @listitem) { (bullet) (query $Text) }
	(else)
		(div @listitem) { (space 4) (query $Text) }
	(endif)

(grammar [help/commands/verbs] for [help])
(command [help])
(perform [help])
	(div @meta) {
		As a ghost, you're very limited in what you can do yourself: you can (link) LOOK , EXAMINE \( X \) things, or RECALL people. You might also find it useful to LOOK in a direction, appraise the (link) EXITS of the room \( or the overall (link) MAP \) , or LOOK THROUGH transparent things.
		(par)
		For anything else, you have to rely on Watson. He can:
		(help item {TAKE, DROP, and THROW things, or show you what he has with (link) INVENTORY})
		(help item {PUSH, PULL, OPEN, CLOSE, GET ON, GET IN, and GET OUT OF things})
		(help item {LOOK IN/ON/UNDER/BEHIND things, or PUT things IN/ON/UNDER/BEHIND something else})
		(help item {Move in any compass direction \( (link) N , (link) NE , (link) E , (link) SE , (link) S , (link) SW , (link) W , (link) NW \), or (link) UP or (link) DOWN})
		(help item {GO TO a specific room, or FIND a particular thing, if there's a clear path})
		(help item {(link) LISTEN , (link) FEEL , and (link) SMELL , either a specific thing or in general})
		(help item {BITE, EAT, or DRINK things, within reason})
		(help item {(link) BARK , (link) WAVE, KISS people, and GIVE \( or SHOW \) things TO them})
		Along with various other tricks—he's a talented dog!
		(par)
		Outside of the game, you can use (link) UNDO to take back your last action, (link) SAVE and (link) RESTORE to save your progress, and (link) ABOUT to see some information about this game. (link) SCORE will show how many points you have, what you've earned points for, and what you should be working on next. (link) SETTINGS will let you adjust the game to your liking.
		(if) (interpreter supports links) (then)
			(par)
			You're playing in an interpreter that supports links, so you can navigate the game either by typing in commands, or by clicking links in the text. Click the name of an object to examine it, and see what other actions might be useful. %% Most of the game can be completed with links alone, but there are a few particular places where you'll need to type a command.
		(endif)
		(par)
		If you're not sure where to go next, you can (link) THINK for guidance, or ask for a (link) HINT or a (link) MAP .
	}

%% HELP WITH LINKS
%% This isn't an action I expect anyone to type, but it's the result of clicking the "help" link in the top bar, giving help about how to use the link interface instead of the parser one

(understand command [help with links])
(prevent [help with links])
	~(interpreter supports links)
	(div @meta) {
		Hyperlinks are currently disabled, or your interpreter doesn't support them. Make sure you're using the web interpreter, and have links enabled in the menu in the top right.
	}
(perform [help with links])
	(div @meta) {
		As a ghost, you're very limited in what you can do yourself: you can (link) look at your surroundings, then click the name of something \(like (link) Watson \) to examine it. (par)
		Once you've examined something, the gray bar at the bottom of the screen will suggest the different things Watson can do with it. If he's holding something in his mouth, it will be listed down there too. (par)
		(if) ~(link bar enabled) (then)
			(emph {Though the link bar is currently disabled! Use (link) {links on} to enable it again.}) (par)
		(endif)
		You've also taught him to navigate via compass directions, and perform various other minor tricks, like "(no space) (link) bark (no space)" and "(no space) (link) {roll over} (no space)". (par)
		The links at the top of the screen control the program itself, letting you (link) undo your last action, (link) save your progress, and so on. The "(no space) (link) think (no space)" option will tell you what puzzles you've solved and what you should be working on next. (par)
		Finally, you aren't limited to the linked options: you can type your own commands at any time, and switch back and forth between them whenever you want. For some guidance on what commands might work, type HELP.
	}

%% HINT

(grammar [hint/hints] for [hints])
(command [hints])
(perform [hints])
	(if) (interpreter supports links) (then)
		(div @meta) {
			(link resource @hints) {Hint file}
		}
	(else)
		(div @meta) {
			See the file "hints.html" in the download.
		}
	(endif)

%% ABOUT

(grammar [about/info/credit/credits] for [about])
(command [about])
(perform [about])
	This game is dedicated to my grandmother, the late Nancy Mead, who gave me the idea while watching late-night murder mysteries together after a long day at a conference. Most of the house in this game is directly based on hers.
	(par)
	Tested by:
		(help item {Round 1: Exemptus, jkj yuio, Robert Eggleston, Garry Francis, Justin Kim})
		(help item {Round 2: Jeffery Wright, Mel Jason, Robert Eggleston, Jade, Tabitha, Ada and Sarah Stelzer})
		(help item {Round 3: Tabitha, Peter Mattsson, AM Ruf, Umbra, Matt, Andrew Schultz, Daniel E. Gaskell})
		(help item {Round 4: Winston Greene III, Aiden and Vee, Larch Faraji})
	It's thanks to them that this game is at all playable!
	%% Metapuzzle: Aiden and Vee hints at THE DEN, Winston Greene III hints at Winter-Over, Larch Faraji hints at BOSH: Bureau of Strange Happenings
	%% See secrets.dg
	(par)
	Please report any issues to Draconis on (link resource @forum) {intfiction.org}, or to (link resource @email) {dsdraco7\@gmail.com}!

%% TUTORIAL OFF

(understand command [tutorial off])
(perform [tutorial off])
	(div @tutorial) {
		The tutorial is now off. If you run into any issues, you can always ask for
		(if) (interpreter supports links) (then)
			(link [help with links]) help
		(else)
			(span @fixed) HELP
		(endif)
		. (par) If you also want to disable the red hint notifications, use (link) { HINTS OFF } .
	}
	(now) (tutorial is finished)

%% FREEDOM - to bypass the intro

(understand command [freedom])
(perform [freedom])
	Ending opening cutscene. (line)
	(finish the cutscene)
	Ending tutorial. (line)
	(now) (tutorial is finished)
	Ending escape sequence. (line)
	(now) ~(player is imprisoned)
	Ending search sequence. (line)
	(exhaust) *(end the introduction)
	Done! (par)

%% LINK BAR ON/OFF

(understand command [link bar on])
(perform [link bar on])
	(now) (link bar enabled)
	(div @meta) {
		Link bar enabled.
		(if) ~{ (interpreter supports links) (interpreter supports inline status bar) } (then)
			Your interpreter may not support it, though.
		(endif)
	}

(understand command [link bar off])
(perform [link bar off])
	(now) ~(link bar enabled)
	(div @meta) { Link bar disabled. }

%% STATUS ON/OFF

(understand command [status on])
(perform [status on])
	(now) (status bar enabled)
	(div @meta) {
		Status bar enabled.
		(if) ~(interpreter supports status bar) (then)
			Your interpreter may not support it, though.
		(endif)
	}

(understand command [status off])
(perform [status off])
	(now) ~(status bar enabled)
	(div @meta) { Status bar disabled. }

%% HINTS ON/OFF

(understand command [hints on])
(perform [hints on])
	(now) (hints enabled)
	(div @meta) { Hint notifications enabled. }

(understand command [hints off])
(perform [hints off])
	(now) ~(hints enabled)
	(div @meta) { Hint notifications disabled. }

%% SETTINGS

(understand command [settings])
(perform [settings])
	(div @meta) {
		The link bar \( the gray box of links at the bottom \) is currently
		(if) (link bar enabled) (then)
			on. Use (link) {LINK BAR OFF} to disable it.
		(else)
			off. Use (link) {LINK BAR ON} to enable it.
		(endif)
		(if) ~(interpreter supports inline status bar) (or) ~(interpreter supports links) (then)
			Your interpreter doesn't seem to support it, so best to leave it off.
		(endif)
		(par)
		
		The status bar \( the line at the top showing where you are \) is currently
		(if) (link bar enabled) (then)
			on. Use (link) {STATUS OFF} to disable it. If you're using a screen reader, you'll want to do this.
		(else)
			off. Use (link) {STATUS ON} to enable it.
		(endif)
		(if) ~(interpreter supports status bar) (then)
			Your interpreter doesn't seem to support it, so best to keep it off.
		(endif)
		(par)
		
		Score notifications \( the little blue notes telling you when you earn points \) are currently
		(if) (score notifications are on) (then)
			on. Use (link) {NOTIFY OFF} to disable them.
		(else)
			off. Use (link) {NOTIFY ON} to enable them.
		(endif)
		(par)
		
		Hint notifications \( the red boxes nudging you toward puzzles you can solve \) are currently
		(if) (hints enabled) (then)
			on. Use (link) {HINTS OFF} to disable them.
		(else)
			off. Use (link) {HINTS ON} to enable them.
		(endif)
	}

%% Modified scoring - overrides the standard library one

(grammar [full score] for [score])
(grammar [full/goals/think/tasks/turns] for [score])

(perform [score])
	(current score $Score)
	(maximum score $Max)
	(turn count $Turns)
	(div @meta) {
		You currently have $Score
		(if) ($Score = 1) (then) point (else) points (endif)
		out of a maximum of $Max, in $Turns
		(if) ($Turns = 1) (then) turn (else) turns (endif)
		. (par)
		(score details)
	}

(game over option) see your (link) SCORE ,
(parse game over [score/full/turns])
	(perform [score])

%% BYPASS - A hook to hang puzzle bypasses on

(grammar [bypass [any]] for [bypass $])
(command [bypass $])
(unlikely [bypass $Obj]) %% Prefer things in scope, but don't forbid other things
	~(player can see $Obj)
~(refuse [bypass $]) %% Don't require touchability
(perform [bypass $Obj])
	(div @meta) { Don't know how to bypass $Obj. Sorry! }

%% The general case for throwing things down the stairs, put here so that it comes after any specific rules

(send $Obj down the stairs)
	(It $Obj) plummet(s $Obj) to the ground below.
	(if) (#mattress is #in #b-stairs) (then)
		(now) ($Obj is #on #mattress)
	(else)
		(now) ($Obj is #in #b-stairs)
	(endif)

%% DISGUST - a general action for things that would gross a human out

(grammar [poop/shit/crap/pee/piss/urinate/defecate/vomit] for [disgust])
(grammar [poop/shit/crap/pee/piss/urinate/defecate/vomit [on at] [single]] for [disgust $])
(grammar [disgust] for [disgust])
(grammar [disgust [single]] for [disgust $])
(grammar [throw up] for [disgust])
(grammar [throw up [on at] [single]] for [disgust])

(perform [disgust $]) %% Whatever you chose doesn't really matter
	(try [disgust])

(perform [disgust])
	Watson looks up at you, wagging happily. He knows this trick by now: this is (emph {not}) the place to do that, so he shouldn't, even if you tell him to.
	(tick) (stop)

%% DIG - only useful in the attic

(grammar [dig [single]] for [dig $])
(grammar [dig in/up/through/under [single]] for [dig $])
(grammar [dig] for itself)

(perform [dig])
	Watson looks up at you happily, not falling for this trap. He knows very well he's not allowed to dig here.
	(tick) (stop)

(perform [dig $Obj])
	Watson looks up at you happily, not falling for this trap. He knows very well he's not allowed to dig at (the $Obj).
	(tick) (stop)

%% Useful only in the attic and in the metapuzzle

%% XYZZY

(grammar [xyzzy/plugh] for [xyzzy])

(perform [xyzzy]) %% An easter egg, but also useful for the walkthrough (since this part is all randomised)
	(current room #garden-c)
	(target flower $Flower)
	($Flower is in room $Room)
	(from #garden-c go $Dir to $Room)
	As you speak the word, you feel a strange sensation pulling you (name $Dir)...
	(try [go $Dir])

(perform [xyzzy]) %% Likewise
	(maze outward direction $Dir)
	As you speak the word, you feel a strange sensation pulling you (name $Dir)...
	(try [go $Dir])

(perform [xyzzy]) %% Likewise
	(maze inward direction $Dir)
	As you speak the word, you feel a strange sensation pulling you (name $Dir)...
	(try [go $Dir])

(perform [xyzzy])
	That's that "magic word" Nigel was on about, from some new game he found? You don't understand any of it, really, but he seems to enjoy it at least.

%% MAP

(understand command [map])

(perform [map])
	(if) (interpreter can embed @map) (then) %% Web interpreter
		(embed resource @map)
		(if) (interpreter supports links) (then)
			(div @meta) { (link resource @map) { Click here to enlarge } }
		(else)
			(div @meta) { To see a larger map, open the image in a new tab. }
		(endif)
	(else)
		(div @meta) { This interpreter doesn't support embedded images—see the file (link resource @map) { resources/map.png } in the download. }
	(endif)

%% ROLL OVER

(grammar [roll over] for itself)
(grammar [rollover] for [roll over])
(grammar [lie down] for [roll over])

(perform [roll over])
	Watson flops down and rolls onto his back, exposing his tummy to be pet. Unfortunately, no pets seem to be forthcoming.

%% WAG TAIL

(grammar [wag] for itself)
(understand [wag | $Rest] as [wag])
	($Rest is a subset of [tail your his])
(describe action [wag]) wag his tail

(perform [wag])
	Watson wags his tail even faster for you, panting happily.

%% SHAKE

(grammar [shake] for itself)
(understand [shake | $Rest] as [shake])
	($Rest is a subset of [my your his hand hands paw paws])
(describe action [shake]) shake hands

(perform [shake])
	Watson sits up and offers you a paw. His ears droop a bit when you can't take it, and he settles back down.

%% HINT OBJ

%% For people playing on the Z-machine without links
(grammar [hint/help [single]] for [hint $])
(command [hint $])

(perform [hint $Obj])
	(div @meta) {
		For (the $Obj), you could:
		(link action [examine $] with $Obj) %% Not shown in the link bar because usually you've already examined something to make it appear there
		(exhaust) *(link viable actions for $Obj)
	}

%% DIRTEST

(understand command [dirtest])
(perform [dirtest])
	TESTING ROOM PROPERTIES..... (line)
	(exhaust) {
		*(object $Start)
		{ *(from $Start go $Dir to $Dest) (or) *(from $Start through $Dir to $Dest) }
		~(room $Dest)
		~(direction $Dest)
		~(door $Dest)
		From $Start go $Dir to $Dest, but $Dest is not a room! (line)
	}
	(par)

%% OBJLIST

(understand command [objlist]) %% Print a list of internal object identifiers
(perform [objlist])
	(exhaust) {
		*(object $Obj)
		$Obj
		(space)
	}

%% OFFSTAGE

(understand command [offstage])
(perform [offstage])
	Off-stage objects: (line)
	(exhaust) {
		*(object $Obj)
		~(room $Obj)
		~(direction $Obj)
		~(relation $Obj)
		($Obj is nowhere)
		~(attracted somewhere $Obj)
		(the $Obj) (line)
	}
	(par)

(attracted somewhere $Obj) %% Because the first param of ($ attracts $) must be bound
	*(room $Room)
	($Room attracts $Obj)

%% DICTTEST to test the dictionary

(understand command [dicttest])
(perform [dicttest])
	(exhaust) {
		*(object $Obj)
		(collect words)
			(dict $Obj)
		(into $Words)
		*($Word is one of $Words)
		(split word $Word into $Chars)
		($Chars contains quotes or apostrophes)
		(line) (the $Obj) : $Word
	}

($Chars contains quotes or apostrophes)
	(@' is one of $Chars) (or) (@" is one of $Chars)

%% GOLDTEST to test the gold box

(understand command [goldtest])
(perform [goldtest])
	(div @gold) {
		Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed purus lectus, semper nec luctus eget, pellentesque non purus. Praesent magna purus, tincidunt porta lobortis quis, eleifend et arcu. Aenean sagittis neque non velit finibus efficitur. Suspendisse convallis, elit vel condimentum scelerisque, ex quam tincidunt nisi, porta luctus odio magna sit amet nisl. Etiam consectetur molestie dictum. Aliquam in rutrum nisi. Quisque tristique erat ac elit vulputate laoreet. Fusce in orci arcu. Vestibulum efficitur ultrices placerat. Etiam dictum pharetra venenatis. Nullam ut tellus pretium, bibendum massa id, mollis nisl.
		(par)
		(link) { Link link link } . (emph {Italic}) (strong {bold}).
	}

%% HINTTEST similarly

(understand command [hinttest])
(perform [hinttest])
	(div @hint) {
		Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed purus lectus, semper nec luctus eget, pellentesque non purus. Praesent magna purus, tincidunt porta lobortis quis, eleifend et arcu.
	}

%% WHINE - this one's just silly

(grammar [whine] for itself)
(grammar [whine at [single]] for [whine at $])

(perform [whine at $])
	(try [whine])

(perform [whine])
	Watson looks up at you with a sad little whine. He has no idea how to "whine".
	(par) You try to give plenty of positive feedback, but without the clicker, you doubt he's really internalizing this new trick.

%% PANT similarly

(grammar [pant] for itself)
(grammar [pant happily] for [pant])

(perform [pant])
	Watson looks up at you, panting happily, no comprehension in his eyes.
	(par) You try to give plenty of positive feedback, but without the clicker, you doubt he's really internalizing this new trick.

%% And just some flavor
%% HOWL and GROWL (at)

(grammar [howl/growl] for [howl])
(grammar [howl/growl at [single]] for [howl at $])

(perform [howl at $])
	(try [howl])

(prevent [howl])
	(when we are holding something)

(perform [howl])
	(try [bark])
	(par) Not quite the sound you were hoping for, but it (emph {was}) impressively loud, at least.
%% We can start and stop italics freely, but I want something akin to LaTeX's
%% \emph, which italicises or un-italicises a passage depending on the context.

(emph-start)
	(now) (italicised)
	(italic)

(emph-end)
	(now) ~(italicised)
	(unstyle)

(emph-toggle)
	(if) (italicised) (then)
		(emph-end)
	(else)
		(emph-start)
	(endif)

(emph $Inner)
	(emph-toggle)
	{ (query $Inner) (or) } %% Make sure it doesn't fail
	(emph-toggle)

(strong $Inner) %% Right now just a thin wrapper around (span @bold)
	(span @bold) { (query $Inner) (or) }

%% Dialog by default never describes pristine things.
%% But it would be convenient if it did!
%% So like in Inform, (initial appearance $) is used only as long as it's pristine

(appearance ($Obj is pristine))
	(initial appearance $Obj)

(initial appearance $) %% Default to failure if not defined
	(fail) %% (This just avoids a compiler warning if the author doesn't use it)

%% Shuffle a list - something the standard library doesn't handle

(shuffle [] into [])
(shuffle [$Single] into [$Single])
(shuffle $Old into [$Chosen | $More] )
	(length of $Old into $Length)
	(random from 1 to $Length into $N)
	(pop item $N from $Old into $Chosen and $Remains)
	(shuffle $Remains into $More)

%% Pop an item from a list, returning the item and the list without it
%% This is implemented very much like (nth $ $ $)
%% except that it also returns the shortened list

(pop item 1 from [$Head|$List] into $Head and $List)
(pop item $N from [$Head|$List] into $Element and [$Head|$New])
	($N minus 1 into $Nm1)
	(pop item $Nm1 from $List into $Element and $New)

%% Check if one list is a subset of another

([] is a subset of $)
([$Head|$Tail] is a subset of $List)
	($Head is one of $List)
	($Tail is a subset of $List)

%% Add an (on every tick) variation for being in the presence of a person (or any object really)

(on every tick)
	(current room $Room)
	(exhaust){
		*($Obj has ancestor $Room)
		(on every tick in the presence of $Obj) %% Note that this is _not_ a multi-query: each object only gets to print one paragraph!
		(par)
	}

%% Add a "test" command, like in Inform

(understand [test $Word] as [test $Word]) %% TEST followed by one dictionary word
(command [test $])
(perform [test $Keyword])
	(test $Keyword with inputs $List)
	(execute input list $List)
(perform [test $Keyword])
	"(no space) $Keyword (no space)" is not a recognised test suite.

(test @testing with inputs [[z]])

(understand command [tests])
(perform [tests])
	(collect $Keyword)
		*(test $Keyword with inputs $)
	(into $List)
	(length of $List into $Length)
	$Length test\(s\):
	(print words $List)

%% An experiment: an inline status bar like in Impossible Bottle

(manipulable $) (fail) %% Should we recommend PUSH/PULL on this, even if it's not pushable or on a supporter?
(biteable $) (fail) %% Should we recommend BITE on this, even if it's not edible?

(bullet)
	(space) - (space)

%% Acts like (the $) except looks better in links
(linking-the (your $Obj))
	my (name $Obj)
(linking-the $Obj)
	(the $Obj)

%% And for the object name itself
(status-link-the (your $Obj))
	(collect words)
		my (name $Obj)
	(into $List)
	(link $List) { your (name $Obj) }
(status-link-the $Obj)
	(link) (the $Obj)

%% See statusbar.txt for how this is supposed to be laid out
%% We have one line for Watson, looking around, and innate capabilities
%% Then we have one line for exits
%% And finally, one line for the most recently named object, and its viable actions

(inline status element)
	(div @barpar) {
		(span @bold) { (link) look }
		(if) ~(player can see) (then) %% Add (listen, smell) if in darkness)
			\(
			(link) listen ,
			(link) smell
			\)
		(endif)
		(bullet) (link) Watson
		(if) (held $Obj) (then)
			(bullet) holding (status-link-the $Obj)
		(endif)
		(if) (#watson is $Rel $Obj) ~(room $Obj) (then)
			(bullet) (name $Rel) (status-link-the $Obj)
			(if) ($Rel = #on) (then)
				\( (link) {get down} \)
			(else)
				\( (link) {get out} \)
			(endif)
		(endif)
%%		(link) dig (bullet) %% Moved down to the dog trick actions
%%		(link) jump (bullet)
%%		(link) speak
	}

(inline status element) %% Next, the GO menu
	(current room $Room)
	(div @barpar) {
		(span @bold) { (link) go }
		(exhaust) {
			*(direction $Dir) %% Ensure a consistent ordering by querying this first
			(from $Room go $Dir to $Target)
			(if) (room $Target) (then) %% Simple map connection, just give the direction
				(bullet) (link) (name $Dir)
			(elseif) (door $Target) ($Target is in scope) (then)
				(if) ($Target blocks passage) (then) %% Closed door, link the door, not the direction
					(bullet) (name $Dir) \( (status-link-the $Target) \)
				(else) %% Open door, link the direction and don't mention the door again
					(bullet) (link) (name $Dir)
				(endif)
			(endif)
		}
	}

(global variable (last named object $)) %% Need to modify (notice player's $) and (forget pronouns out of scope) to update this, this has been done in doglib.dg
(update last named object to $Obj)
%%	(div @meta) {Updating last named object to (the $Obj)}
	(now) (last named object $Obj)
	(if) ~($Obj is in scope) (then)
		(now) (selected out of scope object)
	(else)
		(now) ~(selected out of scope object)
	(endif)
(check scope of last named object)
	(if) (last named object $Obj) ~($Obj is in scope) (then)
		(if) (selected out of scope object) (then) %% Player specifically requested this
			(now) ~(selected out of scope object) %% But only for one turn
		(else)
			(now) ~(last named object $)
		(endif)
	(endif)

(inline status element) %% Finally, the most recently named object
	(last named object $Obj) %% This is the general case when it's in scope and not you
	~($Obj = #watson) %% Handled by a separate rule
	($Obj is in scope) %% Also handled by a separate rule
	(div @barpar) {
		(span @bold) (status-link-the $Obj)
		(exhaust) *(link viable actions for $Obj)
	}

(inline status element) %% Separate one for if they're out of scope, from RECALL
	(last named object $Obj)
	~($Obj is in scope)
	(div @barpar) {
		(span @bold) (status-link-the $Obj)
		(exhaust) *(link out of scope actions for $Obj)
	}

(inline status element) %% And if it's Watson
	(last named object #watson)
	(div @barpar) {
		(span @bold) { (link) Watson }
		(exhaust) *(link dog trick actions)
	}

(held $Obj)
	(current player $Player)
	($Obj is #heldby $Player)

%% splice list [b c] into [a $ d] to make [a b c d]
(splice list $Inner into [(bound $Head) | $Tail] to make [$Head | $NewTail])
	(splice list $Inner into $Tail to make $NewTail)

(splice list $Inner into [$ | $Tail] to make $Out)
	(append $Inner $Tail $Out)

(link action $Action with $Obj phrased as $Text) %% [take $] #apple -> take apple, take it
	(if) (object $Obj) (then)
		(collect words)
			(linking-the $Obj)
		(into $Noun)
	(else)
		($Noun = [something])
	(endif)
	(splice list $Noun into $Action to make $Link)
	(if) (empty $Text) (then)
		(if) (object $Obj) (then)
			(collect words)
				(them $Obj)
			(into $Pronoun)
		(else)
			($Pronoun = [something])
		(endif)
		(splice list $Pronoun into $Action to make $Words)
		(fully bound $Words) %% Avoid compiler warnings
		(link $Link) (print words $Words)
	(else)
		(link $Link) (query $Text)
	(endif)

(link action $Action with $Obj) %% Convenience for when we don't want to override the printing
	(bullet) (link action $Action with $Obj phrased as []) %% We add a bullet in this case

(link viable actions for $Obj)
	(item $Obj)
	~(held $Obj)
	(link action [take $] with $Obj)

(link viable actions for $Obj)
	(held $Obj)
	(link action [drop $] with $Obj)

(link viable actions for $Obj)
	(held $Obj)
	(link action [throw $] with $Obj)

(link viable actions for $Obj)
%%	(held $Obj)
	(edible $Obj)
	(link action [eat $] with $Obj)

(link viable actions for $Obj)
	(potable $Obj)
	(link action [drink $] with $Obj)

(link viable actions for $Obj)
	{ (held $Obj) (or) ~(item $Obj) }
	(biteable $Obj)
	(link action [bite $] with $Obj)

(link viable actions for $Obj)
	(actor container $Obj)
	(current player $Player)
	~($Player is #in $Obj)
	(bullet) (link action [get in $] with $Obj phrased as {get in})

(link viable actions for $Obj)
	(actor supporter $Obj)
	(current player $Player)
	~($Player is #on $Obj)
	(current room $Room)
	(if) ($Obj is in room $Room) (then)
		(link action [jump on $] with $Obj)
	(else)
		(link action [jump to $] with $Obj)
	(endif)

(link viable actions for $Obj)
	(openable $Obj)
	($Obj is closed)
	(link action [open $] with $Obj)

(link viable actions for $Obj)
	(openable $Obj)
	($Obj is open)
	(link action [close $] with $Obj)

(link viable actions for $Obj)
	(door $Obj)
	(bullet) (link action [go through $] with $Obj phrased as {go through})

(link viable actions for $Obj)
	(switchable $Obj)
	($Obj is off)
	(link action [turn $ on] with $Obj)

(link viable actions for $Obj)
	(switchable $Obj)
	($Obj is on)
	(link action [turn $ off] with $Obj)

(link viable actions for $Obj)
%%	{ (legible $Obj) (or) (read to examine $Obj) } %% I don't love having separate (legible $) and (printing $) predicates that both have to be set, but I can't see a better way to do it
	(legible $Obj) %% Testing
	(link action [read $] with $Obj)

(link viable actions for $Obj) %% This is the most complicated one: PUT
	%% Made less complicated by some help from nephar on the forums!
	(held $Obj)
	(collect $Rel)
		*(relation $Rel)
		(something accepts $Rel)
	(into [$First | $Rest])
	%% If there are no viable relations, that will fail
	(construct link to put $Obj $First [] 1)
	(if) ($Rest = [$Second]) (then) %% Only one more, phrase it as (or REL) instead of (REL, REL)
		\( or (construct link to put $Obj $Second [] 0) \)
	(elseif) (nonempty $Rest) (then) %% More than one more
		\(
		(comma-listing {(construct link to put $Obj $_ [] 0)} for $Rest)
		%% This calls the query for each element of the list, with commas in between
		\)
	(endif)
	something

(something accepts $Rel) %% Once again, making it a separate predicate to avoid a multi-query
	*($Other is in scope)
	~(room $Other) %% Rooms always accept #in and are also always in scope
	($Other accepts $Rel)
%%	(div @meta) { DEBUG: (the $Other) accepts (name $Rel) }

(link viable actions for $Obj) %% And vice versa, to put things REL the object
	(collect $Rel)
		*(relation $Rel)
		($Obj accepts $Rel)
	(into [$First | $Rest])
	%% Again, if there are no viable relations, that unification fails
	
	%% This is a gross hack, but I can't find a better way
	%% If $Rest is empty, we want to include the (them $Obj) output in the link
	%% Otherwise, we don't
	%% So setting $Full to 2 indicates that we should remove the pronoun
	(if) ($Rest = []) (then)
		($Full = 1)
	(else)
		($Full = 2)
	(endif)
	
	(construct link to put [] $First $Obj $Full)
	(if) ($Rest = [$Second]) (then) %% Only one more, phrase it as (or REL) instead of (REL, REL)
		\( or
		(construct link to put [] $Second $Obj 0)
		\)
		(them $Obj)
	(elseif) (nonempty $Rest) (then) %% More than one more
		\(
		(comma-listing {(construct link to put [] $_ $Obj 0)} for $Rest)
		%% This calls the query for each element of the list, with commas in between
		\)
		(them $Obj)
	(endif)

%% The listing code in doglib.dg is overkill for this, we just need commas
(comma-listing $ for [])
(comma-listing $Closure for [$Single])
	(query $Closure $Single)
(comma-listing $Closure for [$Head | $Rest])
	(query $Closure $Head)
	,
	(comma-listing $Closure for $Rest)

%% This is complicated enough to deserve its own predicate
%% It creates a link for PUT FIRST REL SECOND, and if $Full=1 it prints that actual text, otherwise it just prints REL
(construct link to put $First $Rel $Second $Full)
	(collect words) %% Get the single dictionary word that represents this relation
		(name $Rel)
	(into [$Single]) %% All relations in this standard library that are viable for PUT (in/on/under/behind) have one-word names so this won't fail
	
	%% We can use this for either the first noun or the second
	(if) ($Second = []) (then)
		($Action = [put $ $Single])
		($Obj = $First)
	(else)
		($Action = [put something $Single $])
		($Obj = $Second)
	(endif)
	
	(if) ($Full = 1) (then)
		(link action $Action with $Obj)
	(elseif) ($Full = 2) (then) %% Can't find a more elegant way to do this - setting $Full to 2 is the way to indicate the pronoun shouldn't be included in the output
		(bullet) (link action $Action with $Obj phrased as {put something $Single})
	(else)
		(link action $Action with $Obj phrased as {$Single})
	(endif)

(link viable actions for $Obj) %% SEARCH for on/in, even if it's an item
	{(container $Obj) (or) (supporter $Obj)}
	(link action [search $] with $Obj)
(link viable actions for $Obj) %% LOOK for under/behind
	($Obj accepts #under)
	(link action [look under $] with $Obj)
(link viable actions for $Obj)
	($Obj accepts #behind)
	(link action [look behind $] with $Obj)

(link viable actions for $Obj) %% PULL isn't really needed but PUSH is
	~(held $Obj)
	($Obj deserves pushing)
	(link action [push $] with $Obj)

($Obj deserves pushing) %% Making this a separate predicate so we can single-query it and avoid the (exhaust) printing multiple times
	($Obj is #on $) (or) (pushable $Obj) (or) (manipulable $Obj)

(link viable actions for $Obj)
	(held $Obj)
	(collect $Other)
		*($Other is in scope)
		(animate $Other)
		~(current player $Other)
		~($Other = #watson)
	(into $OtherList)
	(nonempty $OtherList) %% Don't bother if there's nobody at all
	(if) ($OtherList = [$Single]) (then) %% Only one person, make a more elaborate link
		(collect words)
			(linking-the $Obj)
		(into $First)
		(collect words)
			(linking-the $Single)
		(into $Second)
		(splice list $First into [show $ to $] to make $Intermediate)
		(splice list $Second into $Intermediate to make $Final)
		(bullet) (link $Final) { show (them $Obj) to (the $Single) }
	(else) %% Just use SHOW $, it'll ask the player to disambiguate
		(link action [show $] with $Obj)
	(endif)

(link viable actions for $Obj)
	(animate $Obj)
	(link action [kiss $] with $Obj)

(link viable actions for $Obj)
	(animate $Obj)
	(link action [show something to $] with $Obj)

%% Game-specific actions

(link viable actions for $Obj)
	{ (garden view $Obj) (or) (bottle $Obj) }
	(link action [look through $] with $Obj)

(link viable actions for $Obj)
	{ ($Obj = #recorder) (or) ($Obj is #partof #recorder) } %% Show these even if the examined object is a button instead of the recorder itself
	(bullet) (link [push off]) OFF
	(bullet) (link [push rec]) REC
	(bullet) (link [push play]) PLAY

(link viable actions for #toilet)
	(link action [flush $] with #toilet)

(link viable actions for $Obj)
	{ (shaft $Obj) (or) ($Obj = #dumbwaiter) }
	(bullet) (link) {push the wheel}

%% Out of scope actions

(link out of scope actions for $Obj) %% Only one thing to do if it's out of scope: either find or go to
	~(room $Obj)
	(link action [find $] with $Obj)

(link out of scope actions for $Obj)
	(room $Obj)
	(link action [go to $] with $Obj)

%% If Watson is the most recently chosen object, give dog tricks instead

(link dog trick actions)
	(bullet) (link) speak

(link dog trick actions)
	(bullet) (link) {roll over}

(link dog trick actions)
	(bullet) (link) shake

(link dog trick actions)
	(bullet) (link) jump

(link dog trick actions)
	(bullet) (link) dig

(link dog trick actions)
	(bullet) (link) {wag tail}

(link dog trick actions)
	(bullet) (link) wave

(link dog trick actions)
	(bullet) (link) dance

(link dog trick actions)
	(bullet) (link) sleep

%% Another experiment: can we make (any key) work with hyperlinks?

(any key or link)
	(if) (interpreter supports links) (then)
		(if) (interpreter supports inline status bar) (then)
			(inline status bar @inlinebar) {
				(div @center) {
					(link []) { Continue }
				}
			}
			(get input $) %% Just wait for a link to be clicked, then continue
			(fleuron)
			(par)
		(else)
			(link []) { \* \* \* }
			(get input $)
		(endif)
	(else)
		(any key)
	(endif)

%% A turn counter, for no real reason

(global variable (turn count 0))

(late on every tick)
	(turn count $Old)
	($Old plus 1 into $New)
	(now) (turn count $New)

%% Util for linking rooms if they've been visited

(link if visited $Room)
	($Room is visited)
	(status-link-the $Room)

(link if visited $Room)
	(the $Room)

%% Experiment: give hints when someone is stuck for a certain period of time

(global variable (hint timer $))
(global variable (hint reason $))

(start hint timer for $Reason)
	(hint reason $Reason) %% Don't start it over again if it's already running
(start hint timer for $Reason)
	(now) (hint timer 0)
	(now) (hint reason $Reason)
%%	(div @meta) { Starting timer for $Reason }

(on every tick)
	(hint reason $Reason)
	(if) (stop hints for $Reason) (then)
		(now) ~(hint reason $)
%%		(div @meta) { Stopping timer for $Reason }
	(else)
		(hint timer $Old)
		($Old plus 1 into $New)
		(now) (hint timer $New)
%%		(div @meta) { Timer for $Reason ticked from $Old to $New }
		(if) (hints enabled) (then)
			(hint for $Reason at $Old turns)
		(endif)
	(endif)

(hint for $ at $ turns) %% Fallback rules
(stop hints for $) (fail)

(hints enabled) %% Start on

(library version)
	Library version 0.46 \( modified \) .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Global variables

%% The following variables may be queried directly from the story, but the
%% library gets confused if you modify them directly with (now). Instead, use
%% the predicates mentioned in the comments:

%% Update with (select player $):
(global variable (current player $))

%% Update with (enter $) or (move player to $ $):
(global variable (current room $))

%% Update with (increase score by $) or (decrease score by $):
%% (global variable (current score $))
%% Calculated dynamically in gosling.dg instead

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Style class declarations

%% These declarations are merely hints to the backend and/or interpreter.

%% Attributes can be ignored based on context. On the Z-machine backend, for
%% instance, 'height' only has an effect on (status bar $) boxes, whereas
%% 'width' and 'float' only affect (div $) boxes that are nested inside a
%% (status bar $) box. The height and width may be specified in em/ch or %.

%% Most of these have been moved to gosling.dg

(style class @bold)
	font-weight: bold;

(style class @italic)
	font-style: italic;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Interface declarations for predicates typically defined in story code

(interface (name $<Obj))
(interface (descr $<Obj))
(interface (appearance $<Obj))
(interface (appearance $<Obj $<Rel $<Loc))
(interface (feel $<Obj))
(interface (room header $<Obj))
(interface (look $<Obj))

(interface (dict $<Obj))
(interface (plural dict $<Obj))
(interface (heads $<Obj))

(interface (from $<Room go $>Dir to $>Obj))
(interface (from $<Room through $>Door to $>Obj))

(interface ($<Room attracts $>Obj))

(interface (maximum score $>Number))

(interface (clarify location of $<Obj))
(interface ($>Obj provides light))
(interface ($<Key unlocks $<Door))

(interface ($<Door blocks passage))
(interface ($<Door blocks light))

(interface (fungible $<Obj1 $<Obj2))

(interface (on every tick in $<Room))

(interface (understand $<Words as $>Action))
(interface (understand $<Words))

(interface (describe action $<Action))
(interface (unlikely $<Action))
(interface (very unlikely $<Action))

(interface (before $<Action))
(interface (refuse $<Action))
(interface (instead of $<Action))
(interface (prevent $<Action))
(interface (perform $<Action))
(interface (after $<Action))

(interface (group-before $<GroupAction))
(interface (group-refuse $<GroupAction))
(interface (group-instead of $<GroupAction))
(interface (group-prevent $<GroupAction))
(interface (group-perform $<GroupAction))
(interface (group-after $<GroupAction))

(interface (narrate taking $<Obj))
(interface (narrate removing $<Obj))
(interface (narrate wearing $<Obj))
(interface (narrate putting $<Obj $<Rel $<Dest))
(interface (narrate dropping $<Obj))
(interface (narrate opening $<Obj))
(interface (narrate closing $<Obj))
(interface (narrate unlocking $<Obj with $<Key))
(interface (narrate locking $<Obj with $<Key))
(interface (narrate switching on $<Obj))
(interface (narrate switching off $<Obj))
(interface (narrate eating $<Obj))
(interface (narrate climbing $<Obj))
(interface (narrate entering $<Obj))
(interface (narrate leaving $<Obj))
(interface (narrate leaving $<Room $<Dir))
(interface (narrate leaving $<Room $<Dir with $<Obj))
(interface (narrate leaving $<Room $<Dir by $<Vehicle))
(interface (narrate failing to look $<Dir))

(interface (describe topic $<Topic))

(interface (default action $<Obj $>Action))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Relations

(relation #in)		%% Note: #in is also a direction
(relation #on)
(relation #partof)
(relation #heldby)
(relation #wornby)
(relation #under)
(relation #behind)

(name #in)		in
(name #on)		on
(name #partof)		part of
(name #heldby)		held by
(name #wornby)		worn by
(name #under)		under
(name #behind)		behind

(Name #partof)		As part of

(interface (present-name $<Rel))

(present-name #in)	inside
(present-name #on)	on top of
(present-name $Rel)	(name $Rel)

(interface (towards-name $<Rel))

(towards-name #in)	into
(towards-name #on)	onto
(towards-name $Rel)	(name $Rel)

(interface (reverse-name $<Rel))

(reverse-name #in)	out of
(reverse-name #on)	off
(reverse-name #partof)	away from
(reverse-name #heldby)	away from
(reverse-name #wornby)	off
(reverse-name #under)	out from under
(reverse-name #behind)	out from behind

(the (relation $Rel))	(name $Rel)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Directions

(interface (opposite of $<Dir1 is $>Dir2))

(interface (present-adverb $<Dir))
(interface (link present-adverb $<Dir))
(interface (from-adverb $<Dir))

#north
(direction *)
(name *)		north
(dict *)		n northern
(opposite of * is #south)

#south
(direction *)
(name *)		south
(dict *)		s southern
(opposite of * is #north)

#east
(direction *)
(name *)		east
(dict *)		e eastern
(opposite of * is #west)

#west
(direction *)
(name *)		west
(dict *)		w western
(opposite of * is #east)

#northeast
(direction *)
(name *)		northeast
(dict *)		ne north-east
(opposite of * is #southwest)

#northwest
(direction *)
(name *)		northwest
(dict *)		nw north-west
(opposite of * is #southeast)

#southwest
(direction *)
(name *)		southwest
(dict *)		sw south-west
(opposite of * is #northeast)

#southeast
(direction *)
(name *)		southeast
(dict *)		se south-east
(opposite of * is #northwest)

#up
(direction *)
(name *)		up
(dict *)		u ceiling sky above upstairs %% Added UPSTAIRS
(present-adverb *)	above
(link present-adverb *) (link) above
(from-adverb *)		above
(opposite of * is #down)

#down
(direction *)
(name *)		down
(dict *)		d below downstairs %% Added DOWNSTAIRS
(present-adverb *)	below
(link present-adverb *) (link) below
(from-adverb *)		below
(opposite of * is #up)

#in			%% Note: #in is also a relation
(direction *)
(present-adverb *)	inside
(link present-adverb *) (link) inside
(from-adverb *)		inside
(opposite of * is #out)

#out
(direction *)
(name *)		out
(dict *)		outside outwards
(present-adverb *)	outside
(link present-adverb *) (link) outside
(opposite of * is #in)

(present-adverb $Dir)	to the (name $Dir)
(link present-adverb $Dir) to the ($Dir)
(from-adverb $Dir)	the (name $Dir)

(proper (direction $))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Common traits and per-object flags

%% Negations

@($Obj is open)			~($Obj is closed)
@($Obj is unlocked)		~($Obj is locked)
@($Obj is on)			~($Obj is off)
@($Obj is revealed)		~($Obj is hidden)
@($Obj is pristine)		~($Obj is handled)
@($Obj is unvisited)		~($Obj is visited)
@($Obj is in order)		~($Obj is broken)

%% Inheritance relations

(actor container $Obj)		*(room $Obj)
(animate $Obj)			*(female $Obj)
(animate $Obj)			*(male $Obj)
(container $Obj)		*(actor container $Obj)
(item $Obj)			*(wearable $Obj)
(supporter $Obj)		*(actor supporter $Obj)
(excluded from all $Obj)	*(not here $Obj)
(excluded from all $Obj)	*(room $Obj)
(actor container $Obj)		*(in-seat $Obj)
(actor supporter $Obj)		*(on-seat $Obj)
(seat $Obj)			*(in-seat $Obj)
(seat $Obj)			*(on-seat $Obj)
(opaque $Obj)			*(openable $Obj)
(openable $Obj)			*(lockable $Obj)
(plural $Obj)			*(pair $Obj)

%% "Edison's Lament: No switch is ever in the right position."
%% (From "The Grand List Of Console Role Playing Game Clichés")
%% Of course, you can override these defaults on an object-by-object basis:

((openable $) is closed)
((lockable $) is locked)
((switchable $) is off)

%% Convenience predicate:

(interface (reveal $<Obj))

(reveal $Obj)
	(now) ($Obj is revealed)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Rules to prevent compiler warnings

%% The following rule definitions have no effect on the behaviour of the
%% program, but they prevent warnings about undefined predicates. They have
%% zero impact on performance.

%% These are typically static traits:

(an $)			(fail)
(door $)		(fail)
(edible $)		(fail)
(female $)		(fail)
(fine where it is $)	(fail)
(inherently dark $)	(fail)
(item $)		(fail)
(lockable $)		(fail)
(male $)		(fail)
(not here $)		(fail)
(openable $)		(fail)
(out of reach $)	(fail)
(pair $)		(fail)
(potable $)		(fail)
(pushable $)		(fail)
%% (sharp $)		(fail)
(singleton $)		(fail)
(switchable $)		(fail)
(uncountable $)		(fail)
(wearable $)		(fail)
(vehicle $)		(fail)
(your $)		(fail)
(on-seat $)		(fail)
(in-seat $)		(fail)
%% (consultable $)		(fail)
(flammable $)	(fail)

%% New
(ambiguously plural $)	(fail)

%% These typically involve rule bodies with further conditions:

($ provides light)	(fail)

%% These are typically dynamic (i.e. per-object flags):

($ is broken)		(fail)
($ is hidden)		(fail)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Rooms and doors

(name (room $))		location
(room header $Room)	(Name $Room)
(look (room $R))	You are here.

(interface (from $<Room go $>Dir to room $>Obj))

%% Given a room and a direction, what room (if any) is reachable that way?
%% Given a room and a target room, what direction (if any) leads there?

(from $Here go $Dir to room $Room)
	(if) (bound $Room) (then)
		(from $Here go $Dir to $Room)
	(or)
		(from $Here through $Door to $Room)
		(from $Here go $Dir to $Door)
	(else)
		*(from $Here go $Dir to $Target)
		(if) (room $Target) (then)
			($Target = $Room)
		(elseif) (direction $Target) (then)
			(from $Here go $Target to room $Room)
		(else)
			(door $Target)
			~($Target blocks passage)
			(from $Here through $Target to $Room)
		(endif)
	(endif)

(interface (from $<Room go $<Dir to object $>Obj))

%% Given a room and a direction, what object, door and/or room is visible
%% that way? (Usually multi-queried)

(from $Room go $Dir to object $Obj)
	(from $Room go $Dir to $Point)
	(if) (direction $Point) (then)
		*(from $Room go $Point to object $Obj)
	(elseif) (door $Point) (then)
		{
			~($Point blocks light)
			(from $Room through $Point to $Obj)
		(or)
			($Obj = $Point)
		}
	(else)
		($Obj = $Point)
	(endif)

%% (the (current room $))	this location
(the (current room $Room)) the (name $Room) \( where you are \) %% Experiment

(name (door $))		door

($Door blocks passage)
	($Door is closed)

((opaque $Door) blocks light)
	($Door is closed)

@(from $Room go $Dir through $Door to $Target)
	*(from $Room go $Dir to $Door)
	*(from $Room through $Door to $Target)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Access rules

(interface (visibility ceiling of $<Obj is $>Ceil))

(visibility ceiling of $Obj is $Ceil)
	(if) ($Obj has parent $Parent) (then)
		(if)
			(opaque $Parent)
			($Obj has relation $Rel)
			(if) ($Rel = #in) (then)
				($Parent is closed)
			(else)
				($Rel = #under)
			(endif)
		(then)
			($Ceil = $Parent)
		(else)
			(visibility ceiling of $Parent is $Ceil)
		(endif)
	(else)
		($Ceil = $Obj)
	(endif)

(interface (light reaches ceiling $<Ceil))

(light reaches ceiling (room $Ceil))
	~(inherently dark $Ceil)

(light reaches ceiling $Ceil)
	*($Obj provides light)
	(visibility ceiling of $Obj is $Ceil)

(global variable (current scope ceiling $))

(recompute visibility)
	(current player $Player)
	(visibility ceiling of $Player is $Ceil)
	(if) (light reaches ceiling $Ceil) (then)
		(now) (current scope ceiling $Ceil)
		(now) (player can see)
	(else)
		(reachability ceiling of $Player is $RCeil)
		(now) (current scope ceiling $RCeil)
		(now) ~(player can see)
	(endif)

(recompute visibility)
	%% Fallback e.g. if there is no current player.

(interface (player can see $<Obj))

(player can see $Obj)
	(player can see)
	(current scope ceiling $Ceil)
	(if) (room $Obj) ~($Obj = $Ceil) (then)
		(room $Ceil)
		{
			(from $Ceil go $ to $Obj)
		(or)
			(from $Ceil through $Door to $Obj)
			~($Door blocks light)
		}
	(else)
		(visibility ceiling of $Obj is $Ceil)
	(endif)

(interface (reachability ceiling of $<Obj is $>Ceil))

(reachability ceiling of $Obj is $Ceil)
	(if) ($Obj is $Rel $Parent) (then)
		(if)
			($Rel = #in)
			($Parent is closed)
		(or)
			($Rel = #under)
			($Parent is #wornby $Actor)
			~(current player $Actor)
		(then)
			($Ceil = $Parent)
		(else)
			(reachability ceiling of $Parent is $Ceil)
		(endif)
	(else)
		($Ceil = $Obj)
	(endif)

(interface (player can reach $<Obj))

(player can reach $Obj)
	~(out of reach $Obj)
	(current player $Player)
	(reachability ceiling of $Player is $Ceil)
	{
		($Obj = $Ceil)
	(or)
		(reachability ceiling of $Obj is $Ceil)
	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Scope

%% The following predicate can be extended by the game, typically using rules
%% that check certain conditions, e.g. what the current room is:

(interface (add $>Obj to scope))

(add #darkness to scope)
	~(player can see)

%% The default scope is everything that the player can see or reach, plus
%% objects that are marked out of reach but would be reachable otherwise.
%% Instead of querying the predicates defined above, we compute all of this in
%% a single traversal of the object tree, for better performance.

(interface ($>Obj is in scope))

($Obj is in scope)
	*(add $Obj to scope)

($Obj is in scope)
	(current scope ceiling $Ceil)
	(if) (fully bound $Obj) (then)
		(if) (player can see) (then)
			(traverse scope bottom-up $Obj to $Ceil wearer $)
		(else)
			{
				($Obj = $Ceil)
			(or)
				(reachability ceiling of $Obj is $Ceil)
				(reachable in darkness $Obj) %% New - restrict this only to handled items, you can't find anything else in the dark
				%% Which means you can pick up your lamp if you drop it, but can't find hidden doors
			}
		(endif)
	(else)
		{
			($Obj = $Ceil)
		(or)
			*($InCeil is #in $Ceil)
			*(traverse scope top-down $Obj from $InCeil wearer $)
		}
	(endif)

(reachable in darkness $Obj) %% But of course extra rules for this predicate can put other things in scope in the dark
	(item $Obj)
	($Obj is handled)

($Obj is in scope)
	(if) (bound $Obj) (then)
		(room $Obj)
	(endif)
	(player can see)
	(current scope ceiling $Ceil)
	(room $Ceil)
	{
		*(from $Ceil go $ to $Obj)
		(room $Obj)
	(or)
		*(from $Ceil through $Door to $Obj)
		~($Door blocks light)
	}

(interface (traverse scope bottom-up $<Obj to $<Ceil wearer $Wearer))

(traverse scope bottom-up $Ceil to $Ceil wearer $)
(traverse scope bottom-up $Obj to $Ceil wearer $Wearer)
	($Obj is $Rel $Parent)
	(if) ($Rel = #wornby) (then)
		($Parent = $Wearer)
	(endif)
	(if) ($Parent = $Ceil) (then)
		($Rel = #in)
	(elseif) (opaque $Parent) (then)
		(if) ($Rel = #in) (then)
			($Parent is open)
		(elseif) ($Rel = #under) (then)
			(current player $Wearer)
		(endif)
	(endif)
	(traverse scope bottom-up $Parent to $Ceil wearer $Wearer)

(interface (traverse scope top-down $>Obj from $<Ceil wearer $Wearer))

(traverse scope top-down $Obj from $Obj wearer $)
(traverse scope top-down $Output from $Obj wearer $Wearer)
	(if) (opaque $Obj) (then)
		*($Child is $Rel $Obj)
		(if) ($Rel = #in) (then)
			($Obj is open)
		(elseif) ($Rel = #under) (then)
			(current player $Wearer)
		(endif)
	(else)
		*($Child is $Rel $Obj)
	(endif)
	(if) ($Rel = #wornby) (then)
		($Wearer = $Obj)
	(endif)
	*(traverse scope top-down $Output from $Child wearer $Wearer)

#darkness
(name *)	darkness
(dict *)	dark
(singleton *)
(intangible *)
(descr *)	(narrate darkness)

(rebuild scope)
	(update environment around player)
	(forget pronouns out of scope)

%% Debugging predicate:

(interface (scope))

(scope)
	(rebuild scope)
	The current scope is: (line)
	(exhaust) {
		*($Obj is in scope)
		$Obj:
		%% Prevent (the $) from revealing hidden objects
		(if) ($Obj is hidden) (then)
			(the $Obj)
			(now) ($Obj is hidden)
		(else)
			(the $Obj)
		(endif)
		(line)
	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Select player, enter a room or other location, move floating objects

(interface (select player $<Player))

(select player $Player)
	(clear all pronouns)
	(now) (current player $Player)
	(update environment around player)

(interface (move player to $<Rel $<Loc))

(move player to $Rel $Loc)
	(current player $Player)
%%	(current room $Old)
	(now) ($Player is $Rel $Loc)
	(now) (#watson is $Rel $Loc) %% Move Watson when we move the player
	(update environment around player)
%%	(if) ~(current room $Old) (then) %% Only if we moved rooms!
%%		(clear links) %% And get rid of old links that won't work any more
%%	(endif)

(interface (enter $<Room))

(enter $Room)
	(move player to #in $Room)
	(narrate entering $Room)

(interface (enter $<Room by $<Vehicle))

(enter $Room by $Vehicle)
	(now) ($Vehicle is #in $Room)
	(now) ($Vehicle is handled)
	(update environment around player)
	(narrate entering $Room)

(update environment around player)
	(if) (current player $Player) ($Player is in room $Room) (then)
		(now) (current room $Room)
		(exhaust) {
			*($Room attracts $Object)
			(now) ($Object is #in $Room)
		}
		(recompute visibility)
		(now) ($Room is visited) %% Originally also checked (player can see) but we're setting the visited flag even in darkness, because darkness in this game isn't as absolute as usual
	(endif)

(narrate entering (room $))
	(par)
	(try [look])

(narrate entering $Obj)
	Watson launches himself into (the $Obj), and you follow along behind.

(interface (prevent entering $<Obj))

(prevent entering $Obj)
	(when $Obj won't accept actor #in)

(interface (narrate failing to leave $<Obj $<Dir))

(narrate failing to leave $ $Dir)
	Watson turns to look (the $Dir) (no space) ward, then looks back to you with a puzzled whine. He doesn't see any way to go that direction.

%% Extend the following predicate to simulate objects occupying multiple rooms:

($Room attracts $Obj)
	*(from $Room go $ to $Obj)
	~(direction $Obj)
	~(room $Obj)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Standard actions

%% LOOK <dir>

(grammar [examine/x/look/l [direction]] for [look $])

(unlikely [look $])

(prevent [look $])
	~(player can see)
	You can't make out anything in the darkness.

(perform [look $Dir])
	(if)
		(current scope ceiling $Room)
		(room $Room)
		(from $Room go $Dir to $Target)
	(then)
		(if) (direction $Target) (then)
			(try [look $Target])
		(elseif) (door $Target) ~($Target blocks light) (then)
			(from $Room through $Target to $OtherRoom)
			(if) ($OtherRoom is visited) (then)
				Through (the $Target) you see (a $OtherRoom).
				(notice $OtherRoom)
			(else)
				You can't quite make out what's on the other
				side of (the $Target).
				(notice $Target)
			(endif)
	%%	(elseif) (room $Target) ($Target is unvisited) (then)
	%%		You can't get a good view of what's in that direction.
		(else)
			(Name $Dir) from here (is $Target) (a $Target).
			(notice $Target)
		(endif)
	(else)
		(narrate failing to look $Dir)
	(endif)

(narrate failing to look #up)
	You can't make out anything unexpected above.

(narrate failing to look #down)
	You can't make out anything unexpected below.

(narrate failing to look #in)
	It's a bit disconcerting that you can now do that literally.

(narrate failing to look #out)
	You don't see any obvious way out.

(narrate failing to look $)
	You can't make out anything unexpected in that direction.

%% LOOK <rel> <obj>

(grammar [look/l [in inside into through] [single]] for [look #in $])
(grammar [look/l [on upon] [single]] for [look #on $])
(grammar [look/l behind [single]] for [look #behind $])
(grammar [look/l under [single]] for [look #under $])

(unlikely [look #in $Obj])
	~(container $Obj)

(unlikely [look #on $Obj])
	~(supporter $Obj)

%% Reachability not required, but visibility:

(refuse [look $ $Obj])
	(just)
	{
		(when $Obj is not here)
		(or) (when $Obj is out of sight)
	}

(before [look #in (opaque $Obj)])
	($Obj is closed)
	(first try [open $Obj])

(instead of [look #in (current room $)])
	(try [look])

(instead of [look #in $Obj])
	{ (room $Obj) (or) (door $Obj) }
	(current room $Here)
	{
		(from $Here go $Dir to $Obj)
	(or)
		(from $Here through $Door to $Obj)
		(from $Here go $Dir to $Door)
	}
	(direction $Dir)
	(try [look $Dir])

(prevent [look #in $Obj])
	~(container $Obj)
	Watson snuffles at (the $Obj), but there's no room inside (them $Obj).

(prevent [look #in (opaque $Obj)])
	($Obj is closed)
	~(current scope ceiling $Obj)
	(if) (openable $Obj) (then)
		Watson snuffles at (the $Obj), but (it $Obj is) currently closed.
	(else)
		Watson snuffles at (the $Obj), but can't get inside.
	(endif)

(prevent [look #behind (room $Obj)])
	Looking behind (the $Obj) doesn't make sense.

(prevent [look #under $Obj])
	($Obj is #wornby $Actor)
	~(current player $Actor)
	(animate $Actor)
	You've tried to train Watson to search people, but you never found a way to keep it from looking like an attack.

(perform [look $Rel $Obj])
	(collect $C)
		*($C is $Rel $Obj)
		(now) ($C is revealed)
	(into $List)
	(if) (empty $List) (then)
		Watson snuffles around (present-name $Rel) (the $Obj), but turns up nothing.
	(else)
		Watson snuffles around (present-name $Rel) (the $Obj) and turns up (a $List). He looks up at you proudly. (notice $List)
	(endif)

%% FIND <obj>

%% FIND takes the player to the room that currently contains the object.
%% For objects that move around autonomously, it may be a good idea to override
%% this rule, to say e.g. "you don't know where the cat might be right now".
%% Note that floating objects, including doors, will remain in the room where
%% they were last encountered. This will usually put the player on the expected
%% side of doors.

(grammar [find/chase [any]] for [find $]) %% Added CHASE for dog purposes
(grammar [look/l for [any]] for [find $])
(grammar [go to [any]] for [find $]) %% New - for symmetry

(unlikely [find $Obj])
	($Obj is nowhere)

~(refuse [find $])

(prevent [find (not here $Obj)])
	Watson leaps up, ready to search for (the $Obj), then settles back down with a small whine. He has no idea where (it $Obj) (is $Obj).

(prevent [find ($Obj is nowhere)]) %% New - is this needed?
	Watson leaps up, ready to search for (the $Obj), then settles back down with a small whine. He has no idea where (it $Obj) (is $Obj).

(prevent [find $Obj])
	(when $Obj is already held)

(prevent [find $Obj])
	($Obj is in room $Room)
	(current room $Room)
	Watson leaps up and points proudly at (the $Obj), right
	(if) ($Obj is $Rel $Loc) ~(room $Loc) (then)
		(name $Rel) (the $Loc)
	(else)
		at hand
	(endif)
	.

(prevent [find $Obj])
	($Obj is in room $Room)
	(current room $Here)
	~(shortest path from $Here to $Room is $)
	Watson leaps up, ready to search for (the $Obj), then settles back down with a small whine. He can't figure out any way to get to (the $Room)(no space)—some more doors will have to be opened first.

(perform [find $Obj])
	(if) ($Obj is in room $Room) (then)
		Watson leaps up and sprints off in hot pursuit of (the $Obj), heading for (the $Room). (par)
		(try [go to $Room])
	(else)
		Watson leaps up, ready to search for (the $Obj), then settles back down with a small whine. He has no idea where (it $Obj) (is $Obj).
	(endif)

%% EXAMINE <obj>

(grammar [examine/x/watch/describe/check/look/l [object]] for [examine $])
(grammar [look/l at [object]] for [examine $])

(understand [who am i] as [examine $Player])
	(current player $Player)

~(refuse [examine $]) %% No need for reachability.

(instead of [examine (room $Obj)])
	(current room $Here)
	~($Here = $Obj)
	(if)
		(from $Here go $Dir to $Obj)
	(then)
		(try [look $Dir])
	(elseif)
		(from $Here through $Door to $Obj)
		~($Door blocks light)
		(from $Here go $Dir to $Door)
	(then)
		(try [look $Dir])
	(else)
		You can't get a good view of (the $Obj) from here.
	(endif)

(perform [examine $Obj])
	(current player $Player)
	($Player is nested #in $Obj)
	(look $Obj)

(perform [examine $Obj])
	(descr $Obj)
	(if) (supporter $Obj) (then)
		(if) (fungibility enabled) (then)
			(collect $Child)
				*($Child is #on $Obj)
			(into $OnList)
			(fungibility-enabled appearance $OnList #on $Obj)
		(else)
			(exhaust) {
				*($Child is #on $Obj)
				(par)
				(appearance $Child #on $Obj)
				(notice $Child)
			}
		(endif)
	(endif)
	(if) (container $Obj) ~{ (opaque $Obj) ($Obj is closed) } (then)
		(if) (fungibility enabled) (then)
			(collect $Child)
				*($Child is #in $Obj)
			(into $InList)
			(fungibility-enabled appearance $InList #in $Obj)
		(else)
			(exhaust) {
				*($Child is #in $Obj)
				(par)
				(appearance $Child #in $Obj)
				(notice $Child)
			}
		(endif)
	(endif)
	(par)

%% LOOK

(grammar [look/l] for [look])
(grammar [look/l around] for [look])
(grammar [where am i] for [look])

(describe action [look])
	look around

(perform [look])
	(current player $Player)
	($Player is $Rel $Loc)
	(div @roomheader) (location headline)
	(if) (player can see) (then)
		(current scope ceiling $Ceil)
		(look $Ceil)
		(make appearances $Rel $Loc)
		(par)
	(else)
		(narrate darkness)
		(narrate dark objects $Rel $Loc) %% This is new, and experimental
	(endif)

(narrate dark objects $Rel $Loc) %% Let's see how this works - ideally it'll mean things you can reach are described, so you can pick up your torch if you drop it
	(exhaust) {
		*($Obj is $Rel $Loc)
		(reachable in darkness $Obj)
		(par)
		(appearance $Obj $Rel $Loc)
	}

%% SEARCH <obj>

(grammar [search [object]] for [search $])

(instead of [search (current room $R)])
	(try [look])

(prevent [search (animate $Obj)])
	~(current player $Obj)
	You've tried to train Watson to search people, but you never found a way to keep it from looking like an attack.

(perform [search $O]) %% Made this not include the player or Watson
	(current player $Player)
	(if) (opaque $O) ($O is closed) (then)
		($InList = [close])
	(else)
		(collect $C) *($C is #in $O) ~($C is one of [$Player #watson]) (reveal $C) (into $InList)
	(endif)
	(collect $C) *($C is #on $O) ~($C is one of [$Player #watson]) (reveal $C) (into $OnList)
	(collect $C) *($C is #behind $O) ~($C is one of [$Player #watson]) (reveal $C) (into $BehindList)
	(if) ($O has relation #wornby) (then)
		($UnderList = [])
	(else)
		(collect $C) *($C is #under $O) ~($C is one of [$Player #watson]) (reveal $C) (into $UnderList)
	(endif)
	Watson snuffles around (the $O)
	(if) ($InList = [close]) (then) %% New - distinguish between "nothing inside" and "can't see inside"
		, but since (it $O is) closed, he would have to
		(link action [open $] with $O phrased as [])
		to see inside
	(elseif) (nonempty $InList) (then)
		. In (them $O) he turns up (a $InList)
		(notice $InList)
	(endif)
	(if) (nonempty $OnList) (then)
		. On (them $O) he turns up (a $OnList)
		(notice $OnList)
	(endif)
	(if) (nonempty $BehindList) (then)
		. Behind (them $O) he turns up (a $BehindList)
		(notice $BehindList)
	(endif)
	(if) (nonempty $UnderList) (then)
		. Under (them $O) he turns up (a $UnderList)
		(notice $UnderList)
	(endif)
	(if)
		(empty $InList)
		(empty $OnList)
		(empty $BehindList)
		(empty $UnderList)
	(then)
		, but he doesn't turn up anything of interest
	(endif)
	.

%% FEEL <obj>

(grammar [feel/touch/finger/rub/prod [object]] for [feel $])

(perform [feel #watson])
	Watson prods his own nose with one paw, then looks up at you to see if he did well.

(perform [feel $Obj])
	Watson prods inquisitively at (the $Obj).

%% LISTEN TO <obj>
%% LISTEN

(grammar [listen/hear [single]] for [listen to $])
(grammar [listen to [single]] for [listen to $])

%% Don't require reachability:

(refuse [listen to $Obj])
	(just) (when $Obj is not here)

(perform [listen to $Obj])
	(if) (current player $Obj) (or) ($Obj = #watson) (then)
		Watson perks up, paying close attention.
%%	(elseif) (animate $Obj) (then)
%%		(The $Obj) (is $Obj) silent.
	(elseif) (room $Obj) (then)
		Watson listens closely, but doesn't seem to hear anything special.
	(else)
		Watson listens closely to (the $Obj), but doesn't seem to hear anything special.
	(endif)

(grammar [listen/hear] for [listen])

(instead of [listen])
	(current room $Room)
	(try [listen to $Room])

%% KISS <obj>

(grammar [kiss/love [animate]] for [kiss $])

~(refuse [kiss (current player $)]) %% Don't fail because of intangibility, we have our own error message here

(prevent [kiss $Obj])
	(current player $Player)
	{
		($Obj = $Player)
	(or)
		($Obj is part of $Player)
	}
	Watson leaps at you, intending to lavish you with canine affection. But he passes right through your body, and his ears droop in confusion.

(prevent [kiss #watson])
	Watson looks confused, then licks his paw tentatively. Was that right?

(perform [kiss $Obj])
	(The $Obj is) briefly lavished with canine affection
	(if) (animate $Obj) (then)
		, despite (its $Obj) best attempts to prevent it
	(endif)
	.

%% HUG <obj>

(grammar [hug/embrace [animate]] for [hug $])

(perform [hug $Obj])
	(try [kiss $Obj])

%% JUMP

(grammar [jump/skip/hop/bounce/exercise] for [jump])

(perform [jump])
	Watson leaps upward, demonstrating how high he can jump. He's doing such a good job!

%% DANCE

(grammar [dance/jive/twirl/spin] for [dance]) %% Removed SHAKE, that's now for shaking hands instead

(perform [dance])
	Watson spins around in a circle, chasing his own tail, then looks up at you for approval.

%% WAVE <obj>
%% WAVE

(grammar [wave [held]] for [wave $])
(grammar [wave] for itself)

(unlikely [wave $Obj])
	(current player $Player)
	~($Obj is #heldby $Player)
	~($Obj is part of $Player)

(before [wave $Obj])
	(ensure $Obj is held)

(prevent [wave $Obj])
	(current player $Player)
	~($Obj is part of $Player)
	(when $Obj isn't directly held)

(instead of [wave #watson])
	(try [wave])

(perform [wave $Obj])
	Watson waves (the $Obj) back and forth.

(perform [wave])
	Watson raises one paw, trying to shake hands. Not quite a wave, but close enough.

%% SING

(grammar [sing/hum] for [sing])

%% New for doglib!
(prevent [sing])
	(when we are holding something)

(perform [sing])
	(try [howl])

%% THROW <obj>
%% THROW <obj> <dir>

%% THROW AT has been removed for dog purposes - THROW is just to get things in a direction

(grammar [throw/toss [held]] for [throw $])
(grammar [throw/toss away [held]] for [throw $])

(understand [throw/toss | $Words] as [throw $Obj $Dir])
	(last $Words $Last)
	(parse direction [$Last] $Dir)
	(reverse $Words [$ | $RevWords])
	(reverse $RevWords $Left)
	*(understand $Left as object $Obj preferably held)

(unlikely [throw $Obj | $])
	(current player $Actor)
	~($Obj has ancestor $Actor)

(perform [throw $Obj]) %% We want to redirect to directions, not objects
	In which direction?
	(asking for direction in [throw $Obj []])

(instead of [throw $Obj $Dir])
	(current room $Room)
	(from $Room go $Dir to $Target)
	(direction $Target)
	(try [throw $Obj $Target])

(before [throw $Obj | $])
	(ensure $Obj is held)

(prevent [throw $Obj $])
	(when $Obj isn't directly held)

(prevent [throw $ $Dir])
	(current room $Room)
	(from $Room go $Dir to $Door)
	(door $Door)
	(when $Door blocks passage)

(prevent [throw $ $Dir])
	(current room $Room)
	~(from $Room go $Dir to room $)
	~{ (current player $Player) ($Player is #on $) ($Dir = #down) } %% Exception for throwing things off supporters
	Watson looks (name $Dir)(no space)ward, then looks back at you, puzzled. He could toss something that way, but if it wouldn't make for a good chase and fetch, what's the point?

(instead of [throw $Obj #down]) %% If there's no down exit, it's just a drop action
	(current room $Room)
	~(from $Room go #down to room $)
	(current player $Player)
	~($Player is #on $)
	(try [drop $Obj])

(perform [throw $Obj #down]) %% Special case: THROW DOWN when on a supporter sends it to whatever the supporter overlooks
	(current player $Player)
	($Player is #on $Supporter)
	($Supporter overlooks $Rel $Destination)
	Watson flings (the $Obj) downward, sending (them $Obj) off the edge to land (name $Rel) (the $Destination).
	(now) ($Obj is $Rel $Destination)

(perform [throw $Obj #up]) %% And if there's no up exit, it's just a _special_ drop action
	(current room $Room)
	~(from $Room go #up to room $)
	Watson flings (the $Obj) upward, and (it $Obj) land(s $Obj) with a (emph {thump}) next to him.
	(current player $Player)
	($Player is $Rel $Home)
	(now) ($Obj is $Rel $Home)

(perform [throw $Obj $Dir])
	(current room $Room)
	(from $Room go $Dir to room $Destination)
	With a sharp flick of his head, Watson flings (the $Obj) (name $Dir)(no space)ward, sending (them $Obj) sailing to (the $Destination).
	(now) ($Obj is #in $Destination)

%% THINK

%% Made a synonym for SCORE in actions.dg

%% SLEEP

(grammar [sleep/nap/dream] for [sleep])
(grammar [take nap] for [sleep])
(grammar [take a nap] for [sleep])
(grammar [fall asleep] for [sleep])

(perform [sleep])
	Watson flops down, pretending to be asleep. But the wagging tail is a dead giveaway.

%% TAKE <obj>
%% TAKE <obj> FROM <obj>

(grammar [take/grab/snatch/steal/acquire/hold/gather/get/pick/remove [takable child] from [single]] for [take $ from $])

(grammar [take/grab/snatch/steal/acquire/hold/gather/get/pick [takable]] for [take $])
(grammar [pick up [takable]] for [take $])

(unlikely [take ~(item $)])

(unlikely [take $Obj])
	($Obj has relation $Rel)
	($Rel is one of [#partof #heldby #wornby])

(unlikely [take $Obj from $Parent])
	~($Obj has ancestor $Parent)

(prevent [take $Obj from $Parent])
	~($Obj has ancestor $Parent)
	(if) (animate $Parent) (then)
		(The $Parent) (doesn't $Parent) have (the $Obj).
	(elseif) (container $Parent) (then)
		(The $Obj) (isn't $Obj) in (the $Parent).
	(elseif) (supporter $Parent) (then)
		(The $Obj) (isn't $Obj) on (the $Parent).
	(else)
		That's not where (the $Obj) (is $Obj).
	(endif)

(perform [take $Obj from $])
	(try [take $Obj])

(before [take (item $Obj)])
	(current player $Player)
	($Player has ancestor $Obj)
	(first try [leave $Obj])

(prevent [take $Obj])
	(when $Obj is already held)
	(or) (when our inventory is full) %% New
	(or) (when $Obj is already worn)
	(or) (when $Obj is fine where it is)
	(or) (when $Obj is part of something)
	(or) (when $Obj is held by someone)
	(or) (when $Obj is worn by someone)
	(or) (when $Obj can't be taken)

(narrate taking $Obj)
	(current player $Actor)
	Watson opens his mouth and carefully
	(if) ($Obj is $Rel $Parent) ~($Actor has ancestor $Parent) (then)
		plucks (the $Obj) (reverse-name $Rel) (the $Parent)
	(else)
		scoops up (the $Obj)
	(endif)
	.

(perform [take $Obj])
	(narrate taking $Obj)
	(current player $Actor)
	(now) ($Obj is #heldby $Actor)
	(now) ($Obj is handled)

%% REMOVE <obj>

(grammar [remove/doff/shed/loosen/disrobe/undress [worn]] for [remove $])
(grammar [take off [worn]] for [remove $])
(grammar [take [worn] off] for [remove $])

(unlikely [remove $Obj])
	(current player $Player)
	~($Obj is #wornby $Player)

(before [remove $Obj])
	($Obj is #under $Cover)
	(current player $Player)
	($Cover is worn by $Player)
	(first try [remove $Cover])

(instead of [remove $Obj])
	~(wearable $Obj)
	~($Obj has relation #partof)
	(item $Obj)
	(try [take $Obj])

(prevent [remove $Obj])
	(when $Obj is part of something)

(prevent [remove $Obj])
	($Obj is #under $Cover)
	(current player $Player)
	($Cover is worn by $Player)
	You'd have to remove (the $Cover) first.

(prevent [remove $Obj])
	(current player $Player)
	~($Obj is #wornby $Player)
	Watson tilts his head, confused. He isn't wearing (the $Obj) to begin with.

(narrate removing $Obj)
	Watson shakes himself free of (the $Obj).

(perform [remove $Obj])
	(narrate removing $Obj)
	(current player $Player)
	(exhaust) {
		*($Sub is #under $Obj)
		(now) ($Sub is #wornby $Player)
		(now) ($Sub is handled)
	}
	($Player is $Rel $Home)
	(now) ($Obj is $Rel $Home)
	(now) ($Obj is handled)

%% WEAR <obj>

(grammar [wear/don [held]] for [wear $])
(grammar [put on [held]] for [wear $])
(grammar [put [held] on] for [wear $])

(unlikely [wear $Obj])
	~(wearable $Obj)

(unlikely [wear $Obj])
	(current player $Player)
	($Obj is worn by $Player)

(before [wear $Obj])
	(current player $Player)
	~($Obj is worn by $Player)
	(if)
		*($Worn is worn by $Player bottom-up)
		(wearing $Obj removes $Worn)
	(then)
		(first try [remove $Worn])
	(endif)

(before [wear $Obj])
	(wearable $Obj)
	(current player $Player)
	~($Obj is worn by $Player)
	(ensure $Obj is held)

(prevent [wear $Obj])
	(when $Obj is already worn)

(prevent [wear $Obj])
	~(wearable $Obj)
	(The $Obj) can't be worn.

(prevent [wear $Obj])
	(current player $Player)
	*($Worn is worn by $Player bottom-up)
	(wearing $Obj removes $Worn)
	Watson tries, but he can't do that while he's already wearing (the $Worn).

(prevent [wear $Obj])
	(when $Obj isn't directly held)

(narrate wearing $Obj)
	Watson squirms his way into (the $Obj).

(perform [wear $Obj])
	(narrate wearing $Obj)
	(current player $Player)
	(exhaust) {
		*($Worn is #wornby $Player)
		(wearing $Obj covers $Worn)
		(now) ($Worn is #under $Obj)
		(now) ($Worn is handled)
	}
	(now) ($Obj is #wornby $Player)
	(now) ($Obj is handled)

%% PUT <obj> <rel> <obj>

(grammar [put/lay/drop/hide/stash/stuff/insert [held] [in inside into through] [single]] for [put $ #in $])
(grammar [put/lay/drop [held] [on onto atop upon] [single]] for [put $ #on $])
(grammar [put/lay/drop/hide/stash/stuff [held] behind [single]] for [put $ #behind $])
(grammar [put/lay/drop/hide/stash/stuff [held] under [single]] for [put $ #under $])

%% New: a PUT $Obj $Rel variant for linking purposes

(grammar [put/lay/drop/hide/stash/stuff/insert [held] [in inside into through]] for [put $ #in])
(grammar [put/lay/drop [held] [on onto atop upon]] for [put $ #on])
(grammar [put/lay/drop/hide/stash/stuff [held] behind] for [put $ #behind])
(grammar [put/lay/drop/hide/stash/stuff [held] under] for [put $ #under])

(unlikely [put $Obj $])
	(current player $Actor)
	~($Obj has ancestor $Actor)

(perform [put $Obj $Rel])
	(uppercase) (name $Rel) what?
	(asking for object in [put $Obj $Rel []])

%% And the PUT ___ $Rel $Obj reverse
%% Since this will only be linked, we don't need as elaborate of grammar

%% SOME THING used so it doesn't match the pattern [put $ $ $] in other rules
(grammar [put something in [single]] for [put some thing #in $])
(grammar [put something on [single]] for [put some thing #on $])
(grammar [put something behind [single]] for [put some thing #behind $])
(grammar [put something under [single]] for [put some thing #under $])

(unlikely [put $ $Rel $Dest])
	~($Dest accepts $Rel)

(perform [put some thing $Rel $Obj])
	Put what there?
	(asking for object in [put [] $Rel $Obj])

%% Now for the universal rules

(unlikely [put $Obj $ $])
	(current player $Actor)
	~($Obj has ancestor $Actor)

(unlikely [put $ $Rel $Dest])
	~($Dest accepts $Rel)

(unlikely [put $Obj $ $Obj])

(unlikely [put $Obj $ $Dest])
	($Dest has ancestor $Obj)

(unlikely [put $Obj $Rel $Dest])
	($Obj is $Rel $Dest)

(before [put $Obj $Rel $Dest])
	~($Obj is $Rel $Dest)
	(ensure $Obj is held)

(before [put $ #in $Dest])
	($Dest is closed)
	(first try [open $Dest])

(instead of [put (current player $) #in $Dest])
	(try [enter $Dest])

(instead of [put (current player $) #on $Dest])
	(try [climb $Dest])

(instead of [put $Obj $Rel $Dest])
	(current player $Player)
	($Player is $Rel $Dest)
	(try [drop $Obj])

(prevent [put $Obj $Rel $Dest])
	(when $Obj is already $Rel $Dest)
	(or) (when $Obj isn't directly held)

(prevent [put $Obj $Rel $Dest])
	($Dest is nested $OldRel $Obj)
	Watson looks confused. (A $Obj) can't be put
	(if) ~($OldRel is one of [#in #on]) (then)
		(towards-name $Rel) something that's
	(endif)
	(present-name $OldRel) (itself $Obj), surely?

(prevent [put $Obj $Rel $Obj])
	Watson looks confused. (A $Obj) can't be put (towards-name $Rel) (itself $Obj), surely?

(prevent [put $ $Rel $Dest])
	(when $Dest won't accept $Rel)

(prevent [put $ #in $Dest])
	(when $Dest is closed)

(narrate putting $Obj $Rel $Dest)
	Watson sets (the $Obj) carefully (name $Rel) (the $Dest).

(perform [put $Obj $Rel $Dest])
	(narrate putting $Obj $Rel $Dest)
	(now) ($Obj is $Rel $Dest)
	(now) ($Obj is handled)

%% DROP <obj>

(grammar [put/lay/drop [held]] for [drop $])
(grammar [put/lay/drop/set down [held]] for [drop $])
(grammar [put/lay/drop/set [held] down] for [drop $])
(grammar [let go of [held]] for [drop $])

(unlikely [drop $Obj])
	(current player $Actor)
	~($Obj has ancestor $Actor)

(before [drop $Obj])
	(current player $Actor)
	($Obj has ancestor $Actor)
	~($Obj has relation #partof)
	(ensure $Obj is held)

(prevent [drop $Obj])
	(when $Obj is part of something)
	(or) (when $Obj isn't directly held)

(narrate dropping $Obj)
	(current player $Actor)
	($Actor is $Rel $Loc)
	Watson sets (the $Obj) carefully
	(if) (room $Loc) (then) %% CHANGED THIS WHOLE BIT
		on the ground.
	(else) %% Not sure it's even necessary any more now that the dumbwaiter is fixed but better safe than sorry
		(name $Rel) (the $Loc).
	(endif)

(perform [drop $Obj])
	(narrate dropping $Obj)
	(current player $Actor)
	($Actor is $Rel $Loc)
	(now) ($Obj is $Rel $Loc)
	(now) ($Obj is handled)

%% INVENTORY

(grammar [inventory/i/inv] for [inventory])
(grammar [take/get inventory] for [inventory])

(describe action [inventory])
	take inventory

(perform [inventory])
	(current player $Player)
	(collect $C) *($C is #heldby $Player) (into $HeldList)
	(if) (empty $HeldList) (then)
		(narrate holding nothing)
	(else)
		(narrate inventory holding $HeldList)
	(endif)
	(narrate inventory wearing)
	(select)
		(par) "Take inventory" is one of the stranger tricks you've taught him, but it just feels more professional than "show me".
	(or) (stopping)
	(line)

(narrate holding nothing)
	Watson raises his head and opens his mouth, demonstrating that there's nothing in it.

(narrate inventory holding $HeldList)
	Watson holds up (the $HeldList) proudly for your inspection.

(narrate inventory wearing) %% Just to make sure it doesn't fail - the game has to provide this, since the library isn't doing it any more.

%% EXITS

(grammar [exits] for [exits]) %% Removed MAP synonym
(grammar [list exits] for [exits])
(grammar [list the exits] for [exits])

(describe action [exits])
	list the exits

%% It's your own house, you always know the exits
%% (prevent [exits])
%%	~(player can see)
%%	You can't be sure of where the exits are in the darkness.

(perform [exits])
	(current room $Room)
	(if)
		~{
			*(from $Room go $Dir to $Target)
			(direction $Dir)
			{ (room $Target) (or) (door $Target) }
		}
	(then)
		There aren't any clear exits here.
	(else)
		Obvious exits are: (line)
		(exhaust) {
			*(from $Room go $Dir to $Target)
			(direction $Dir)
			(if) (door $Target) (or) (room $Target) (then)
				(if) (library links enabled) (then)
					(link) (Name $Dir)
				(else)
					(Name $Dir)
				(endif)
				(if) (door $Target) (then)
					through (the $Target)
					(if) ($Target is closed) (then)
						\(currently closed\)
					(elseif)
						(from $Room through $Target to $R)
					(then)
						(describe remote room $R)
					(endif)
				(else)
					(describe remote room $Target)
				(endif)
				. (line)
			(endif)
		}
	(endif)

%% You always know which room is where, it's your own house
(describe remote room $Room)
	to (the $Room)

%% EXIST (misspelled EXITS, just for the giggles)

(grammar [exist] for itself)

(perform [exist])
	You're not entirely sure you do, at this point.

%% WAIT

(grammar [wait/z] for [wait])
(grammar [demonstrate patience] for [wait]) %% Because of the message; players demanded it

(perform [wait])
	Watson tries as hard as he can to demonstrate patience.

%% GIVE <obj> TO <obj>
%% GIVE <obj>

(grammar [give/offer/proffer [held] to [animate]] for [give $ to $])
(grammar [give/offer/proffer [animate] [held]] for [give $ to $] reversed)

(grammar [give/offer/proffer [held]] for [give $])

(unlikely [give $Obj to $Obj])

(unlikely [give $Obj to $])
	(current player $Player)
	~($Obj has ancestor $Player)

(unlikely [give $ to $Dest])
	~(animate $Dest)

(unlikely [give $])

(perform [give $Obj])
	To whom?
	(asking for object in [give $Obj to []])

(before [give $Obj to $])
	(ensure $Obj is held)

%% New: don't require $Target to be touchable
(refuse [give $Obj to $Target])
	(just)
	{
		(when $Obj is not here)
		(or) (when $Target is not here)
		(or) (when $Obj is out of reach)
	}

(prevent [give $Obj to $])
	(when $Obj isn't directly held)

(prevent [give $Obj to #watson])
	How can he give (a $Obj) to himself?

(perform [give $Obj to $Dest])
	(current player $Dest)
	Watson holds up (the $Obj) to you, tail wagging excitedly. But (it $Obj) passes right through your hand. He looks dejected.

(perform [give $ to $Dest])
	(if) (animate $Dest) (then)
		(The $Dest) (doesn't $Dest) appear to be interested. Watson looks dejected.
	(else)
		(The $Dest) (doesn't $Dest) react in any way. Watson looks dejected.
	(endif)

%% SHOW <obj> TO <obj>
%% SHOW <obj>

(grammar [show [held] to [animate]] for [show $ to $])
(grammar [show [animate] [held]] for [show $ to $] reversed)

(grammar [show [held]] for [show $])

%% And the special one for the hyperlink interface
%% SHOW SOMETHING TO

%% We need to use "some thing" instead of "something" because otherwise it'll match the pattern [show $ to $] even though it's not an actual object
(grammar [show something to [animate]] for [show some thing to $])
(grammar [show [animate] something] for [show some thing to $])
(perform [show some thing to $Obj])
	Show (them $Obj) what?
	(asking for object in [show [] to $Obj])

(unlikely [show $Obj to $Obj])

(unlikely [show $Obj to $])
	(item $Obj)
	(current player $Actor)
	~($Obj is nested #heldby $Actor)

(unlikely [show $ to $Dest])
	~(animate $Dest)

(unlikely [show $])

%% There's no real difference between showing and giving when you're a dog
(instead of [show $Obj to $Person])
	(object $Obj) %% Don't block SHOW SOMETHING TO $
	(try [give $Obj to $Person])

(instead of [show $Obj])
	(try [give $Obj])

%% OPEN <obj>

(grammar [open/unwrap/uncover [object]] for [open $])

(unlikely [open $Obj])
	~(openable $Obj) (or) ($Obj is open)

%% Rule for implicitly unlocking doesn't matter, dogs can't unlock things

(prevent [open $Obj])
	~(openable $Obj)
	Watson noses at (the $Obj), but (it $Obj) (doesn't $Obj) open.

(prevent [open (openable $Obj)])
	($Obj is open)
	Watson noses at (the $Obj), but (it $Obj is) already open.

(prevent [open $Obj])
	($Obj is locked)
	Watson noses at (the $Obj), but (it $Obj) (doesn't $Obj) open. (It $Obj) seem(s $Obj) to be locked.

(narrate opening $Obj)
	Watson noses (the $Obj) open
	(current player $Player)
	(if) ~($Player is nested #in $Obj) (then)
		(collect $Child)
			*($Child is #in $Obj)
			(reveal $Child)
		(into $List)
		(if) (nonempty $List) (then)
			, revealing (a $List)
			(notice $List)
		(endif)
	(endif)
	.

(perform [open $Obj])
	(narrate opening $Obj)
	(now) ($Obj is open)
	(now) ($Obj is previously-used) %% Doors we've closed explicitly can still be used in pathfinding

%% CLOSE <obj>

(grammar [close/shut/cover [object]] for [close $])

(unlikely [close $Obj])
	~(openable $Obj) (or) ($Obj is closed)

(prevent [close $Obj])
	~(openable $Obj)
	Watson noses at (the $Obj), but (it $Obj) (doesn't $Obj) close.

(prevent [close $Obj])
	($Obj is closed)
	Watson noses at (the $Obj), but (it $Obj is) already closed.

(narrate closing $Obj)
	Watson noses (the $Obj) closed.

(perform [close $Obj])
	(narrate closing $Obj)
	(now) ($Obj is closed)
	(now) ($Obj is previously-used) %% Doors we've closed explicitly can still be used in pathfinding

%% UNLOCK <obj> WITH <obj>
%% UNLOCK <obj>

%% Dogs can't do this

%% LOCK <obj> WITH <obj>
%% LOCK <obj>

%% Dogs can't do this

%% SWITCH ON <obj>

(grammar [turn/switch on [object]] for [switch on $])
(grammar [turn/switch [object] on] for [switch on $])

(unlikely [switch on $Obj])
	~(switchable $Obj) (or) ($Obj is on)

(describe action [switch on $Obj])
	switch (the full $Obj) on

(prevent [switch on $Obj])
	~(switchable $Obj)
	Watson paws at (the $Obj), with no effect.

(prevent [switch on $Obj])
	($Obj is on)
	Watson paws at (the $Obj), but (it $Obj is) already on.

(narrate switching on $Obj)
	Watson paws at (the $Obj), and (it $Obj) switch(es $Obj) on!

(perform [switch on $Obj])
	(narrate switching on $Obj)
	(now) ($Obj is on)

%% SWITCH OFF <obj>

(grammar [turn/switch off [object]] for [switch off $])
(grammar [turn/switch [object] off] for [switch off $])

(unlikely [switch off $Obj])
	~(switchable $Obj) (or) ($Obj is off)

(describe action [switch off $Obj])
	switch (the full $Obj) off

(prevent [switch off $Obj])
	($Obj is off)
	Watson paws at (the $Obj), but (it $Obj is) already off.

(prevent [switch off $Obj])
	~(switchable $Obj)
	Watson paws at (the $Obj), with no effect.

(narrate switching off $Obj)
	Watson paws at (the $Obj), and (it $Obj) switch(es $Obj) off!

(perform [switch off $Obj])
	(narrate switching off $Obj)
	(now) ($Obj is off)

%% SWITCH <obj>

(grammar [switch [object]] for [switch $])

(unlikely [switch ~(switchable $)])

(instead of [switch (switchable $Obj)])
	(if) ($Obj is on) (then)
		(try [switch off $Obj])
	(else)
		(try [switch on $Obj])
	(endif)

(perform [switch $Obj])
	Watson paws at (the $Obj), with no effect.
	(tick) (stop)

%% SQUEEZE <obj>

(grammar [squeeze/squash [object]] for [squeeze $])

(prevent [squeeze $Obj])
	(animate $Obj)
	Watson looks up at you, panting happily. He's well-trained enough to know (emph {not}) to do that.

(perform [squeeze $Obj])
	Watson carefully squashes (the $Obj) with his paw, trying not to do any real damage.

%% FIX <obj>

%% Dogs can't do this.

%% TASTE <obj>

(grammar [taste/lick/relish/savour/savor [object]] for [taste $])
(grammar [drool/slobber on [object]] for [taste $]) %% For dog purposes
(grammar [drool/slobber/lick/taste/relish/savour/savor] for [taste]) %% And since slobbering can be done without a noun

(unlikely [taste $Obj])
	~(edible $Obj)
	~(potable $Obj)

(instead of [taste (potable $Obj)])
	(try [drink $Obj])

(perform [taste $Obj])
	Watson gives (the $Obj) a hearty lick.

(perform [taste])
	Lick what?
	(asking for object in [taste []])

%% FLY

%% Dogs can't do this.

%% BITE <obj>

(grammar [bite/chew/gnaw [single]] for [bite $])
(grammar [gnaw at [single]] for [bite $])

(unlikely [bite $Obj])
	~(biteable $Obj)

(perform [bite (animate $Obj)])
	(try [attack $Obj])

(perform [bite $Obj])
	(try [eat $Obj])

%% EAT <obj>

(grammar [eat/devour/ingest/munch/swallow [object]] for [eat $])

(unlikely [eat $Obj])
	~(edible $Obj)
	~(potable $Obj)
	~(biteable $Obj) %% New

(instead of [eat $Obj])
	~(edible $Obj)
	(potable $Obj)
	(try [drink $Obj])

(prevent [eat $Obj])
	(when we are holding something except $Obj)

(prevent [eat $Obj])
	{
		($Obj = #watson)
	(or)
		($Obj is part of #watson)
	}
	Watson looks at you for a moment, then carefully takes his tail in his mouth.

(prevent [eat $Obj])
	~(edible $Obj)
	~(biteable $Obj)
	Watson looks up at you, panting happily. He knows this trap by now: (a $Obj) (is $Obj) (emph {not}) for eating.

(narrate eating $Obj)
	Watson doesn't need telling twice. Soon there's nothing left of (the $Obj).

(perform [eat $Obj])
	(narrate eating $Obj)
	(now) ($Obj is nowhere)
	(now) ($Obj is handled)

%% DRINK <obj>

(grammar [drink/sip/quaff [object]] for [drink $])

(unlikely [drink $Obj])
	~(potable $Obj)

(prevent [drink $Obj])
	~(potable $Obj)
	Watson looks up at you, panting happily. He knows this trap by now: (a $Obj) (is $Obj) (emph {not}) for drinking.

(perform [drink $Obj])
	Watson laps happily at (the $Obj).

%% CUT <obj> WITH <obj>
%% CUT <obj>

%% Dogs can't do this

%% USE <obj>

(understand [use | $Words] as $Action)
	*(understand $Words as single object $Obj)
	(if)
		(implicit action is $Implicit)
		~(implicit action wants direction)
	(then)
		(recover implicit action $Implicit $Obj into $Action)
	(else)
		($Action = [use $Obj])
	(endif)

(instead of [use (door $Door)])
	(try [enter $Door])

(instead of [use (manipulable $Obj)]) %% New - USE WHEEL etc
	(try [push $Obj])

(instead of [use (switchable $Obj)]) %% New - USE STOVE
	(try [switch $Obj])

(perform [use $])
	Watson looks confused about that. You've taught him a lot of tricks, but "use" is a bit too general for him.
	(stop)

%% CONSULT <obj> ABOUT <topic>

%% Dogs can't do this

%% ASK/TELL <obj> ABOUT <topic> (redirected to TALK TO <obj> ABOUT <topic> by default)

%% Dogs can't do this

%% TALK TO <obj> ABOUT <topic>
%% TALK TO <obj>
%% TALK

(grammar [talk/speak to [animate] about [topic]] for [talk to $ about $])
(grammar [talk/speak to [animate]] for [talk to $])
(grammar [talk/speak [animate]] for [talk to $])
(grammar [talk/speak] for [talk])

(describe action [talk to $Person about $Topic])
	talk to (the full $Person) about (describe topic $Topic)

(unlikely [talk to $Obj | $])
	~(animate $Obj)

(perform [talk])
	(try [bark])

%% Don't require reachability:

(refuse [talk to $Obj | $])
	(just) (when $Obj is not here)

(perform [talk to $Obj about $])
	(try [talk to $Obj])

(perform [talk to $])
	(try [talk])

%% BARK AT <obj>
%% BARK

(grammar [bark at [single]] for [bark at $])
(grammar [bark] for itself)

(perform [bark at $])
	(try [bark])

(prevent [bark])
	(when we are holding something)

(perform [bark])
	Watson lets out a loud bark that echoes through the house, then looks up at you for approval, tail wagging happily.

%% CURSE

%% Dogs would never

%% SHOUT TO <obj> (redirected to TALK TO by default)
%% SHOUT (redirected to TALK by default)

(grammar [shout/yell/scream to [animate]] for [shout to $])

(unlikely [shout to $Obj])
	~(animate $Obj)

(refuse [shout to $Obj])
	(just) (when $Obj is not here)

(perform [shout to $Obj])
	(try [talk to $Obj])

(grammar [shout/yell/scream] for [shout])

(perform [shout])
	(try [talk])

%% PRAY

%% Dogs have no religion

%% SHRUG

%% Dogs can't do that

%% CALL <obj> (redirected to SHOUT TO by default)
%% CALL (redirected to SHOUT by default)
%% Stories containing a phone would override these.

(grammar [call [animate]] for [call $])
(grammar [call to [animate]] for [call $])
(grammar [call] for itself)

(unlikely [call $Obj])
	~(animate $Obj)

(refuse [call $Obj])
	(just) (when $Obj is not here)

(perform [call])
	(try [shout])

(perform [call to #watson])
	Watson perks up his ears, listening intently.

(perform [call to $Obj])
	(The $Obj) (doesn't $Obj) seem to hear you.

%% TODO do we want this to be a person action instead of a dog action like this?

%% GREET <obj> (redirected to TALK TO by default)
%% GREET

(grammar [greet/hello/hi/hey [animate]] for [greet $])
(grammar [greet/hello/hi/hey] for [greet])

(unlikely [greet $Obj])
	~(animate $Obj)

(refuse [greet $Obj])
	(just) (when $Obj is not here)

(perform [greet $Obj])
	(try [talk to $Obj])

(perform [greet])
	(try [talk])

%% TELL <obj> TO | <action>

(understand [tell/ask | $Words] as [tell $Actor to | $Action])
	*(split $Words by [, to] into $Left and $Right)
	*(understand $Left as single object $Actor preferably animate)
	(current actor $OldActor)
	(now) (current actor $Actor)
	(rewrite $Right into $Simplified)
	(collect $A)
		*(understand $Simplified as $A)
	(into $List)
	(now) (current actor $OldActor)
	*($Action is one of $List)

(understand [ask | $Words] as [tell $Actor to give $Obj to $Player])
	*(split $Words by [for] into $Left and $Right)
	*(understand $Left as single object $Actor preferably animate)
	*(understand $Right as object $Obj preferably child of $Actor)
	(current player $Player)

%% The rule for "name comma action" is further down in the file.

(unlikely [tell $Addressee to | $])
	~(animate $Addressee)

(describe action [tell $Actor to give $Obj to (current player $)])
	ask (the full $Actor) for (the full $Obj)

(describe action [tell $Actor to tell (current player $) about $Topic])
	ask (the full $Actor) about (describe topic $Topic)

(describe action [tell $Actor to | $Action])
	tell (the full $Actor) to (describe action $Action)

(unlikely [tell $Obj to | $])
	~(animate $Obj)

(refuse [tell $NPC to | $])
	(just) (when $NPC is not here)

(instead of [tell $NPC to greet])
	(try [greet $NPC])

(instead of [tell $NPC to tell (current player $) about $Topic])
	(try [ask $NPC about $Topic])

(perform [tell #watson to | $Command])
	\( You don't have to mention Watson's name explicitly; he's the only one around who can hear your commands, after all. \) (line)
	(try $Command)

(perform [tell $Actor to | $])
	(if) (animate $Actor) (then)
		(The $Actor) (doesn't $Actor) seem to hear you.
	(else)
		(The $Actor) show(s $Actor) no reaction whatsoever.
	(endif)

%% SMELL <obj>
%% SMELL

(grammar [smell/sniff/inhale [object]] for [smell $])
(grammar [smell/sniff/inhale] for [smell])

(refuse [smell $Obj])
	(just) (when $Obj is not here)

(perform [smell $Obj])
	Watson sniffs at (the $Obj). Whatever canine insights he's gained from (it $Obj), you can only guess.

(perform [smell])
	Watson sniffs at the air. Whatever canine insights he's gained from it, you can only guess.

%% WAKE UP

(grammar [wake up] for itself)
(grammar [wake/awake/awaken] for [wake up])

(understand [pinch | $Words] as [wake up])
	*(understand $Words as single object $Obj)
	(current player $Player)
	{
		($Obj = $Player)
	(or)
		($Obj is part of $Player)
	}

(perform [wake up])
	Watson wags his tail, demonstrating just how awake and alert he is.

%% CLIMB <obj>

(grammar [climb/mount/scale [single]] for [climb $])
(grammar [go/get/step/climb/jump up [on to onto] [single]] for [climb $])
(grammar [go/get/step/climb/stand/lie/jump [on onto] [single]] for [climb $])
(grammar [go/get/step/climb/stand/lie/jump on top of [single]] for [climb $])
(grammar [sit/stand/lie on [single]] for [climb $])
(grammar [sit/stand/lie down on [single]] for [climb $])
(grammar [jump to/onto [single]] for [climb $])

(unlikely [climb $Obj])
	~(actor supporter $Obj)

(unlikely [climb $Obj])
	(current player $Actor)
	($Obj has ancestor $Actor)

(unlikely [climb $Obj])
	(current player $Actor)
	($Actor is nested #on $Obj)

(describe action [climb $Obj])
	get onto (the full $Obj)

(instead of [climb (door $Door)]) %% New - for "climb stairs" and such
	(try [enter $Door])

(instead of [climb (room $Room)])
	~(actor supporter $Room)
	(try [go #up])

(instead of [climb (actor container $Obj)])
	~(actor supporter $Obj)
	(seat $Obj)
	(try [enter $Obj])

(prevent [climb $Obj])
	(current player $Actor)
	{
		(when $Actor is already #on $Obj)
		(or) (when $Obj won't accept actor #on)
	}

(prevent [climb $Dest])
	(current player $Actor)
	($Dest is nested $OldRel $Actor)
	Watson looks confused. How can he get onto something that's (present-name $OldRel) himself?

(narrate climbing $Obj)
	Watson leaps up onto (the $Obj).

(perform [climb $Obj])
	(narrate climbing $Obj)
	(move player to #on $Obj)

%% ENTER <obj>

(grammar [enter/cross [single]] for [enter $])
(grammar [go/get/enter/climb/jump/sit/lie [in into inside through past] [single]] for [enter $]) %% NEW added THROUGH and PAST as options

(understand [go | $Words] as [enter $Obj])
	*(understand $Words as single object $Obj)
	{ (door $Obj) (or) ~(room $Obj) (actor container $Obj) }

(unlikely [enter $Obj])
	~(actor container $Obj)
	~(door $Obj)

(unlikely [enter $Obj])
	(current player $Actor)
	($Obj has ancestor $Actor)

(unlikely [enter $Obj])
	(current player $Actor)
	($Actor is nested #in $Obj)

~(very unlikely [enter $])

(describe action [enter $Obj])
	get into (the full $Obj)

~(refuse [enter (room $)])

(before [enter (actor container $Obj)])
	($Obj is closed)
	(first try [open $Obj])

(instead of [enter (room $Room)])
	(current room $Here)
	~($Here = $Room)
	(if)
		(from $Here go $Dir to $Room)
	(or)
		(from $Here through $Door to $Room)
		(from $Here go $Dir to $Door)
	(then)
		(direction $Dir) %% Assure the compiler that $Dir is bound.
		(try [go $Dir])
	(else)
		Watson looks around, but can't find any way to reach (the $Room).
		(tick) (stop)
	(endif)

(instead of [enter (door $Obj)])
	(current room $Room)
	(from $Room go $Dir to $Obj)
	(direction $Dir) %% Assure the compiler that $Dir is bound.
	(try [go $Dir])

(instead of [enter (wearable $Obj)])
	(try [wear $Obj])

(instead of [enter (actor supporter $Obj)])
	~(actor container $Obj)
	(seat $Obj)
	(try [climb $Obj])

(prevent [enter $Obj])
	(current player $Actor)
	{
		(when $Actor is already #in $Obj)
		(or) (prevent entering $Obj)
	}

(prevent [enter $Dest])
	(current player $Actor)
	($Dest is nested $OldRel $Actor)
	Watson looks around in confusion. How can he get into something that's (present-name $OldRel) himself?

(perform [enter $Obj])
	(narrate entering $Obj)
	(move player to #in $Obj)

%% SIT

(grammar [sit] for itself)

(unlikely [sit])

(perform [sit])
	On what?
	(asking for object in [climb []])

%% STAND

(grammar [stand] for itself)
(grammar [stand up] for [stand])

(describe action [stand])
	stand up

(instead of [stand])
	(current player $Player)
	($Player has parent $Obj)
	~(room $Obj)
	(try [leave $Obj])

(perform [stand])
	Watson proudly demonstrates his ability to stand up on all fours.
	(tick) (stop)

%% LEAVE <obj>
%% LEAVE

(grammar [leave/exit [single]] for [leave $])
(grammar [get/jump/go [out off] of [single]] for [leave $])
(grammar [get/jump/go off [single]] for [leave $])

(understand [u/up] as [leave])
	(current player $Player)
	($Player has parent $Obj)
	(seat $Obj)

(understand [go/get u/up] as [leave])
	(current player $Player)
	($Player has parent $Obj)
	(seat $Obj)

(understand [d/down] as [leave])
	(current player $Player)
	($Player is #on $Obj)
	~(seat $Obj)

(understand [go/get/climb d/down] as [leave])
	(current player $Player)
	($Player is #on $Obj)
	~(seat $Obj)

(understand [out] as [leave])
	(current player $Player)
	($Player is #in $Obj)
	~(room $Obj)

(understand [go/get out] as [leave])
	(current player $Player)
	($Player is #in $Obj)
	~(room $Obj)

(grammar [leave/exit] for [leave])
(grammar [get/jump [out off]] for [leave])

(describe action [leave $Obj])
	(current player $Player)
	($Player is $Rel $Obj)
	get (reverse-name $Rel) (the $Obj)

(describe action [leave])
	(current player $Player)
	($Player is $Rel $Obj)
	~(room $Obj)
	get (reverse-name $Rel) (the $Obj)

(unlikely [leave $Obj])
	(current player $Actor)
	~{
		($Actor has ancestor $Obj)
	(or)
		($Obj is worn by $Actor)
	}

~(very unlikely [leave (current room $)])

(refuse [leave (room $Room)])
	~(current room $Room)
	But you aren't in (the $Room).

(perform [leave])
	(current player $Player)
	($Player has parent $Obj)
	(if) (room $Obj) (then)
		(try [go #out])
	(else)
		(try [leave $Obj])
	(endif)

(before [leave $Obj])
	(current player $Actor)
	($Actor has ancestor $Obj)
	(recursively leave descendants of $Obj)

(before [leave $Obj])
	($Obj is closed)
	(current player $Player)
	($Player is #in $Obj)
	(first try [open $Obj])

%%(instead of [leave $Obj])
%%	(current player $Actor)
%%	($Obj is worn by $Actor)
%%	(try [remove $Obj])
%% TODO: take off leash?

(instead of [leave (current room $)])
	(try [go #out])

(prevent [leave $Obj])
	(current player $Player)
	~($Player has parent $Obj)
	Watson looks at (the $Obj) in confusion. He's not
	(if) (supporter $Obj) (then)
		(if) (container $Obj) (then)
			in or
		(endif)
		on top of
	(else)
		inside
	(endif)
	(them $Obj) already.

(narrate leaving $Obj)
	Watson
	(current player $Player)
	(if) ($Player is $Rel $Obj) (then)
		leaps (reverse-name $Rel)
	(else)
		exits
	(endif)
	(the $Obj)
	(if) ($Obj overlooks $Rel $Dest) ~(room $Dest) (then)
		and lands (name $Rel) (the $Dest)
	(endif)
	.

(perform [leave $Obj])
	(narrate leaving $Obj)
	{
		($Obj overlooks $NewRel $NewObj)
	(or)
		($Obj is $NewRel $NewObj)
	}
	(move player to $NewRel $NewObj)

%% GO TO <room>

%% It is only possible to go to visited rooms and non-hidden objects in this
%% way.

(understand [go to | $Words] as [go to $Room])
	*(understand $Words as room name $Room)

(understand [go/approach/find | $Words] as [go to $Room]) %% New: added FIND
	*(understand $Words as room name $Room)

(understand $Words as room name $Room)
	(filter $Words into $Filtered)
	(nonempty $Filtered)
	(determine object $Room)
		*(room $Room)
%%		($Room is visited) %% TODO - should only include visited rooms and rooms adjacent to those, maybe?
	(from words)
		*(dict $Room)
	(matching all of $Filtered)

(unlikely [go to (current room $)])

~(very unlikely [go to $])

~(refuse [go to $])

(perform [go to $Room])
	(current room $Here)
	(if) ($Here = $Room) (then)
		Watson looks around in confusion. Isn't that where he is?
		(tick) (stop)
	(elseif) (shortest path from $Here to $Room is $Path) (then)
		(exhaust) {
			*($Dir is one of $Path)
			(line) \( attempting to go (name $Dir) \) (line)
			(try [go $Dir])
			(tick)
			(par)
		}
		(inhibit next tick)
	(else)
		Watson looks around, trying to figure out an open path, before giving up with a sad look. Some more doors will have to be opened first.
		(tick) (stop)
	(endif)

%% Navigation by direction:

%% What the player types is eventually translated into one of:

%% [leave $Room $Dir]
%% [leave $Room $Dir by $Vehicle]
%% [leave $Room $Dir with $Obj]

%% These are generally the ones to override/extend.

%% The default rules for the aforementioned actions invoke '(prevent entering
%% $Room)' and '(narrate entering $Room)'. These predicates can of course also
%% be overridden. Thus, entering a room is not an action of its own, but is
%% an inherent part of leaving a room.

%% GO <direction>

%% The rule for just typing a list of directions (without a verb) is further
%% down in the file.

(grammar [go/walk/crawl/leave/get/climb [direction]] for [go $])
(grammar [go/walk/crawl [to further] [direction]] for [go $])
(grammar [go/walk/crawl] for [go #out])
(grammar [enter] for [go #in])

(understand [climb] as [go $Dir])
	(current room $Room)
	*($Dir is one of [#up #down])
	(from $Room go $Dir to $)

(unlikely-complex [go $DirList] 0)
	(just)
	(if) (direction $DirList) (then)
		($Dir = $DirList)
	(else)
		%% Only consider the first direction in the list.
		([+ $Dir | $] = $DirList)
	(endif)
	(unlikely [go $Dir])

(unlikely [go $Dir])
	(current room $Room)
	~{
		(from $Room go $Dir to $Target)
		{ (room $Target) (or) (door $Target) (or) (direction $Target) }
	}

(before [go $])
	(recursively leave non-vehicles)

(before [go $Dir])
	(current room $Room)
	(from $Room go $Dir to $Target)
	(door $Target)
	($Target is closed)
	(first try [open $Target])

(prevent [go $])
	(current player $Actor)
	($Actor is $Rel $Obj)
	~(room $Obj)
	~(vehicle $Obj)
	(when $Actor is $Rel $Obj)

(perform [go $Dir])
	(current player $Actor)
	(current room $Room)
	(if) ($Actor has parent $Room) (then)
		(try [leave $Room $Dir])
	(else)
		($Actor has parent $Vehicle)
		(try [leave $Room $Dir by $Vehicle])
	(endif)

%% PUSH <obj> <dir>

(grammar [push/move/shove/shift/press/roll/pull/yank/drag/tug/tow [single] [direction]] for [push $ $])
%% Added PULL synonyms to this

(unlikely [push $Obj $])
	~(pushable $Obj)

(before [push $ $])
	(recursively leave non-vehicles)

(before [push $ $Dir])
	(current room $Room)
	(from $Room go $Dir to $Target)
	(door $Target)
	($Target is closed)
	(first try [open $Target])

(prevent [push $Obj $])
	~(pushable $Obj)
	Watson pushes on (the $Obj), but can't find a good way to maneuver (them $Obj).

(prevent [push $ $])
	(current player $Actor)
	($Actor is $Rel $Obj)
	~{ ($Rel = #in) (room $Obj) }
	(when $Actor is $Rel $Obj)

(perform [push $Obj $Dir])
	(current room $Room)
	(try [leave $Room $Dir with $Obj])

%% PUSH <obj>

(grammar [push/move/shove/shift/press [object]] for [push $])

(prevent [push (animate $Obj)])
	"Oi!" (The $Obj) shoves Watson away.

(perform [push (pushable $Obj)])
	In what direction?
	(asking for direction in [push $Obj []])

(perform [push (room $)])
	Watson prods at his surroundings with one paw.

%% New: pushing things off supporters
(perform [push (item $Obj)])
	($Obj is #on $Supporter)
	($Supporter overlooks $Rel $Destination)
	Watson gives (the $Obj) a vigorous push, sending (them $Obj) off the edge to land (name $Rel) (the $Destination).
	(now) ($Obj is handled)
	(now) ($Obj is $Rel $Destination)

($Inner overlooks $Rel $Destination) %% This can be overridden in the story
	($Inner is $Rel $Destination)

(perform [push (item $Obj)])
	Watson gives (the $Obj) a bit of a push.

(perform [push $Obj])
	Watson prods at (the $Obj) with his nose, but (it $Obj) (doesn't $Obj) budge.
	(tick) (stop)

%% PULL <obj>

(grammar [pull/yank/drag/tug/tow/turn [object]] for [pull $]) %% Added TURN as a synonym, for the dumbwaiter wheel
(grammar [pull/yank/drag/tug/tow on [object]] for [pull $])

(prevent [pull $])
	(when we are holding something)

(perform [pull (pushable $Obj)]) %% Redirect this to PUSH X Y
	In what direction?
	(asking for direction in [push $Obj []])

(perform [pull $Obj])
	Watson gets his teeth around (the $Obj) and tugs, but
	(if) (item $Obj) (then)
		nothing much happens.
	(else)
		(it $Obj) won't budge.
	(endif)

%% TURN <obj>

%% Dogs can't do this

%% READ <obj>

(grammar [read [object]] for [read $])

~(refuse [read $]) %% No need for reachability.

(prevent [read $Obj])
	~(player can see)
	You squint at (the $Obj), but can't make out anything in the darkness.

(instead of [read (read to examine $Obj)]) %% (read to examine $) means read should redirect to examine
	(try [examine $Obj])

(perform [read $Obj])
	(printing $Obj)

(perform [read $Obj]) %% If there's no printing
	There's nothing much written on (the $Obj).

%% FLUSH <obj>
%% FLUSH

(grammar [flush [object]] for [flush $])
(grammar [flush] for itself)

(perform [flush $Obj])
	Watson prods at (the $Obj), trying to figure out how to flush (them $Obj).
	(tick) (stop)

(perform [flush])
	Flush what?
	(asking for object in [flush []])

%% SWIM IN <obj>
%% SWIM

(grammar [swim/bathe in [single]] for [swim in $])
(grammar [swim/bathe] for [swim])

(perform [swim])
	In what?
	(asking for object in [swim in []])

(perform [swim in $Obj])
	Watson looks imploringly at (the $Obj), wishing (it $Obj) were large enough to really swim in.
	(tick) (stop)

%% CLEAN <obj>

(grammar [clean/brush/shine/polish/sweep/dust/wipe/scrub [object]] for [clean $])

(perform [clean $])
	Watson just looks up at you with a canine grin. You've tried to teach him, but he's always been better at making things dirty than making them clean.
	(tick) (stop)

%% TIE <obj> TO <obj>
%% TIE <obj>

%% Dogs can't do this

%% UNTIE <obj> FROM <obj>
%% UNTIE <obj>

(understand [untie | $Words] as [untie $A from $B])
	*(split $Words by [from] into $Left and $Right)
	*(understand $Left as single object $A)
	(if) ($Right = [itself]) (then)
		($B = $A)
	(else)
		*(understand $Right as single object $B)
	(endif)

(unlikely [untie $Obj from $])
	(unlikely [untie $Obj])

(understand [untie | $Words] as [untie $Obj])
	*(understand $Words as non-all object $Obj)

(perform [untie $Obj])
	Watson paws valiantly at (the $Obj), with little effect.
	(tick) (stop)

(perform [untie $Obj from $Other])
	Watson paws valiantly at (the $Obj) and (the $Other), with little effect.
	(tick) (stop)

%% ATTACK <obj> WITH <obj>
%% ATTACK <obj>

(grammar [attack/break/smash/hit/slap/kick/fight/wreck/crack/destroy/murder/kill/thump/claw/scratch [single] with [single held]] for [attack $ with $])
(grammar [attack/break/smash/hit/slap/kick/fight/wreck/crack/destroy/murder/kill/thump/claw/scratch [single]] for [attack $])
%% Added CLAW and SCRATCH for dog purposes, removed TORTURE and PUNCH

(unlikely [attack $ with $Obj])
	~(item $Obj)

(unlikely [attack $ with $Obj])
	(current player $Actor)
	~($Obj has ancestor $Actor)

(before [attack $ with $Obj])
	(ensure $Obj is held)

(prevent [attack $ with $Obj])
	(when $Obj isn't directly held)

(perform [attack $Obj with $])
	(try [attack $Obj])

(unlikely [attack $Obj])
	~(biteable $Obj)

(prevent [attack $Obj])
	(animate $Obj)
	Watson just wags his tail happily. He knows this trap by now: he's (emph {not}) supposed to bite people, no matter how tasty they look.

(perform [attack $Obj])
	Watson glares at (the $Obj), but resists the urge for destruction. He knows he's only allowed to do that to very specific things, and if he wrecks anything else, he'll lose destruction privileges altogether.
	(tick) (stop)

%% LEAVE <room> <dir>
%% LEAVE <room> <dir> BY <vehicle>
%% LEAVE <room> <dir> WITH <object>

(instead of [leave $Room $Dir])
	(from $Room go $Dir to $Target)
	(direction $Target)
	(try [leave $Room $Target])

(prevent [leave $Room $Dir])
	(if) (from $Room go $Dir to $Target) (then)
		(if) (door $Target) (then)
			{
				(when $Target blocks passage)
			(or)
				(from $Room through $Target to $OtherRoom)
				(prevent entering $OtherRoom)
			}
		(elseif) (room $Target) (then)
			(prevent entering $Target)
		(else)
			(narrate failing to leave $Room $Dir)
		(endif)
	(else)
		(if) ($Dir is one of [#out #in]) (then)
			In what direction?
			(asking for direction in [go []])
		(else)
			(narrate failing to leave $Room $Dir)
		(endif)
	(endif)

(narrate leaving $Room $Dir)
	Watson
	(if) ($Dir is one of [#up #down]) (then)
		clambers
	(elseif) (constable is chasing) (then) %% See actions.dg
		scampers
	(elseif) (player can see) (then)
		saunters
	(else)
		noses his way
	(endif)
	(if) (from $Room go $Dir to $Target) (door $Target) (then)
		(if) ($Dir is one of [#up #down #out]) (then)
			(name $Dir)
		(elseif) *($Opt is one of [#up #down #out]) (from $Room go $Opt to $Dir) (then)
			(name $Opt)
		(else)
			through
		(endif)
		(the $Target)
	(else)
		(name $Dir)
	(endif)
	, and you drift along behind.

(perform [leave $Room $Dir])
	(narrate leaving $Room $Dir)
	(from $Room go $Dir to room $Target)
	(enter $Target)

(instead of [leave $Room $Dir with $Obj])
	(from $Room go $Dir to $Target)
	(direction $Target)
	(try [leave $Room $Target with $Obj])

(prevent [leave $Room $Dir with $])
	(prevent [leave $Room $Dir])

(narrate leaving $ $Dir with $Obj)
	Watson maneuvers (the $Obj) carefully (name $Dir), with you following behind.
	(par)

(perform [leave $Room $Dir with $PushObj])
	(narrate leaving $Room $Dir with $PushObj)
	(from $Room go $Dir to room $NewRoom)
	(now) ($PushObj is #in $NewRoom)
	(now) ($PushObj is handled)
	(enter $NewRoom)

(instead of [leave $Room $Dir by $Obj])
	(from $Room go $Dir to $Target)
	(direction $Target)
	(try [leave $Room $Target by $Obj])

(prevent [leave $Room $Dir by $])
	(prevent [leave $Room $Dir])

(narrate leaving $ $Dir by $Obj)
	Watson maneuvers (the $Obj) carefully (name $Dir), with you following behind.
	(par)

(perform [leave $Room $Dir by $Vehicle])
	(narrate leaving $Room $Dir by $Vehicle)
	(from $Room go $Dir to room $NewRoom)
	(enter $NewRoom by $Vehicle)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Commands

(interface (command $<Action))

@(understand command $Action)
	(understand $Action)
	(command $Action)

(describe action (command $Action))
	issue the " (no space) (exhaust) { *($Word is one of $Action) $Word } (no space) " command

%% QUIT

(command [quit])
(understand [quit/q] as [quit])
(perform [quit])
	(div @meta) { Are you sure you want to quit? \(y (no space) / (no space) n\) }
	(if) (yesno) (then)
		(display quit message)
		(line)
		(quit)
	(endif)
	(stop)

(display quit message)
	(par)
	(div @meta) { Thanks for playing! }

%% RESTART

(understand command [restart])
(perform [restart])
	(div @meta) {
		Restart the game from the beginning? \(
		(if) (library links enabled) (then) (link) y (else) y (endif)
		(no space) / (no space)
		(if) (library links enabled) (then) (link) n (else) n (endif)
		\)
	}
	(if) (yesno) (then)
		(restart)
		(div @meta) { Failed to restart. }
	(endif)
	(stop)

%% SAVE

(understand command [save])
(perform [save])
	(if) (save $ComingBack) (then)
		(if) ($ComingBack = 1) (then)
			(roman)
			(div @meta) { Game state restored successfully. }
			(div @roomheader) (location headline)
		(else)
			(div @meta) { Game state saved successfully. }
		(endif)
	(else)
		(div @meta) { Failed to save the game state. }
	(endif)
	(stop)

%% RESTORE

(understand command [restore])
(perform [restore])
	(restore)
	(div @meta) { Failed to restore the game state. }
	(stop)

%% UNDO

(command [undo])
(perform [undo])
	(if) ~(interpreter supports undo) (then)
		(div @meta) { This interpreter doesn't support undo. Sorry! }
	(elseif) (undo) (then)
		(div @meta) { Failed to undo the last turn. }
	(else)
		(div @meta) { There are no more turns to undo! }
	(endif)
	(stop)

(narrate undoing $Words)
	(div @meta) { Undoing the last turn \( (print words $Words) \). }
	(line)
	(location headline)

%% TRANSCRIPT

(command [transcript on])
(understand [transcript/script on] as [transcript on])
(understand [transcript/script] as [transcript on])

(perform [transcript on])
	(div @meta){
		(if) (transcript on) (then)
			Transcript enabled.
		(else)
			(if) (interpreter supports inline status bar) ~(interpreter supports quit) (then)
				%% This almost certainly means we're playing in the web interpreter, which does transcripts differently
				%% It'll print its own explanation, and since we called (transcript on) from within the @meta div, it'll be in the right style too!
			(else)
				Failed to enable transcript.
			(endif)
			(stop)
		(endif)
	}

(command [transcript off])
(understand [transcript/script off] as [transcript off])

(perform [transcript off])
	(transcript off)
	(div @meta) { Transcript disabled. }

%% SCORE

(understand command [score])
	(scoring enabled)

(perform [score])
	(scoring enabled)
	(current score $Score)
	(div @meta) {
		You currently have $Score
		(if) ($Score = 1) (then) point (else) points (endif)
		(if) (maximum score $Max) (then)
			out of a maximum of $Max
		(endif)
		.
	}

%% NOTIFY

(understand command [notify on])
	(scoring enabled)

(perform [notify on])
	(scoring enabled)
	(now) (score notifications are on)
	(div @meta) { Enabling score notifications. }

(understand command [notify off])
	(scoring enabled)

(perform [notify off])
	(scoring enabled)
	(now) ~(score notifications are on)
	(div @meta) { Score notifications have been turned off. }

%% PRONOUNS

(understand command [pronouns])
(perform [pronouns])
	(div @meta) {
		"Me" refers to your spectral self. (line)
		(collect $Obj)
			(player's it refers to $Obj)
		(or)
			(narrator's it refers to $Obj)
		(into $ItList)
		(if) (nonempty $ItList) (then) "It" refers to (or-listing $ItList). (line) (endif)
		(if) (her refers to $Her) (then) "Her" refers to (the $Her). (line) (endif)
		(if) (him refers to $Him) (then) "Him" refers to (the $Him). (line) (endif)
		(if) (them refers to $Them) (then) "Them" refers to (the $Them). (line) (endif)
	}

%% VERBOSE / BRIEF / SUPERBRIEF

(understand command [verbose])
(understand [brief/superbrief] as [verbose])
(perform [verbose])
	(div @meta) { That setting can't be adjusted in this story—Miss Gosling is always a verbose narrator. }
	(stop)

%% VERSION

(understand command [version])
(understand [banner] as [version])
(perform [version])
	(banner)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Simplified grammar definitions

%% A definition like the following:
%%	(grammar [give [held] to [animate]] for [give $ to $])
%% is transformed at compile-time into a compact internal representation:
%%	(grammar entry @give [22 to 11] [give $ to $])

%% The transformation is carried out by the following access predicates:

@(grammar $Words for itself)
	(understand $Words)
@(grammar [$Verb | $More] for $Action)
	(grammar transformer $More [] $Verb $Action 0)
@(grammar [$Verb | $More] for $Action reversed)
	(grammar transformer $More [] $Verb $Action 1)

@(grammar transformer [[single] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [10 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[single object] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [10 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[animate] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [11 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[single held] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [12 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[object] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [20 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[held] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [22 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[takable] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [23 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[worn] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [24 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[child] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [25 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[takable child] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [26 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[any] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [30 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[any animate] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [31 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[topic] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [40 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[direction] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [50 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [[number] | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [60 | $SoFar] $Verb $Action $Rev)
@(grammar transformer [$Head | $Tail] $SoFar $Verb $Action $Rev)
	(grammar transformer $Tail [$Head | $SoFar] $Verb $Action $Rev)
@(grammar transformer [] $SoFar $Verb $Action $Rev)
	(grammar inverter $SoFar [] $Verb $Action $Rev)

@(grammar inverter [$Head | $Tail] $SoFar $Verb $Action $Rev)
	(grammar inverter $Tail [$Head | $SoFar] $Verb $Action $Rev)
@(grammar inverter [] $SoFar $Verb $Action 0)
	(grammar entry $Verb $SoFar $Action)
@(grammar inverter [] $SoFar $Verb $Action 1)
	(grammar entry $Verb $SoFar $Action reversed)

(interface (grammar entry $<Verb $>Grammar $Action))
(interface (grammar entry $<Verb $>Grammar $Action reversed))

%% The resulting grammar tables can be inspected in the debugger, by typing
%% *(grammar entry $ $ $)
%% *(grammar entry $ $ $ reversed)

%% We need a couple of understand-rules that query the grammar table:

(understand [$Verb | $Words] as $Action)
	*(grammar entry $Verb $Grammar $Action)
	*(match grammar $Grammar against $Words into $ObjList)
	(populate template $Action with $ObjList)

(understand [$Verb | $Words] as $Action)
	*(grammar entry $Verb $Grammar $Action reversed)
	*(match grammar $Grammar against $Words into $ObjList)
	(reverse $ObjList $RevObjList)
	(populate template $Action with $RevObjList)

(match grammar [] against [] into [])
(match grammar [$G | $MoreG] against $Words into $ObjList)
	(if) (number $G) (then)
		(if) (empty $MoreG) (then)
			*(match grammar token $G against $Words [] into $Obj)
			($ObjList = [$Obj])
		(else)
			(if) ($MoreG = [$Prep | $YetMoreG]) ~(number $Prep) (then)
				*(split $Words by $Prep into $Left and $Right)
			(else)
				($YetMoreG = $MoreG)
				*(split $Words anywhere into $Left and $Right)
			(endif)
			*(match grammar $YetMoreG against $Right into $MoreObj)
			*(match grammar token $G against $Left $MoreObj into $Obj)
			($ObjList = [$Obj | $MoreObj])
		(endif)
	(else)
		($Words = [$W | $MoreWords])
		(if) (nonempty $G) (then)
			($W is one of $G)
		(else)
			($W = $G)
		(endif)
		*(match grammar $MoreG against $MoreWords into $ObjList)
	(endif)

(match grammar token 10 against $Words $ into $Obj)
	*(understand $Words as single object $Obj)
(match grammar token 11 against $Words $ into $Obj)
	*(understand $Words as single object $Obj preferably animate)
(match grammar token 12 against $Words $ into $Obj)
	*(understand $Words as single object $Obj preferably held)
(match grammar token 20 against $Words $ into $Obj)
	*(understand $Words as non-all object $Obj)
(match grammar token 22 against $Words [$ExclObj | $] into $Obj)
	*(understand $Words as object $Obj preferably held excluding $ExclObj)
(match grammar token 22 against $Words $ into $Obj)
	*(understand $Words as object $Obj preferably held)
(match grammar token 23 against $Words $ into $Obj)
	*(understand $Words as object $Obj preferably takable)
(match grammar token 24 against $Words $ into $Obj)
	*(understand $Words as object $Obj preferably worn)
(match grammar token 25 against $Words [$Parent | $] into $Obj)
	*(understand $Words as object $Obj preferably child of $Parent)
(match grammar token 26 against $Words [$Parent | $] into $Obj)
	*(understand $Words as object $Obj preferably { ($_ has parent $Parent) (takable $_) })
(match grammar token 30 against $Words $ into $Obj)
	*(understand $Words as any object $Obj)
(match grammar token 31 against $Words $ into $Obj)
	*(understand $Words as any object $Obj preferably animate)
(match grammar token 40 against $Words $ into $Obj)
	*(understand $Words as topic $Obj)
(match grammar token 50 against $Words $ into $Obj)
	*(understand $Words as direction $Obj)
(match grammar token 60 against $Words $ into $N)
	*(understand $Words as number $N)

(interface (populate template $Template with $<ObjList))

(populate template [] with [])
(populate template [(fully bound $) | $More] with $ObjList)
	(populate template $More with $ObjList)
(populate template [$Head | $MoreA] with [$Head | $MoreObj])
	(populate template $MoreA with $MoreObj)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Understanding actions with special syntax

%% Rules for understanding actions that do not begin with a verb should go
%% here. This allows the other rules (that do begin with a verb) to be lumped
%% together into a single, efficient lookup operation.

(understand $Words as [go $Dir])
	~(implicit action wants direction)
	*(understand $Words as direction $Dir)

(understand $Words as [tell $Actor to | $Action])
	*(split $Words by [,] into $Left and $Right)
	*(understand $Left as single object $Actor preferably animate)
	(object $Actor) %% Significant when allowing parse errors.
	(current actor $OldActor)
	(now) (current actor $Actor)
	(rewrite $Right into $Simplified)
	(collect $A)
		*(understand $Simplified as $A)
	(into $List)
	(now) (current actor $OldActor)
	*($Action is one of $List)

(understand $Words as $Action)
	(implicit action is $Implicit)
	(if) (implicit action wants direction) (then)
		*(understand $Words as direction $O)
	(else)
		%% We don't know the correct policy, so fall back on 'non-all'.
		*(understand $Words as non-all object $O)
	(endif)
	(recover implicit action $Implicit $O into $Action)

(understand $Words as $Action)
	(default actions enabled)
	~{ (implicit action is $) ~(implicit action wants direction) }
	*(understand $Words as non-all object $Obj)
	~(empty $Obj)
	~($Obj = [1])
	(if) ($Obj = [a $RealObj]) (then)
		(default action $RealObj $Action)
	(else)
		(default action $Obj $Action)
	(endif)

%% And add a second one for recalling that doesn't need scope
%% Recalling is defined in actions.dg
(understand $Words as $Action)
	(default actions enabled)
	~{ (implicit action is $) ~(implicit action wants direction) }
	*(understand $Words as any object $Obj preferably animate)
%%	(animate $Obj)
	(default action $Obj $Action)

(default action $Obj [examine $Obj])

(understand $Words as $Words)
	(understand $Words)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Dealing with actions

%% If the player enters multiple actions on one line ("get lamp. n"), they
%% are parsed and carried out one at a time.

%% A complex action ("get all") is broken down, and the simple actions are
%% carried out in turn.

%% A (simple) action may invoke preliminary actions (e.g. open the door
%% before walking through it). These are carried out in turn.

%% After the preliminary actions (before) have been carried out, the action
%% is potentially refused. Normally, actions that involve unreachable objects
%% are refused; this is overridden by actions, such as look at, that don't
%% require reachability.

%% If the action wasn't refused, it will be handled by the (instead of $)
%% predicate. This predicate can be overridden for special cases in the story.
%% The default behaviour is to further break down handling into two stages:
%% Prevent and perform.
%% They are separate because it's convenient to be able to override
%% e.g. what happens when you put the twig in the fire without also overriding
%% the default checks, such as whether you are holding the twig.

%% (prevent $) should print something and succeed if the player character
%% tries, but there's a problem with completing the action. When prevent
%% succeeds, time is advanced (tick), and further actions are stopped.

%% If prevent fails, (perform $) is invoked to carry out the action. For the
%% eighteen core actions in this standard library, the perform rules call out
%% to a separate (narrate ...) rule, for stories that wish to override the
%% narration without affecting the default operations on the object tree.

%% Note that the world model is updated after narrating. This allows the
%% narrate rule to query the world as it used to be, before carrying out the
%% operation, in order to say for instance 'you take the worm out of the can'.

%% If something dramatic happens, an overriding rule should advance time if
%% necessary and (stop). So if the player types "n. n", and the first action
%% implies opening a door, which implies unlocking the door, and the unlocking
%% triggers a cutscene, then opening the door is cancelled, and the second "n"
%% is also ignored.

%% After a non-command action, time is advanced using (tick). This can be
%% inhibited by querying (inhibit next tick).

%% Throughout this procedure, as soon as a refuse or prevent rule succeeds (or
%% (stop) is invoked), the entire procedure stops, and further actions are
%% ignored.

(describe action $Action)
	(describe self-describing action $Action)

(describe self-describing action [])

(describe self-describing action [(word $W) | $More])
	(just)
	$W
	(describe self-describing action $More)

(describe self-describing action [$Obj | $More])
	(the full $Obj)
	(describe self-describing action $More)

%% Debugging predicates:

(interface (actions on))
(interface (actions off))

(actions on)
	(now) (tracing actions)

(actions off)
	(now) ~(tracing actions)

(interface (try $<Action))

(try $Action)
	(if) (tracing actions) (then)
		(line) ACTION: $Action \( (describe action $Action) \) (line)
	(endif)
	~{ (refuse $Action) (stop) }
	(exhaust) *(before $Action)
	~{ (refuse $Action) (stop) }
	(instead of $Action)

(try $)
	%% Try always succeeds; this prevents accidental double-triggers.

(interface (first try $<Action))

(first try $Action)
	(line) \( first attempting to (describe action $Action) \) (line)
	(try $Action)
	(tick)
	(par)

(refuse $Action)
	*($Obj is one of $Action)
	(object $Obj)
	~(direction $Obj)
	~(relation $Obj)
	{
		(when $Obj is not here)
		(or) (when $Obj is out of reach)
	}

(before $)	(fail)

(instead of $Action)
	~{ (prevent $Action) (tick) (stop) }
	(perform $Action)
	(exhaust) *(after $Action)

(prevent $)	(fail)

(perform $Action)
	You can't (describe action $Action).
	(tick) (stop)

(after $)	(fail)

(interface (try-complex $<Action))

(try-complex $ComplexAction)
	(if) ~(action $ComplexAction preserves the question) (then)
		(now) ~(implicit action is $)
		(now) ~(implicit action wants direction)
	(endif)
	(if) ~(allowed action $ComplexAction) (then)
		(report disallowed action $ComplexAction)
		(stop)
	(elseif) ([] is one of $ComplexAction) (then)
		Watson looks up at you, tail wagging, no comprehension in his eyes. He got the basic idea, but has no idea what in particular you want him to do it to.
		(stop)
	(else)
		(strip decorations from $ComplexAction into $MultiAction)
		%% Now we have something like:
		%% [put [#marble1 #marble2 #marblefloor] #in #bowl]
		
		%% NEW - notice all appropriate objects in the command, not just the first one
		%% Separated out into its own predicate
		(notice objects from $MultiAction)
		
		(if) *($List is one of $MultiAction) (nonempty $List) (then)
			(exhaust) {
				*(regroup stripped action $MultiAction of
					$MultiAction into $Regrouped $Multi)
				%% Assuming the marbles are fungible, now we
				%% are backtracking over:
				%% [put [#marble1 #marble2] #in #bowl]
				%% [put #marblefloor #in #bowl]
				(if)
					~(empty $Multi)
				(then)
					%% If at least two multi-actions are
					%% implied, describe each step.
					(line)
					(if) (library links enabled) (then)
						(link) (The full $Multi)
					(else)
						(The full $Multi)
					(endif)
					:
				(endif)
				(try regrouped $Regrouped)
			}
		(else)
			%% Optimise the common case.
			(try regrouped $MultiAction)
		(endif)
	(endif)

(try regrouped $Regrouped)
	(exhaust) {
		*($Regrouped recursively contains $O)
		(object $O)
		(now) ~($O is hidden)
	}
	(if)
		*($Elem is one of $Regrouped)
		(nonempty $Elem)
	(then)
		(group-try $Regrouped)
	(else)
		(try $Regrouped)
	(endif)
	(if) ~(command $Regrouped) (then)
		(tick)
	(endif)
	(par)

%% Add rules to the following six predicates, and to
%% '(action $ may group $ with $)', to deal with groups of objects.

(group-refuse $MultiAction)
	*(expand group-action $MultiAction into $Simple)
	(refuse $Simple)

(group-before $MultiAction)
	*(expand group-action $MultiAction into $Simple)
	*(before $Simple)

(group-instead of $MultiAction)
	~{ (group-prevent $MultiAction) (tick) (stop) }
	(group-perform $MultiAction)
	(exhaust) *(group-after $MultiAction)

(group-prevent $MultiAction)
	*(expand group-action $MultiAction into $Simple)
	(prevent $Simple)

(group-perform $MultiAction)
	(exhaust) {
		*(expand group-action $MultiAction into $Simple)
		(perform $Simple)
	}

(group-after $MultiAction)
	*(expand group-action $MultiAction into $Simple)
	*(after $Simple)

(interface (group-try $<MultiAction))

(group-try $MultiAction)
	(if) (tracing actions) (then)
		(line)
		GROUP ACTION: $MultiAction \( (describe action $MultiAction) \)
		(line)
	(endif)
	~{ (group-refuse $MultiAction) (stop) }
	(exhaust) *(group-before $MultiAction)
	~{ (group-refuse $MultiAction) (stop) }
	(group-instead of $MultiAction)

(interface (first group-try $<MultiAction))

(first group-try $MultiAction)
	(line) \( First, he has to (describe action $MultiAction) \) (line)
	(group-try $MultiAction)
	(tick)
	(par)

(strip decorations from [] into [])

(strip decorations from [[a $Obj] | $MoreIn] into [$Obj | $MoreOut])
	(strip decorations from $MoreIn into $MoreOut)

(strip decorations from [[+ | $MultiIn] | $MoreIn] into [$MultiOut | $MoreOut])
	(strip decorations from $MultiIn into $MultiOut)
	(strip decorations from $MoreIn into $MoreOut)

(strip decorations from [$Obj | $MoreIn] into [$Obj | $MoreOut])
	(strip decorations from $MoreIn into $MoreOut)

(expand group-action [] into [])

(expand group-action [$HeadIn | $TailIn] into [$HeadOut | $TailOut])
	(if) (nonempty $HeadIn) (then)
		*($HeadOut is one of $HeadIn)
	(else)
		($HeadOut = $HeadIn)
	(endif)
	*(expand group-action $TailIn into $TailOut)

%% If the input is [frob [#a #b] #c [#d #e #f] [#e #d]]
%% and #d and #e can form a group, then we return four times:
%% Action:                             Multi:
%% [frob #a #c [#d #e] [#e #d]]        [#a [#d #e]]
%% [frob #a #c #f [#e #d]]             [#a #f]
%% [frob #b #c [#d #e] [#e #d]]        [#b [#d #e]]
%% [frob #b #c #f [#e #d]]             [#b #f]

(regroup stripped action [] of $ into [] [])

(regroup stripped action [$HeadIn | $TailIn] of $Action into [$HeadOut | $TailOut] $Multi)
	(if) (nonempty $HeadIn) (then)
		(regroup objects $HeadIn of $Action into $GroupList)
		(if) ($GroupList = [$Single]) (then)
			%% All of the objects in this slot ended up in the
			%% same group, like [#e #d] in the example.
			($HeadOut = $Single)
			*(regroup stripped action $TailIn of $Action into $TailOut $Multi)
		(else)
			%% Backtrack over the groups.
			*($HeadOut is one of $GroupList)
			*(regroup stripped action $TailIn of $Action into $TailOut $MultiTail)
			($Multi = [$HeadOut | $MultiTail])
		(endif)
	(else)
		%% This was a regular object or word, like @frob or #c.
		($HeadOut = $HeadIn)
		*(regroup stripped action $TailIn of $Action into $TailOut $Multi)
	(endif)

%% Transform e.g.:
%% [#marble1 #marblefloor #marble2] into [[#marble1 #marble2] #marblefloor]
%% [#foo #bar #bar #baz] into [#foo #bar #baz]

(regroup objects [] of $ into [])

(regroup objects [$HeadIn | $TailIn] of $Action into [$HeadOut | $TailOut])
	(collect group members $TailIn $HeadIn $Action $Included $Excluded)
	(if) (nonempty $Included) (then)
		($HeadOut = [$HeadIn | $Included])
	(else)
		($HeadOut = $HeadIn)
	(endif)
	(regroup objects $Excluded of $Action into $TailOut)

(collect group members $InputList $Key $Action $Included $Excluded)
	(collect $Obj1)
		*($Obj1 is one of $InputList)
		(action $Action may group $Key with $Obj1)
	(into $Included)
	(collect $Obj2)
		*($Obj2 is one of $InputList)
		~(action $Action may group $Key with $Obj2)
	(into $Excluded)

(interface (action $<Action may group $<Obj1 with $<Obj2))

(action $ may group $ with $)
	(fail)

(unlikely-complex $ComplexAction $VeryLevel)
	(strip decorations from $ComplexAction into $Stripped)
	*(expand group-action $Stripped into $Simple)
	(level $VeryLevel unlikely $Simple)

(level 0 unlikely $Action)
	(unlikely $Action) (or)
	(very unlikely $Action) (or)
	(very very unlikely $Action)

(level 1 unlikely $Action)
	(very unlikely $Action) (or)
	(very very unlikely $Action)

(level 2 unlikely $Action)
	(very very unlikely $Action)

%% Current and nearby rooms are in scope, but they're rarely what the player
%% means. The following rules ensure that most actions that mention rooms
%% directly are considered unlikely.

(very unlikely [(room $) | $])
(very unlikely [$ | $More])
	(very unlikely $More)

%% Only report the unrecognised topic (@?) as a last resort.

(interface (very very unlikely $<Action))

(very very unlikely [? | $])
(very very unlikely [$ | $More])
	(very very unlikely $More)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Daemons

(inhibit next tick)
	(now) (inhibiting next tick)

(tick)
	(if) (inhibiting next tick) (then)
		(now) ~(inhibiting next tick)
	(else)
		(update environment around player)
		(exhaust) *(early on every tick)
		(exhaust) *(on every tick)
		(exhaust) *(late on every tick)
		(if) (stop signal given) (then) %% A way to cut off multiple actions in an (on every tick) rule without interfering with other daemons)
			(now) ~(stop signal given)
			(stop)
		(endif)
	(endif)

%% Stories may add rules to the following predicates:

(on every tick)
	(current room $Room)
	*(on every tick in $Room)

(on every tick)
	(if) (narrator's it is protected) (then)
		(now) ~(narrator's it is protected)
	(elseif) (player's it refers to $) (then)
		%% The narrator's it is short-lived, except when
		%% 'it' unambiguously refers to it.
		(now) ~(narrator's it refers to $)
	(endif)

(on every tick in $)		(fail)

(early on every tick)		(fail)
(late on every tick)		(fail)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Non-player characters

%% (let $NPC take $Obj)		(narrate $NPC taking $Obj)
%% (let $NPC drop $Obj)		(narrate $NPC dropping $Obj)
%% (let $NPC wear $Obj)		(narrate $NPC wearing $Obj)
%% (let $NPC remove $Obj)	(narrate $NPC removing $Obj)
%% (let $NPC put $A $Rel $B)	(narrate $NPC putting $A $Rel $B)
%% (let $NPC open $Obj)		(narrate $NPC opening $Obj)
%% (let $NPC close $Obj)	(narrate $NPC closing $Obj)

%% (let $NPC climb $Obj)	(narrate $NPC climbing $Obj)
%% (let $NPC enter $Obj)	(narrate $NPC entering $Obj)
%% (let $NPC leave $Obj)	(narrate $NPC leaving $Obj)
%% (let $NPC go $Dir)		(narrate $NPC leaving $Room $Dir to $NewRoom)
%%				(narrate $NPC entering $Room from $OldRoom)

%% No checks are carried out -- only attempt an NPC action if it makes sense!

(interface (let $<NPC climb $<Obj))
(interface (narrate $<NPC climbing $<Obj))

(let $NPC climb $Obj)
	(if) (player can see $Obj) (then)
		(narrate $NPC climbing $Obj)
	(endif)
	(now) ($NPC is #on $Obj)

(narrate $NPC climbing $Obj)
	(The $NPC) get(s $NPC) onto (the $Obj).
	(notice $NPC)

(interface (let $<NPC close $<Obj))
(interface (narrate $<NPC closing $<Obj))

(let $NPC close $Obj)
	(if) (player can see $Obj) (then)
		(narrate $NPC closing $Obj)
	(endif)
	(now) ($Obj is closed)

(narrate $NPC closing $Obj)
	(The $NPC) close(s $NPC) (the $Obj).
	(notice $NPC)

(interface (let $<NPC drop $<Obj))
(interface (narrate $<NPC dropping $<Obj))

(let $NPC drop $Obj)
	(if) (player can see $NPC) (then)
		(narrate $NPC dropping $Obj)
	(endif)
	($NPC is $Rel $Loc)
	(now) ($Obj is $Rel $Loc)

(narrate $NPC dropping $Obj)
	(The $NPC) drop(s $NPC) (the $Obj).
	(notice $NPC)

(interface (let $<NPC enter $<Obj))
(interface (narrate $<NPC entering $<Obj))

(let $NPC enter $Obj)
	(if) (player can see $Obj) (then)
		(narrate $NPC entering $Obj)
	(endif)
	(now) ($NPC is #in $Obj)

(narrate $NPC entering $Obj)
	(The $NPC) get(s $NPC) into (the $Obj).
	(notice $NPC)

(interface (let $<NPC go $<Dir))
(interface (narrate $<NPC leaving $<OldRoom $<Dir to $<NewRoom))
(interface (narrate $<NPC entering $<NewRoom from $<OldRoom))

(let $NPC go $Dir)
	($NPC is in room $OldRoom)
	(from $OldRoom go $Dir to room $NewRoom)
	(if) (player can see $NPC) (then)
		(narrate $NPC leaving $OldRoom $Dir to $NewRoom)
	(endif)
	(now) ($NPC is #in $NewRoom)
	(if) (player can see $NPC) (then)
		(narrate $NPC entering $NewRoom from $OldRoom)
	(endif)

(narrate $Obj leaving $ $Dir to $NewRoom)
	(The $Obj) disappear(s $Obj) (name $Dir) 
%%	(if) ($NewRoom is visited) (then)
	to (the $NewRoom)
%%	(endif)
	.

(narrate $Obj entering $NewRoom from $OldRoom)
	(if) (from $NewRoom go $InDir to room $OldRoom) (then)
		(if) ($InDir = #in) (then)
			(The $Obj) leaves (the $OldRoom).
		(else)
			(The $Obj) enter(s $Obj) from (from-adverb $InDir).
			(notice $Obj)
		(endif)
	(else)
		(The $Obj) enter(s $Obj) from (the $OldRoom).
		(notice $Obj)
	(endif)

(interface (let $<NPC leave $<Obj))
(interface (narrate $<NPC leaving $<Obj))

(let $NPC leave $Obj)
	(if) (player can see $Obj) (then)
		(narrate $NPC leaving $Obj)
	(endif)
	($Obj is $Rel $Loc)
	(now) ($NPC is $Rel $Loc)

(narrate $NPC leaving $Obj)
	(The $NPC) leave(s $NPC) (the $Obj).
	(notice $NPC)

(interface (let $<NPC open $<Obj))
(interface (narrate $<NPC opening $<Obj))

(let $NPC open $Obj)
	(if) (player can see $Obj) (then)
		(narrate $NPC opening $Obj)
	(endif)
	(now) ($Obj is open)

(narrate $NPC opening $Obj)
	(The $NPC) open(s $NPC) (the $Obj).
	(notice $NPC)

(interface (let $<NPC put $<Obj $<Rel $<Dest))
(interface (narrate $<NPC putting $<Obj $<Rel $<Dest))

(let $NPC put $Obj $Rel $Dest)
	(if) (player can see $NPC) (then)
		(narrate $NPC putting $Obj $Rel $Dest)
	(endif)
	(now) ($Obj is $Rel $Dest)

(narrate $NPC putting $Obj $Rel $Dest)
	(The $NPC) put(s $NPC) (the $Obj) (name $Rel) (the $Dest).
	(notice $NPC)

(interface (let $<NPC remove $<Obj))
(interface (narrate $<NPC removing $<Obj))

(let $NPC remove $Obj)
	($Obj is #wornby $NPC)
	(if) (player can see $NPC) (then)
		(narrate $NPC removing $Obj)
	(endif)
	(exhaust) {
		*($Sub is #under $Obj)
		(now) ($Sub is #wornby $NPC)
	}
	(now) ($Obj is #heldby $NPC)

(narrate $NPC removing $Obj)
	(The $NPC) take(s $NPC) off (the $Obj).
	(notice $NPC)

(interface (let $<NPC take $<Obj))
(interface (narrate $<NPC taking $<Obj))

(let $NPC take $Obj)
	(if) (player can see $NPC) (then)
		(narrate $NPC taking $Obj)
	(endif)
	(now) ($Obj is #heldby $NPC)

(narrate $NPC taking $Obj)
	(The $NPC) take(s $NPC) (the $Obj).
	(notice $NPC)

(interface (let $<NPC wear $<Obj))
(interface (narrate $<NPC wearing $<Obj))

(let $NPC wear $Obj)
	(if) (player can see $NPC) (then)
		(narrate $NPC wearing $Obj)
	(endif)
	(now) ($Obj is #wornby $NPC)

(narrate $NPC wearing $Obj)
	(The $NPC) put(s $NPC) on (the $Obj).
	(notice $NPC)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Numbers

(interface (parse numeral $<Word into $>Number))

(parse numeral @zero into 0)
(parse numeral @one into 1)
(parse numeral @two into 2)
(parse numeral @three into 3)
(parse numeral @four into 4)
(parse numeral @five into 5)
(parse numeral @six into 6)
(parse numeral @seven into 7)
(parse numeral @eight into 8)
(parse numeral @nine into 9)
(parse numeral @ten into 10)
(parse numeral @eleven into 11)
(parse numeral @twelve into 12)
(parse numeral @thirteen into 13)
(parse numeral @fourteen into 14)
(parse numeral @fifteen into 15)
(parse numeral @sixteen into 16)
(parse numeral @seventeen into 17)
(parse numeral @eighteen into 18)
(parse numeral @nineteen into 19)
(parse numeral $N into $N) (number $N)

(interface (understand $<Words as number $>Number))

(understand [$Word] as number $N)
	(parse numeral $Word into $N)

(interface (spell out $<Number))

(spell out 0)		zero
(spell out 1)		one
(spell out 2)		two
(spell out 3)		three
(spell out 4)		four
(spell out 5)		five
(spell out 6)		six
(spell out 7)		seven
(spell out 8)		eight
(spell out 9)		nine
(spell out 10)		ten
(spell out 11)		eleven
(spell out 12)		twelve
(spell out 13)		thirteen
(spell out 14)		fourteen
(spell out 15)		fifteen
(spell out 16)		sixteen
(spell out 17)		seventeen
(spell out 18)		eighteen
(spell out 19)		nineteen
(spell out $N)		$N

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Printing the names of objects and object lists

(interface (a $<Obj))
(interface (the $<Obj))
(interface (the full $<Obj))
(interface (A $<Obj))
(interface (A full $<Obj))
(interface (Name $<Obj))
(interface (The $<Obj))
(interface (The full $<Obj))

(a [])			nothing
(a (list $List))	(a-listing $List)

(the [])		something	%% May appear in incomplete actions.
(the full [])		something	%% May appear in incomplete actions.
(the [1])		someone		%% May appear in incomplete actions.
(the full [1])		someone		%% May appear in incomplete actions.

(the [a $Obj])			(a $Obj)
(the [+ | $List])		(the-listing $List)
(the (list $List))		(the-listing $List)

(the full [a $Obj])		(a full $Obj)
(the full [+ | $List])		(the-full-listing $List)
(the full [, | $List])		(the-full-or-listing $List)
(the full (list $List))		(the-full-listing $List)

(it [$Single])			(it $Single)
(its [$Single])			(its $Single)
(itself [$Single])		(itself $Single)
(is [$Single])			(is $Single)
(isn't [$Single])		(isn't $Single)
(has [$Single])			(has $Single)
(does [$Single])		(does $Single)
(s [$Single])			(s $Single)
(es [$Single])			(es $Single)
(the [$Single] is)		(the $Single is)
(it [$Single] is)		(it $Single is)
(them [$Single])		(them $Single)

(it (nonempty $List))		they
(its (nonempty $List))		their
(itself (nonempty $List))	themselves
(is (nonempty $List))		are
(isn't (nonempty $List))	aren't
(has (nonempty $List))		have
(does (nonempty $List))		do
(s (nonempty $List))
(es (nonempty $List))
(the (nonempty $List) is)	(the $List) are
(it (nonempty $List) is)	they're
(them (nonempty $List))		them

(the full $Obj)		
	(the $Obj)
	(add location information for $Obj)

(a full $Obj)
	(a $Obj)
	(add location information for $Obj)

(interface (add location information for $<Obj))

(add location information for $Obj)
	(if) (clarify location of $Obj) ~(direction $Obj) ~(relation $Obj) (then)
		(if)
			(current room $Room)
			(from $Room go $Dir to $Obj)
			(direction $Dir)
		(then)
			(present-adverb $Dir)
		(elseif)
			($Obj is $Rel $Loc)
			~(room $Loc)
		(then)
			(if) (plural $Obj) (then)
				that are
			(else)
				that's
			(endif)
			(name $Rel) (the full $Loc)
		(endif)
	(endif)

(clarify location of (door $Obj))
	~(singleton $Obj)

(a ($Obj is hidden))	(reveal $Obj) (fail) %% Proceed with normal handling.
(the ($Obj is hidden))	(reveal $Obj) (fail) %% Proceed with normal handling.

%% (a (current player $Obj))
	(if) (library links enabled) (then)
		(link [myself]) yourself
	(else)
		yourself
	(endif)

(A (current player $Obj))
	(if) (library links enabled) (then)
		(link [me]) You
	(else)
		You
	(endif)

%% (the $Obj)		(current player $Obj) yourself %% Should now say "your spectral self" per the definition in intro.dg
(The $Obj)		(current player $Obj) You
(it $Obj)		(current player $Obj) you
(them $Obj)		(current player $Obj) you
(its $Obj)		(current player $Obj) your
(itself $Obj)		(current player $Obj) yourself
(is $Obj)		(current player $Obj) are
(isn't $Obj)		(current player $Obj) aren't
(has $Obj)		(current player $Obj) have
(does $Obj)		(current player $Obj) do
%% (that $Obj)		(current player $Obj) yourself
(s $Obj)		(current player $Obj)
(es $Obj)		(current player $Obj)
(the $Obj is)		(current player $Obj) you're
(it $Obj is)		(current player $Obj) you're
%% (That $Obj)		(current player $Obj) You
%% (That's $Obj)		(current player $Obj) You're

(a (proper $Obj))	(maybe link $Obj)
(the (proper $Obj))	(name $Obj)

(a (your $Obj))		your (maybe link $Obj)
(the (your $Obj))	your (name $Obj)

(a (singleton $Obj))	(maybe link $Obj {(the $_)})

(a (pair $Obj))		a pair of (maybe link $Obj)

(a (uncountable $Obj))	some (maybe link $Obj)

(a (plural $Obj))	some (maybe link $Obj)
(it (plural $))		they
(them (plural $))	them
(itself (plural $))	themselves
(its (plural $))	their
(it (plural $) is)	they're
(s (plural $))
(es (plural $))
(is (plural $))		are
(isn't (plural $))	aren't
(has (plural $))	have
(does (plural $))	do
%% (that (plural $))	those
%% (That's (plural $))	Those are

(a (an $Obj))		an (maybe link $Obj)

(it (female $))		she
(them (female $))	her
(itself (female $))	herself
(its (female $))	her
(it (female $) is)	she's

(it (male $))		he
(them (male $))		him
(itself (male $))	himself
(its (male $))		his
(it (male $) is)	he's

(a $Obj)		a (maybe link $Obj)
(the $Obj)		the (name $Obj)
(it $)			it
(them $)		it
(itself $)		itself
(its $)			its
(s $)			(no space) s
(es $)			(no space) es
(is $)			is
(isn't $)		isn't
(has $)			has
(does $)		does
(the $O is)		(the $O) (is $O)
(it $O is)		(it $O) (is $O)
%% (that $)		that
%% (That's $)		That's

(doesn't $Obj)		(does $Obj) (no space) n't

(name $)

%% Avoid a compiler warning, since the library doesn't use this:
(interface (Its $<Obj))

(Name $Obj)		(uppercase) (name $Obj)
(A $Obj)		(uppercase) (a $Obj)
(The $Obj)		(uppercase) (the $Obj)
(A full $Obj)		(uppercase) (a full $Obj)
(The full $Obj)		(uppercase) (the full $Obj)
(It $Obj)		(uppercase) (it $Obj)
(Its $Obj)		(uppercase) (its $Obj)
(The $Obj is)		(uppercase) (the $Obj is)
%% (That $Obj)		(uppercase) (that $Obj)

(interface ($<Obj))

($Obj)
	(link) (name $Obj)

(interface ($<Obj $<Text))

($Obj $Text)
	(if) (interpreter supports links) (then)
		(collect words)
			(name $Obj)
		(into $Words)
		(link $Words) (query $Text)
	(else)
		(query $Text)
	(endif)

(maybe link $Obj)
	(if) (library links enabled) (then)
		(link) (name $Obj)
	(else)
		(name $Obj)
	(endif)

(maybe link $Obj $Closure)
	(if) (library links enabled) (then)
		(if) (current player $Obj) (then)
			(link [myself]) (query $Closure $Obj)
		(else)
			(link) (query $Closure $Obj)
		(endif)
	(else)
		(query $Closure $Obj)
	(endif)

(interface (open or closed $<Obj))

(open or closed $Obj)
	(if) ($Obj is open) (then)
		open
	(else)
		closed
	(endif)

(a-listing $List)
	(listing $List {(a $_)} @and [] 0)
(the-listing $List)
	(listing $List {(the $_)} @and @the 0)
(the-full-listing $List)
	(listing $List {(the full $_)} @and @the 0)
(the-full-or-listing $List)
	(listing $List {(maybe link $_ {(the full $_)})} @or @the 0)
(or-listing $List)
	(listing $List {(the $_)} @or @the 0)

(listing [] $ $ $ 0)
	nothing
(listing [$Head | $Tail] $PrintClosure $Conjunction $The $NPrinted)
	(if) (fungibility enabled) (then)
		(combine-fungible $Tail $Head $NInc $Rest)
	(else)
		($Rest = $Tail)
	(endif)
	(if) (empty $Rest) (then)
		(if) ($NPrinted > 1) (then) , (endif)
		(if) ($NPrinted > 0) (then) $Conjunction (endif)
	(else)
		(if) ($NPrinted > 0) (then) , (endif)
	(endif)
	(if) (fungibility enabled) ($NInc > 1) (then)
		(if) ($The = @the) (then)
			the
			(spell out $NInc)
			(plural name $Head)
		(else)
			(spell out $NInc)
			(if) (library links enabled) (then)
				(link) (plural name $Head)
			(else)
				(plural name $Head)
			(endif)
		(endif)
	(else)
		(query $PrintClosure $Head)
	(endif)
	($NPrinted plus 1 into $NPp1)
	(if) (nonempty $Rest) (then)
		(listing $Rest $PrintClosure $Conjunction $The $NPp1)
	(endif)

(interface (list of objects $<Rel $<Loc))

(list of objects $Rel $Loc)
	(collect $Obj)
		*($Obj is $Rel $Loc)
	(into $List)
	(a $List)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Generating dictionary words for objects

(dict (your $))
	my mine

(dict (pair $))
	pair

(plural dict (pair $))
	pairs

(dict (openable $Obj))
	(if) ($Obj is open) (then)
		%% With default actions, "open box" would look like a request
		%% to examine an already-open box, which is probably not
		%% what the player intended.
		(if) ~(default actions enabled) (then) open (endif)
		opened
	(else)
		closed
	(endif)

(dict (lockable $Obj))
	(if) ($Obj is locked) (then)
		locked
	(else)
		unlocked
	(endif)

%% By default, any word mentioned in the name rule is included:

(dict $Obj)
	(name $Obj)

%% The plural dict should only mention nouns, so the default rule can't
%% invoke (plural name $).

(plural dict $)
	(fail)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Setting the pronouns from an object

(interface (notice $<Obj))

(notice $Obj)
	(if) (object $Obj) (then)
		(reveal $Obj)
		(if) (ambiguously plural $Obj) (then) %% New - added "ambiguously plural" as in Inform
			(now) (them refers to [$Obj])
			(now) (narrator's it refers to $Obj)
			(now) (narrator's it is protected)
			(if) (player's it refers to $Obj) (then)
				(now) ~(player's it refers to $)
			(endif)
		(elseif) (plural $Obj) (or) (pair $Obj) (then)
			(now) (them refers to [$Obj])
		(elseif) (female $Obj) (then)
			(now) (her refers to $Obj)
		(elseif) (male $Obj) (then)
			(now) (him refers to $Obj)
		(else)
			(now) (narrator's it refers to $Obj)
			(now) (narrator's it is protected)
			(if) (player's it refers to $Obj) (then)
				(now) ~(player's it refers to $)
			(endif)
		(endif)
	(elseif) (list $Obj) (then)
		(if) ($Obj = [$Single]) (then)
			(notice $Single)
		(else)
			(now) (them refers to $Obj)
		(endif)
	(endif)

(notice player's $Obj)
	(update last named object to $Obj) %% New - track the single most recently mentioned object as well as the pronouns, see utils.dg
	(if) ~(current player $Obj) (then)
		(if) (ambiguously plural $Obj) (then) %% New - set both IT and THEM like in Inform
			(now) (them refers to [$Obj])
			(now) (player's it refers to $Obj)
			(if) (narrator's it refers to $Obj) (then)
				(now) ~(narrator's it refers to $)
			(endif)
		(elseif) (plural $Obj) (or) (pair $Obj) (then)
			(now) (them refers to [$Obj])
		(elseif) (list $Obj) (then)
			(if) ($Obj = [$Single]) (then)
				(notice player's $Single)
			(else)
				(now) (them refers to $Obj)
			(endif)
		(elseif) (female $Obj) (then)
			(now) (her refers to $Obj)
		(elseif) (male $Obj) (then)
			(now) (him refers to $Obj)
		(else)
			(now) (player's it refers to $Obj)
			(if) (narrator's it refers to $Obj) (then)
				(now) ~(narrator's it refers to $)
			(endif)
		(endif)
	(endif)

(notice objects from $MultiAction) %% Just putting an (exhaust) around this block of code so it hits all objects, not just the first
	(exhaust) {
		*($Obj is one of $MultiAction)
		{
			(nonempty $Obj)
		(or)
			(object $Obj)
			~(direction $Obj)
			~(relation $Obj)
			~(room $Obj)
		}
		(notice player's $Obj)
	}

(clear all pronouns)
	(now) ~(player's it refers to $)
	(now) ~(narrator's it refers to $)
	(now) ~(her refers to $)
	(now) ~(him refers to $)
	(now) ~(them refers to $)

(forget pronouns out of scope)
	(check scope of last named object) %% New - see utils.dg
	(if) (player's it refers to $Obj) ~($Obj is in scope) (then)
		(now) ~(player's it refers to $)
	(endif)
	(if) (narrator's it refers to $Obj) ~($Obj is in scope) (then)
		(now) ~(narrator's it refers to $)
	(endif)
	(if) (him refers to $Obj) ~($Obj is in scope) (then)
		(now) ~(him refers to $)
	(endif)
	(if) (her refers to $Obj) ~($Obj is in scope) (then)
		(now) ~(her refers to $)
	(endif)
	(if)
		(them refers to $ObjList)
		*($Obj is one of $ObjList)
		~($Obj is in scope)
	(then)
		(now) ~(them refers to $)
	(endif)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Default descriptions etc.

(descr (current player $))
	Well, there you are.

(descr (door $Door))
	~($Door blocks light)
	(current room $Room)
	(from $Room through $Door to $R)
	Through (the $Door) you see (the $R).

(descr (door $Door))
	(openable $Door)
	(The $Door is) currently (open or closed $Door).

(descr $O)
	(current room $Room)
	*(from $Room go $Dir to $O)
	(direction $Dir)
	(The $O is) (name $Dir) from here.

(descr $Obj)
	(It $Obj) seem(s $Obj) to be harmless.

(look $Obj)
	(descr $Obj)

(feel (room $))
	Watson prods his surroundings with an inquisitive paw.

(feel $Obj)
	Watson prods (the $Obj) with an inquisitive paw.

(appearance $Obj $ $)
	(appearance $Obj)

(appearance (item $Obj))
	($Obj is handled)
	($Obj is $Rel $Loc)
	(if) ($Rel = #in) (room $Loc) (then)
		You see (a $Obj) here.
	(else)
		(A $Obj) (is $Obj) (name $Rel) (the $Loc).
	(endif)

(appearance (nonempty $List))
	(fungibility enabled)
	($List = [$Head | $])
	($Head is $Rel $Loc)
	(if) ($Rel = #in) (room $Loc) (then)
		You see (a $List) here.
	(else)
		(A $List) are (name $Rel) (the $Loc).
	(endif)

(make appearances $Rel $Loc)
	(if)
		~{ (opaque $Loc) ($Loc is closed) ($Rel = #in) }
		($Loc is $ParentRel $ParentLoc)
	(then)
		(make appearances $ParentRel $ParentLoc)
	(endif)
	(if) (fungibility enabled) (then)
		(collect $Obj)
			*($Obj is $Rel $Loc)
			~($Obj is hidden)
		(into $ObjList)
		(fungibility-enabled appearance $ObjList $Rel $Loc)
	(else)
		(exhaust) {
			*($Object is $Rel $Loc)
			~($Object is hidden)
			(par)
			(appearance $Object $Rel $Loc)
			(notice $Object)
		}
	(endif)

(interface (list objects $<Rel $<Loc))

(list objects $Rel $Loc) %% MODIFIED DMS to not print anything if the player is there (because the (appearance $ $ $) predicate will handle that)
	(current player $Player)
	(collect $Obj)
		*($Obj is $Rel $Loc)
		~(current player $Obj)
	(into $List)
	(if) (nonempty $List) ~($Player is $Rel $Loc) (then)
		(Name $Rel) (the $Loc) (is $List) (a $List).
		(notice $List)
	(endif)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fungibility

(fungibility enabled)	(fail)	%% Override this from the story.

(fungible $A $A)

(truly fungible $A $B)
	(fungible $A $B)
	($A is $Rel $Parent)
	($B is $Rel $Parent)

(combine-fungible [] $ 1 [])
(combine-fungible $InputList $Key $N $Excluded)
	(accumulate 1)
		*($Obj1 is one of $InputList)
		(truly fungible $Key $Obj1)
	(into $Sum)
	(if) ($Sum = 0) (then)
		($N = 1)
		($Excluded = $InputList)
	(else)
		($Sum plus 1 into $N)
		(collect $Obj2)
			*($Obj2 is one of $InputList)
			~(truly fungible $Key $Obj2)
		(into $Excluded)
	(endif)

(strip-fungible [] [])
(strip-fungible [$HeadIn | $MoreIn] [$HeadOut | $MoreOut])
	(combine-fungible $MoreIn $HeadIn $N $Rest)
	(if) (1 < $N) (then)
		($HeadOut = [a $HeadIn]) %% Decorated.
	(else)
		($HeadOut = $HeadIn)
	(endif)
	(strip-fungible $Rest $MoreOut)

(fungibility-enabled appearance [] $ $)

(fungibility-enabled appearance [$Head | $Tail] $Rel $Loc)
	(combine-fungible $Tail $Head $NInc $Rest)
	(par)
	(exhaust) {
		(if) ($NInc = 1) (then)
			(appearance $Head $Rel $Loc)
			(notice $Head)
		(else)
			(remove from $Tail matching $Rest into $Similar)
			($ObjSet = [$Head | $Similar])
			(appearance $ObjSet $Rel $Loc)
			(notice $ObjSet)
		(endif)
	}
	(fungibility-enabled appearance $Rest $Rel $Loc)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Common complaints and prevent-checks

(can't see any such thing)
	Watson looks up at you with a blankly happy grin. He recognises the command, but clearly has no idea what particular thing you mean.

(when $ is out of sight)
	~(player can see)
	Watson tries his best, but it's too dark even for canine senses.

(when $Obj is out of sight)
	~(player can see $Obj)
	(can't see any such thing)

(when $Obj is already held)
	(current player $Player)
	($Obj is #heldby $Player)
	Watson holds up (the $Obj) triumphantly.

(when $Obj is already worn)
	(current player $Player)
	($Obj is worn by $Player)
	Watson shows off (the $Obj) triumphantly.

(when #watson isn't directly held) %% Special case
	Watson seems distinctly confused about how to do that to himself.

(when $O isn't directly held)
	(current player $Actor)
	~($O is #heldby $Actor)
	Watson looks at (the $O) in confusion. Did you want him to
	(link action [take $] with $O phrased as []) %% TAKE IT
	?

(when $Obj is not here)
	(not here $Obj)
	(can't see any such thing)

(when (intangible $Obj) is out of reach)
	Watson tries to find a way to touch (the $Obj), and fails.

(when $Obj is out of reach)
	~(player can reach $Obj)
	(current room $Room)
	(if) ($Obj is in room $Room) (then)
		(if) (player can see $Obj) (then)
			Watson stretches his body, trying to reach (the $Obj), then settles back with a sad whimper.
		(else)
			Watson looks around, trying in vain to find (the $Obj).
		(endif)
	(else)
		(The $Obj) (is $Obj)(no space)n't close at hand; Watson would need to
		(link action [go to $] with $Obj phrased as []) %% GO TO IT
		first.
	(endif)

(when $O is part of something)
	($O is #partof $Parent)
	Watson noses at (the $O), but can't find a way to separate (them $O) from (the $Parent).

(when $O is held by someone)
	($O is #heldby $Parent)
	Watson noses at (the $O), but can't find a way to separate (them $O) from (the $Parent).

(when $O is worn by someone)
	($O is #wornby $Parent)
	Watson noses at (the $O), but can't find a way to separate (them $O) from (the $Parent).

(when $Obj is fine where it is)
	(fine where it is $Obj)
	Watson just thumps his tail. You've taught him well not to mess with such things.

(when (animate $O) can't be taken) %% New
	Watson noses at (the $O) a little, but he knows very well that he's not allowed to bite people.

(when ~(item $O) can't be taken)
	Watson noses at (the $O), but can't find any way to really pick (them $O) up.

%% New ($ accepts $) predicate for better action suggestions
(*(supporter $O) accepts #on)
(*(container $O) accepts #in)

(when $O won't accept $)
	{ (current player $O) (or) ($O = #watson) }
	Watson looks confused about what that would entail. Jumping and taking are different tricks entirely.

(when $O won't accept $Rel)
	~($O accepts $Rel)
	(if) ($Rel is one of [#under #behind]) (then)
		Watson noses at (the $O), but there's no real space (name $Rel) (them $O).
	(else)
		Watson noses at (the $O), but there's no real way to put things (name $Rel) (them $O).
	(endif)

~(when (actor supporter $O) won't accept actor #on)

~(when (actor container $O) won't accept actor #in)

(when $O won't accept actor $Rel)
	(if) ($Rel is one of [#under #behind]) (then)
		Watson noses at (the $O), but there's no real space (name $Rel) (them $O).
	(else)
		Watson noses at (the $O), but he wouldn't really fit (name $Rel) (them $O).
	(endif)

(when $O is already $Rel $Dest)
	($O is $Rel $Dest)
	Watson cocks his head to the side in confusion. Surely (the $O is) already (name $Rel) (the $Dest)?

(when $O is $Rel $Parent)
	($O is $Rel $Parent)
	%% Afaict this is never called with $O being anything except the player
	Watson looks at (the $Parent), confused. He would need to
	(link action [leave $] with $Parent phrased as []) %% "leave it" as a link
	before he could go anywhere else.

(when $Obj is closed)
	($Obj is closed)
	Watson noses at (the $Obj), but (it $Obj is) closed.

(when $Obj blocks passage)
	($Obj blocks passage)
	(if) ($Obj is closed) (then)
		Watson noses at (the $Obj), but (it $Obj is) closed.
	(else)
		Watson noses at (the $Obj), but can't find a way past.
	(endif)

%% New ones for the inventory limit
(when our inventory is full)
	(current player $Actor)
	($Thing is #heldby $Actor)
	Watson holds up (the $Thing) in his mouth. He would need to
	(link action [drop $] with $Thing phrased as []) %% prints "drop (it $Obj)" except as a link
	before he could carry anything else.

(when we are holding something)
	(current player $Actor)
	($Thing is #heldby $Actor)
	Watson holds up (the $Thing) in his mouth. He would need to
	(link action [drop $] with $Thing phrased as []) %% prints "drop (it $Obj)" except as a link
	to do anything else with his mouth.

(when we are holding something except $Exception)
	(current player $Actor)
	*($Thing is #heldby $Actor)
	~($Thing = $Exception)
	Watson holds up (the $Thing) currently occupying his mouth. He would need to
	(link action [drop $] with $Thing phrased as []) %% prints "drop (it $Obj)" except as a link
	to get his teeth into something else.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Program entry, main loop, status bar, score

(program entry point)
	(div @initial-spacer) {}
	(update environment around player)
	(stoppable) (intro)
	*(repeat forever) (read-parse-act) (fail)

(intro)
	(banner)
	(try [look])

%% When the game asks a disambiguating question ("Did you ..."), and the player
%% types an unrecognised response, this needs to be parsed as a regular action
%% instead. If this happens several times in a row, the heap would fill up with
%% half-finished parsing attempts, and eventually overflow. To prevent this, we
%% store the unrecognised response in a global variable and backtrack (actually
%% stop) to recover heap space.

(global variable (deferred commandline $))

(read-parse-act)
	(rebuild scope)
	(if) (deferred commandline $Words) (then)
		(now) ~(deferred commandline $)
		(stoppable) {
			(parse commandline $Words with choices [])
		}
	(else)
		(par)
		(stoppable) {
			(if)
				(scoring enabled)
				(score notifications are on)
			(then)
				(report score change)
			(endif)

			(if) (current node $DispObj) (then)
				(collect $Choice)
					*($DispObj offers $Choice)
					(available $Choice)
				(into $ChoiceListWithDup)
				(remove duplicates $ChoiceListWithDup $ChoiceList)
				(if) (empty $ChoiceList) (then)
					(now) ~(current node $)
					(now) ($DispObj is choice-exhausted)
					(if) ($DispObj flows to $Fallback) (then)
						(activate node $Fallback)
					(else)
						(activate parser)
					(endif)
				(endif)
				(redraw status bar)
				(get choice of $ChoiceList into $Words)
			(else)
				(redraw status bar)
				($ChoiceList = [])
				(prompt and input $Words)
			(endif)

			(parse commandline $Words with choices $ChoiceList)
		}
	(endif)

(interface (prompt and input $>Words))

(prompt and input $Words)
	*(repeat forever)
	> (get replay-enabled input $Words)

	%% '*' is by convention used by testers to put comments in a
	%% transcript. Ignore it and try again.

	~($Words = [\* | $])

%% This is new, to add the replay feature
(interface (get replay-enabled input $>Words))
(global variable (input list []))

(get replay-enabled input $Words)
	(input list [$Input | $Rest]) %% Is there an input to be replayed?
	(print words $Input)
	(line)
	%% Then execute it
	($Words = $Input)
	%% And remove it from the head of the list
	(now) (input list $Rest)
(get replay-enabled input $Words)
	%% Otherwise, just use the standard built-in (get input $)
	(get input $Words)

(execute input list $List)
	(input list $Prev)
	(append $List $Prev $New)
	(now) (input list $New)

(execute input list $List) %% The rule above will fail if $Prev isn't a list, in which case, we just overwrite it
	(now) (input list $List)

(interface (get choice of $<ChoiceList into $>Words))

(get choice of $ChoiceList into $Words)
	(enumerate choices $ChoiceList 1)
	(prompt and input $Words)

(interface (enumerate choices $<ObjList $<FirstIndex))

(enumerate choices [] $)
(enumerate choices [$Target | $More] $Index)
	$Index .
	(if) (library links enabled) (then)
		(link [$Index]) (print label of $Target)
	(else)
		(print label of $Target)
	(endif)
	(line)
	($Index plus 1 into $Ip1)
	(enumerate choices $More $Ip1)

(report score change)
	(reported score is $Reported)
	(current score $Score)
	(if) ($Score < $Reported) (then)
		($Reported minus $Score into $Diff)
		(div @meta) {
			Your score has gone down by (spell out $Diff)
			point (if) ~(1 = $Diff) (then) (no space) s (endif)
			.
		}
		(par)
		(now) (reported score is $Score)
	(elseif) ($Score > $Reported) (then)
		($Score minus $Reported into $Diff)
		(div @meta) {
			Your score has gone up by (spell out $Diff)
			point (if) ~(1 = $Diff) (then) (no space) s (endif)
			.
		}
		(par)
		(now) (reported score is $Score)
	(endif)

(redraw status bar) %% Proper implementation in gosling.dg
	%% This predicate shouldn't fail.

(location headline)
	(if) (current player $) (then)
		(current room $Room) %% Removed darkness rules here - that's now in the headline tag
		(span @bold) (room header $Room)
		(location headline tag)
	(endif)

(location headline tag) %% New!
	~(player can see)
	\( in the dark \)

(location headline tag)
	(current player $Player)
	($Player is $Rel $Loc)
	(if) ~(room $Loc) (then)
		\( (name $Rel) (the $Loc) \)
	(endif)

(narrate darkness)
	It's pitch dark, and you can barely see a thing.
	(notice #darkness)
	(current room $Current)
	(collect $Dir)
		{
			*(from $Current go $Dir to $Room)
		(or)
			*(from $Current go $Dir to $Door)
			(from $Current through $Door to $Room)
		}
		(room $Room)
		(light reaches ceiling $Room)
	(into $List)
	(if) ~(empty $List) (then)
		You can make out light (listing $List {(link present-adverb $_)} @and [] 0).
	(else)
		You can't even make out any exits.
	(endif)

%% (current score 0) %% This is now calculated dynamically
(reported score is 0)

(score notifications are on)
	(scoring enabled)

%% (interface (increase score by $<Delta))

%% (increase score by $Delta)
%%	(current score $Old)
%%	($Old plus $Delta into $New)
%%	(now) (current score $New)

%% (interface (decrease score by $<Delta))

%% (decrease score by $Delta)
%%	(current score $Old)
%%	($Old minus $Delta into $New)
%%	(now) (current score $New)

%% Score headline moved to gosling.dg

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Banner and default metadata

%% There is no formal requirement to print the banner, but it's appreciated
%% and useful to the community and yourself.

(banner)
	(par)
	(div @title) (story title or default)
	(story noun) by (story author or default).
	(line)
	(additional banner text)
	(line)
	(story release $RelNum)
	Release $RelNum.
	Serial number ZMACHINE.
	(line)
	(compiler version).
	(library version)
	(exhaust) { *(extension version) }
	(par)

%% Override to insert co-credits, dedications, etc. into the banner:

(additional banner text)

%% Library extensions can add their name and version number to the banner:

(extension version)		(fail)

%% The following predicates help to conserve space when a title or author is
%% provided. The compiler is smart enough to eliminate the second rule if the
%% first is known to succeed:

(story title or default)	(story title)
(story title or default)	An Interactive Fiction

(story author or default)	(story author)
(story author or default)	Anonymous

%% Don't warn about querying these; however, this does not disable the warning
%% about them not being defined (for a sufficiently large story):

(story title)		(fail)
(story author)		(fail)

%% We can safely supply defaults for the following:

(story release 1)

(story noun)
	An interactive fiction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Game over

(game over)
	(par)
	(game over status bar)
	(if) (scoring enabled) (then)
		(current score $Score)
		(div @meta) {
			You scored $Score
			(if) ($Score = 1) (then) point (else) points (endif)
			(if) (maximum score $Max) (then)
				out of $Max
			(endif)
			.
		}
		(par)
	(endif)
	*(repeat forever) (game over menu) (fail)

(interface (game over $<Closure))

(game over $Message)
	(par)
	(space 5)
	(span @bold) { \*\*\* (query $Message) \*\*\* }
	(game over)

(game over status bar)
	(status bar @status) {
		(score headline)
		The End
	}

(game over menu)
	(line)
	(div @meta) {
		Would you like to:
		(if) (interpreter supports undo) (then)
			(line) (space 5)
			(if) (library links enabled) (then)
				(link) UNDO
			(else)
				UNDO
			(endif)
			the last move,
		(endif)
		(line) (space 5)
		(if) (library links enabled) (then)
			(link) RESTORE a saved position,
		(else)
			RESTORE a saved position,
		(endif)
		(line) (space 5)
		(exhaust) {
			*(game over option)
			(line) (space 5)
		}
		(if) (interpreter supports quit) (then)
			(if) (library links enabled) (then)
				(link) QUIT
			(else)
				QUIT
			(endif)
			the program,
			(line) (space 5)
		(endif)
		or
		(if) (library links enabled) (then)
			(link) RESTART
		(else)
			RESTART
		(endif)
		from the beginning?
	}
	(line)
	(prompt and input $Words)
	(stoppable) (parse game over $Words)

(game over option)
	(amusing enabled)
	see a list of
	(if) (library links enabled) (then)
		(link) AMUSING
	(else)
		AMUSING
	(endif)
	things to do,

(interface (parse game over $<Words))

(parse game over [restart])
	(restart)

(parse game over [restore])
	(try [restore])

(parse game over [undo])
	(if) (undo) (or) (then)
		(div @meta) { Failed to undo last turn. }
	(endif)

(parse game over [amusing])
	(amusing enabled)
	(amusing)

(parse game over [quit/q])
	(display quit message)
	(line)
	(quit)

(parse game over $)
	(div @meta) { Please type one of the given words. }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parser: Global variables

(global variable (reported score is $))
(global variable (last command was $))
(global variable (implicit action is $))

(global variable (player's it refers to $))
(global variable (narrator's it refers to $))
(global variable (her refers to $))
(global variable (him refers to $))
(global variable (them refers to $))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parser: Rewrite

(interface (rewrite $<WordsIn into $>WordsOut))

%% Fallback rewrite rule does nothing.

(rewrite $A into $A)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parser: Directions

%% Directions are treated separately from other objects for performance
%% reasons. They are not in scope.

(interface (understand $<Words as direction $>DirList))

(understand $Words as direction $Output)
	(parse direction list $Words $ObjList)
	(mark multi-object $ObjList into $Output)

(parse direction list $Words [$Head | $Tail])
	*(split $Words by [, and] into $Left and $Right)
	(just)
	*(parse direction $Left $Head)
	*(parse direction list $Right $Tail)

(parse direction list $Words [$Dir])
	*(parse direction $Words $Dir)

(parse direction [to | $Words] $Dir)
	(just)
	*(parse direction $Words $Dir)

(parse direction [the | $Words] $Dir)
	(just)
	*(parse direction $Words $Dir)

(parse direction $Input $Dir)
	(nonempty $Input)
	(determine object $Dir)
		*(direction $Dir)
	(from words)
		*(dict $Dir)
	(matching all of $Input)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parser: Objects

%% Nouns in complex actions are represented as:
%%	an object $Obj,
%%	a decorated object [a $Obj],
%%	a list of objects (possibly decorated) [+ $Obj1 $Obj2 ...], or
%%	an error code [], [,], [all]
%% No output or other side effects are produced by the following rules.
%% Policy/ExcludeList are ignored when there's just one matching object.
%% Ambiguous expressions result in backtracking.

(interface (understand $<Words as non-all object $>ObjList))
(interface (understand $<Words as single object $>Obj))
(interface (understand $<Words as object $>ObjList preferably $<Closure))
(interface (understand $<Words as single object $>Obj preferably $<Closure))
(interface (understand $<Words as object $>ObjList preferably child of $<Parent))
(interface (understand $<Words as object $>ObjList preferably takable))
(interface (understand $<Words as object $>ObjList preferably held))
(interface (understand $<Words as single object $>Obj preferably held))
(interface (understand $<Words as object $>ObjList preferably held excluding $<ExcludeObj))
(interface (understand $<Words as single object $>Obj preferably animate))
(interface (understand $<Words as object $>ObjList preferably worn))
(interface (understand $<Words as single object $>Obj preferably supporter))
(interface (understand $<Words as single object $>Obj preferably container))
(interface (understand $<Words as any object $>Obj))
(interface (understand $<Words as any object $>Obj preferably animate))
(interface (understand $<Words as any object $>Obj preferably $<Closure))

(understand $Words as non-all object $Output)
	*(parse $Words as object $Output {} [] 0)

(understand $Words as single object $Object)
	*(parse $Words as single object $Object {} [])

(understand $Words as object $Output preferably $Closure)
	*(parse $Words as object $Output $Closure [] 1)

(understand $Words as single object $Output preferably $Closure)
	*(parse $Words as single object $Output $Closure [])

(understand $Words as object $Output preferably child of $Parent)
	*(parse $Words as object $Output $Parent [] 1)

(understand $Words as object $Output preferably takable)
	*(parse $Words as object $Output {(takable $_)} [] 1)

(understand $Words as object $Output preferably held)
	(current actor $Actor)
	*(parse $Words as object $Output {($_ is #heldby $Actor)} [] 1)

(understand $Words as single object $Output preferably held)
	(current actor $Actor)
	*(parse $Words as single object $Output {($_ is #heldby $Actor)} [])

(understand $Words as object $Output preferably held excluding $ExcludeObj)
	(current actor $Actor)
	*(parse $Words as object $Output {
		($_ is #heldby $Actor)
		~($_ = $ExcludeObj)
	} [] 1)

(understand $Words as single object $Output preferably animate)
	*(parse $Words as single object $Output {(animate $_)} [1])
	%% [1] produces 'someone' instead of 'something' in error responses.

(understand $Words as object $Output preferably worn)
	(current actor $Actor)
	*(parse $Words as object $Output {($_ is worn by $Actor)} [] 1)

(understand $Words as single object $Output preferably supporter)
	*(parse $Words as single object $Output {(supporter $_)} [])

(understand $Words as single object $Output preferably container)
	*(parse $Words as single object $Output {(container $_)} [])

(understand $Words as any object $Output)
	*(parse $Words as any object $Output {} [])

(understand $Words as any object $Output preferably animate)
	*(parse $Words as any object $Output {(animate $_)} [1])

(understand $Words as any object $Output preferably $Closure)
	*(parse $Words as any object $Output $Closure [])

(interface (takable $<Obj))

(takable (item $Obj))
	($Obj has relation $Rel)
	~($Rel is one of [#partof #heldby #wornby])
	(current player $Player)
	~($Obj has ancestor $Player)
	~($Obj is nested #wornby $)
	~($Obj is nested #heldby $)

(interface (verify object policy $Policy $<Obj))

(verify object policy (object $Policy) $Obj)
	($Obj has parent $Policy)

(verify object policy (nonempty $Policy) $Obj)
	(query $Policy $Obj)

(interface (parse $<Words as object $>ObjList $Policy $<FailObj $<AllAllowed))

(parse $Words as object $Output $Policy $ $AllAllowed)
	*(split $Words by [but except] into $Left and $Right)
	*(parse noun list $Left as $BaseList $Policy $AllAllowed)
	*(parse negative noun $Right from $BaseList into $ObjList)
	(mark multi-object $ObjList into $Output)

(parse $Words as object $Output $Policy $ $AllAllowed)
	*(parse noun list $Words as $ObjList $Policy $AllAllowed)
	(mark multi-object $ObjList into $Output)

(parse $ as object $Someone $ $Someone $)
	(allowing parse errors)

(interface (parse $<Words as single object $>Obj $Policy $<FailObj))

(parse $Words as single object $Output $Policy $Someone)
	*(parse $Words as object $ObjList $Policy $Someone 0)
	(if) ($ObjList = [+ | $]) (then)
		(allowing parse errors)
		($Output = [,])
	(else)
		($Output = $ObjList)
	(endif)

(interface (parse $<Words as any object $>Obj $Policy $<FailObj))

(parse $Words as any object $Output $Policy $)
	(filter $Words into $Filtered)
	(nonempty $Filtered)
	(collect $Obj)
		(determine object $Obj)
			*(object $Obj)
			~(direction $Obj)
			~(relation $Obj)
			~($Obj is in scope) %% Prevent double matches due to next branch.
			~($Obj is hidden)
	%%		($Obj is in room $Room)
	%%		($Room is visited) %% This game is in your house, all rooms are "known"
			(words $Filtered sufficiently specify $Obj)
		(from words)
			*(dict $Obj)
		(matching all of $Filtered)
	(into $Candidates)
	(apply policy to $Candidates $Policy $ObjList)
	*($Output is one of $ObjList)

(parse $Words as any object $Output $Policy $Someone)
	%% The purpose of this branch is to support pronouns, as well
	%% as not-here objects that are in scope.
	*(parse $Words as single object $Output $Policy $Someone)
	~(room $Output)

(interface (mark multi-object $<ObjList into $>ComplexObj))

(mark multi-object [$Single] into $Single)
	~(word $Single)
(mark multi-object [$Head | $Tail] into [+ $Head | $Tail])
	(object $Head)
(mark multi-object $Other into $Other)

(parse noun list $Words as $ObjList $Policy $AllAllowed)
	(split $Words by [, and] into $Left and $Right)
	*(parse basic noun $Left as $LeftObj $Policy $AllAllowed)
	*(parse noun list $Right as $RightObj $Policy $AllAllowed)
	(if) ($RightObj = [$Head | $Tail]) (last $LeftObj $Head) (then)
		%% ensure e.g. "black and white photo" is parsed as one thing
		(append $LeftObj $Tail $ObjList)
	(else)
		(append $LeftObj $RightObj $ObjList)
	(endif)

(parse noun list $Words as $ObjList $Policy $AllAllowed)
	*(parse basic noun $Words as $ObjList $Policy $AllAllowed)

(parse negative noun [$Number | $Words] from $BaseList into $Result)
	{
		($Number is one of [a an])
		($N = 1)
	(or)
		(parse numeral $Number into $N)
	}
	(just)
	(if) (empty $Words) (then)
		(take $N from $BaseList into $NegList)
	(else)
		*(parse indefinite $Words as $NegList $N {($_ is one of $BaseList)})
	(endif)
	(remove from $BaseList matching $NegList into $Result)

(parse negative noun $Words from $BaseList into $Result)
	*(parse object name $Words as $NegList 0 { ($_ is one of $BaseList) })
	(remove from $BaseList matching $NegList into $Result)

(interface (parse basic noun $<Words as $>ObjList $Policy $<AllAllowed))

(parse basic noun [the | $Words] as $ObjList $Policy $AllAllowed)
	(just)
	*(parse basic noun $Words as $ObjList $Policy $AllAllowed)

(parse basic noun [me/myself/self/yourself/you] as [$Obj] $ $)
	(current player $Obj)

(parse basic noun [here/room/location/area/surroundings/wall/walls] as [$Room] $ $)
	(current room $Room)

(parse basic noun [this room/location/area] as [$Room] $ $)
	(current room $Room)

(parse basic noun [it/that] as [$Obj] $ $)
	{
		(player's it refers to $Obj)
	(or)
		(narrator's it refers to $Obj)
	}

(parse basic noun [some] as [$Obj] $Policy $AllAllowed)
	(parse basic noun [it] as [$Obj] $Policy $AllAllowed)
	(uncountable $Obj)

(parse basic noun [her] as [$Obj] $ $)
	(her refers to $Obj)

(parse basic noun [him] as [$Obj] $ $)
	(him refers to $Obj)

(parse basic noun [them] as $ObjList $ $)
	(them refers to $ObjList)

(parse basic noun [all/everything] as [all] $ 0)
	(allowing parse errors)
	(just)

(parse basic noun [all/everything] as $Result (object $Policy) 1)
	(just)
	(collect $Obj)
		*($Obj has parent $Policy)
		($Obj is in scope)
		~($Obj is hidden)
		~(excluded from all $Obj)
	(into $Result)

(parse basic noun [all/everything] as $Result (nonempty $Policy) 1)
	(just)
	(collect $Obj)
		*($Obj is in scope)
		~(excluded from all $Obj)
		~($Obj is hidden)
		(verify object policy $Policy $Obj)
	(into $Result)

(parse basic noun [all/every/each | $Words] as $ObjList $Policy $)
	*(parse object name $Words as $ObjList 1 $Policy)

(parse basic noun [a/an/any/some | $Words] as $ObjList $Policy $)
	*(parse indefinite $Words as $ObjList 1 $Policy)

(parse basic noun [$Number | $Words] as $ObjList $Policy $)
	(nonempty $Words)
	(parse numeral $Number into $N)
	*(parse indefinite $Words as $ObjList $N $Policy)

(parse basic noun $Words as $ObjList $Policy $)
	%% This is the common case.
	*(parse object name $Words as $ObjList 0 $Policy)

(parse indefinite $Words as $Result $Limit $Policy)
	*(parse object name $Words as $ObjList 1 $Policy)
	(if) ($Limit = 1) ($ObjList = [$First $ | $]) (then)
		($Result = [[a $First]]) %% Decorate the result.
	(else)
		(take $Limit from $ObjList into $Result)
		(nonempty $Result)
	(endif)

(interface (parse object name $<Words as $>ObjList $<AllFlag $Policy))

(parse object name $Words as $Result $All $Policy)
	(filter $Words into $Filtered)
	(nonempty $Filtered)
	(collect $Obj)
		%% catch expressions like 'open the eastern window'
		($Filtered = [$Head | $Tail])
		(nonempty $Tail)
		(parse direction [$Head] $Dir)
		(current room $Room)
		(determine object $Obj)
			*(from $Room go $Dir to object $Obj)
			~(direction $Obj)
			~(relation $Obj)
			(words $Tail sufficiently specify $Obj)
		(from words)
			*(dict $Obj)
		(matching all of $Tail)
	(or)
		%% this is the normal case
		(determine object $Obj)
			*($Obj is in scope)
			~(direction $Obj)
			~(relation $Obj)
			(words $Filtered sufficiently specify $Obj)
		(from words)
			*(dict $Obj)
		(or)
			*(plural dict $Obj)
		(matching all of $Filtered)
	(into $Candidates)
	(nonempty $Candidates)
	(apply policy to $Candidates $Policy $CleanList)
	(if)
		%% Optimise for the common case.
		($CleanList = [$])
	(or)
		%% E.g. get all wooden.
		($All = 1)
	(or)
		%% A plural word causes all matching objects to be returned.
		*($PluralWord is one of $Filtered)
		(determine object $PObj)
			*($PObj is one of $CleanList)
		(from words)
			*(plural dict $PObj)
		(matching all of [$PluralWord])
	(then)
		($Result = $CleanList)
	(else)
		%% Backtrack over each matching object, for disambiguation.
		(if) (fungibility enabled) (then)
			(strip-fungible $CleanList $UniqueList)
			*($Obj is one of $UniqueList)
			($Result = [$Obj])
		(else)
			*($Obj is one of $CleanList)
			($Result = [$Obj])
		(endif)
	(endif)

(interface (words $<Words sufficiently specify $<Obj))

(words $ sufficiently specify $)
	~(head noun is required)

(words $Words sufficiently specify $Obj)
	(collect words)
		(heads $Obj)
	(into $Heads)
	(if) (nonempty $Heads) (then)
		*($H is one of $Heads)
		($H is one of $Words)
	(endif)

(interface (filter $<WordsIn into $>WordsOut))

(filter [] into [])
	(just)

(filter [of/the/this/that | $MoreIn] into $MoreOut)
	(just)
	(filter $MoreIn into $MoreOut)

(filter [$Other | $MoreIn] into [$Other | $MoreOut])
	(filter $MoreIn into $MoreOut)

(interface (apply policy to $<ObjsIn $Policy $>ObjsOut))

(apply policy to $Input $Policy $Output)
	(collect $Obj)
		*($Obj is one of $Input)
		(verify object policy $Policy $Obj)
	(into $Output)
	(nonempty $Output)

(apply policy to $Input $ $Input)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Topics

(describe topic @?)
	that

(describe topic $Topic)
	($Topic = [, | $])
	(the full $Topic)

(describe topic (object $Obj))
	(the full $Obj)

(describe topic $)
	something

(proper *(proper topic $))
(topic *(proper topic $))

(proper topic $)
	(fail)

(interface (understand $<Words as topic $>Topic))

(understand $Words as topic $Obj)
	(filter $Words into $Filtered)
	(determine object $Obj)
		*(topic $Obj)
	(from words)
		*(dict $Obj)
	(matching all of $Filtered)

(understand $Words as topic $Obj)
	*(understand $Words as single object $Obj)

(understand $WordList as topic $Topic)
	*($Word is one of $WordList)
	(topic keyword $Word implies $Topic)

(understand $ as topic @?)

(interface (topic keyword $<Word implies $>Topic))

(topic keyword $Keyword implies $Keyword)
	(topic keyword $Keyword)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Choice mode

(global variable (current node $))
(global variable (previous node $))

(interface (choose $<Obj))

(choose $Obj)
	(print label of $Obj)
	(par)
	(activate node $Obj)

(interface (print label of $<Obj))

(print label of $Obj)
	(if) ($Obj is exposed) (then)
		(label $Obj)
	(else)
		(initial label $Obj)
	(endif)

(interface (display $<Obj))

(display $Obj)
	(exhaust) { *(before disp $Obj) }
	(disp $Obj)
	(exhaust) { *(after disp $Obj) }

(interface (activate node $<Obj))

(activate node $Obj)
	(if) (current node $Previous) (then)
		(now) (previous node $Previous)
	(else)
		(now) ~(previous node $)
	(endif)
	(now) (current node $Obj)
	(display $Obj)
	(if) (object $Obj) (then) (now) ($Obj is exposed) (endif)
	(stop)

(activate parser)
	(now) ~(current node $)
	(now) ~(previous node $)
	(stop)

(interface (available $<Obj))

(available (sticky $))

(available $Node)		~($Node is choice-exhausted)

(sticky *(terminating $))

(interface ($<Object flows to $>Target))

($Obj flows to $Previous)
	~(terminating $Obj)
	(previous node $Previous)

(interface (initial label $<Obj))

(initial label $Obj)		(label $Obj)

(interface (allowed action $<Action))

(allowed action $)		~(current node $)
(allowed action (command $))

(report disallowed action $)
	(div @meta) { \( That action is currently disabled. \) }

(interface (label $<Obj))

(terminating $)			(fail)
(label $)			(fail)
($ offers $)			(fail)

(before disp $)			(fail)
(disp $)
(after disp $)			(fail)

@($Node is unexposed)		~($Node is exposed)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Parser: Toplevel

%% Parse and attempt each action in turn, and abort if one fails.
%% That's because an action may modify the scope, which affects the parsing of
%% subsequent actions.

(global variable (current actor $))

(interface (parse commandline $<Words with choices $<ChoiceList))

(parse commandline [] with choices $)
	Watson wags his tail, listening attentively. What next?

(parse commandline [undo] with choices $)
	(try [undo])

(parse commandline $Words with choices $ChoiceList)
	%% Before proceeding, save the current undo state:
	(if) (save undo 1) (then)
		(narrate undoing $Words)
		(if) (input list [[undo] | $Tail]) (then) %% Don't get stuck in a loop of undoing
			(now) (input list $Tail)
		(endif)
		(stop)
	(endif)
	(if)
		(nonempty $ChoiceList)
		($Words = [$Index])
		(number $Index)
		(nth $ChoiceList $Index $Target)
	(then)
		(choose $Target)
	(else)
		(now) ~(allowing parse errors)
		(parse action sequence $Words)
	(endif)

(interface (parse action sequence $<Words))

(parse action sequence $Words)
	(if) (split $Words by [. ; then] into $Left and $Right) (then)
		(parse action $Left)
		(rebuild scope)
		(parse action sequence $Right)
	(else)
		(parse action $Words)
	(endif)

(interface (parse action $<Words))

(parse action [])

(parse action $Words)
	%% Usually, the player is the actor.
	(if) (current player $Player) (then)
		(now) (current actor $Player)
	(endif)

	%% Handle AGAIN, OOPS, and rewriting:

	(if)
		($Words = [$W])
		($W is one of [again g])
		(last command was $LastCmd)
	(then)
		(rewrite $LastCmd into $ActualWords)
	(elseif) ($Words = [oops $GoodWord]) (then)
		(if)
			(last command was $LastCmd)
			(correct $LastCmd with $GoodWord into $GoodCmd)
		(then)
			(now) (last command was $GoodCmd)
			(rewrite $GoodCmd into $ActualWords)
		(else)
			Watson just looks more confused. Probably best to start over from scratch.
			(stop)
		(endif)
	(else)
		(now) (last command was $Words)
		(rewrite $Words into $ActualWords)
	(endif)

	%% Parse the action:

	(now) ~(head noun is required)
	(collect $A)
		*(understand $ActualWords as $A)
	(into $AllCandidatesWithDup)

	%% Since we may have multiple matches, do some sieving:

	(remove duplicates $AllCandidatesWithDup $AllCandidates)
	(if) ($AllCandidates = [$Single]) (then)
		%% Optimise the common case.
		(try-complex $Single)
	(elseif) (empty $AllCandidates) (then)
		%% We were unable to parse the action.

		%% Occasionally people like to separate actions by
		%% commas or 'AND', but this is problematic. We can
		%% only deal with it as a last resort, because in order
		%% to parse the part after the separator, we need to
		%% have the right scope, and therefore we first have to
		%% execute what's to the left of the separator.

		(if)
			*(split $ActualWords by [, and]
				into $Left and $Right)
			*(understand $Left as $)
		(then)
			(parse action $Left)
			(rebuild scope)
			(parse action $Right)
		(else)
			%% Everything has failed. Can we understand a
			%% partial action, in order to print an
			%% informative error message?

			(parse partial action $ActualWords)
		(endif)
	(else)
		(sieve action candidates $AllCandidates $ActualWords 0)
	(endif)

(correct [$BadWord | $More] with $GoodWord into [$GoodWord | $More])
	(unknown word $BadWord)
(correct [$Head | $TailIn] with $GoodWord into [$Head | $TailOut])
	(correct $TailIn with $GoodWord into $TailOut)

%% New: find all unknown words from the command
(unknown words from [] into [])
(unknown words from [$BadWord | $TailIn] into [$BadWord | $TailOut])
	(unknown word $BadWord)
	(unknown words from $TailIn into $TailOut)
(unknown words from [$ | $TailIn] into $TailOut)
	(unknown words from $TailIn into $TailOut)

%% New: wrap a dict word in quotes
(quoted word $Word)
	" (no space) $Word (no space) "

%% New: print a list of words in quotation marks
(print word list [$Single])
	(quoted word $Single)
(print word list [$One $Two])
	(quoted word $One) and (quoted word $Two)
(print word list [$One $Two $Three])
	(quoted word $One), (quoted word $Two), and (quoted word $Three)
(print word list [$First | $More])
	(quoted word $First),
	(print word list $More)

%% New: print a list of words with a preface
(warn about bad words []) %% Do nothing at all here
(warn about bad words [$Single])
	In particular, the word
	(print word list [$Single])
	seems to be confusing him.
(warn about bad words (nonempty $List))
	In particular, the words
	(print word list $List)
	seem to be confusing him.

%% Just to make the phrasing cleaner
([$Verb | $] has unknown verb $Verb)
	(unknown word $Verb)

(parse partial action $Words)
	%% The multi-query inside the if-condition is unnecessary
	%% (if-conditions are only evaluated once), but the compiler is able to
	%% optimise predicates better if they're consistently queried in the
	%% same mode.
	
	(unknown words from $Words into $Unknown) %% New, for better error messages
	
	(now) (allowing parse errors)
	(if) *(understand $Words as $BadAction) ~($BadAction = [recall [1]]) (then) %% We specifically don't want our usual error message if it returns [recall [1]], since that's a failed attempt to parse a verbless grammar line - it results if the player enters a preposition as the first word
		(if) ([all] is one of $BadAction) (then) %% ALL in illegal place
			When you reach the "all", the comprehension vanishes from Watson's face. Probably best to go with one object at a time here.
		(elseif) ([,] is one of $BadAction) (then) %% List in illegal place
			By the time you get to the end of the list, Watson seems thoroughly lost. Probably best to go with one object at a time here.
		(elseif) ([1] is one of $BadAction) (then) %% Unrecognised "someone"
			Watson understands the instruction to
			(describe action $BadAction)
			, but doesn't understand (emph {who}).
			(warn about bad words $Unknown)
		(elseif) ([] is one of $BadAction) (then) %% Unrecognised "something"
			Watson understands the instruction to
			(describe action $BadAction)
			, but doesn't understand (emph {what}).
			(warn about bad words $Unknown)
		(else) %% Other miscellaneous failure, like extraneous words at the end
			Watson understands the instruction to
			(describe action $BadAction)
			, but the details aren't quite clicking.
			(warn about bad words $Unknown)
		(endif)
	(elseif) ($Words has unknown verb $Verb) (then) %% First word is unknown
		Watson looks up at you with a sad little whine. He has no idea how to (quoted word $Verb).
		(if) ($Unknown = [$|$Rest]) (then) %% There's more than one unknown word; ignore the first, since we already mentioned it
			(warn about bad words $Rest)
		(endif)
	(else) %% Any other parser error; nothing we can do about this
		Watson wags his tail happily, no comprehension at all in his eyes.
		(warn about bad words $Unknown)
	(endif)
	(stop)

(sieve action candidates $AllCandidates $Words $VeryLevel)
	(if) ($VeryLevel = 3) (then)
		($LikelyCandidates = $AllCandidates)
	(else)
		(collect $A)
			*($A is one of $AllCandidates)
			~(unlikely-complex $A $VeryLevel)
		(into $LikelyCandidates)
	(endif)
	(if) (nonempty $LikelyCandidates) (then)
		%% Consider only the likely candidates.
		(consider action candidates $LikelyCandidates $Words)
	(else)
		%% All candidates were deemed unlikely, but some candidates
		%% could be more unlikely than the others.
		($VeryLevel plus 1 into $NextLevel)
		(sieve action candidates $AllCandidates $Words $NextLevel)
	(endif)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Disambiguation

(consider action candidates $List $Words)
	(if) ($List = [$Single]) (then)
		%% Optimise the common case.
		(try-complex $Single)
	(else)
		%% Eliminate options where the head noun is missing.
		(now) (head noun is required)
		(collect $A)
			*(understand $Words as $A)
			($A is one of $List)
		(into $ShortListWithDup)
		(remove duplicates $ShortListWithDup $ShortList)
		(if) ($ShortList = [$Single]) (then)
			(try-complex $Single)
		(else)
			(if) (empty $ShortList) (then)
				(disambiguate action $List $ComplexAction)
			(else)
				(disambiguate action $ShortList $ComplexAction)
			(endif)
			(try-complex $ComplexAction)
		(endif)
	(endif)

(disambiguate action $List $Result)
	(collect $Action)
		*($Action is one of $List)
		~{
			*($Action recursively contains $Obj)
			($Obj is hidden)
		}
	(into $NonSpoilery)
	(if) (empty $NonSpoilery) (then)
		($AskList = $List)
	(else)
		($AskList = $NonSpoilery)
	(endif)
	(if) ($AskList = [$Single]) (then)
		($Result = $Single)
	(elseif)
		(rephrase as object disambiguation
			$AskList
			$ComplexAction
			$Template
			$ObjList)
	(then)
		Watson thumps his tail, about to spring into action. Did you want him to (describe action $ComplexAction)?
		(par)
		(prompt and input $Words)
		{
			(now) (head noun is required)
			(disambiguate by object name $Words $Template $ObjList $Result)
		(or)
			(now) ~(head noun is required)
			(disambiguate by object name $Words $Template $ObjList $Result)
		(or)
			(now) (deferred commandline $Words)
			(stop)
		}
	(else)
		Watson thumps his tail, about to spring into action. Did you want him to: (line)
		(enumerate actions $AskList 1 $)
		(if) ~{ (library links enabled) (interpreter supports links) } (then)
			(div @meta) { \( Type the corresponding number \) }
		(endif)
		(par)
		(prompt and input $Words)
		{
			(understand $Words as number $N)
			($N > 0)
			(nth $AskList $N $Result)
		(or)
			(now) (deferred commandline $Words)
			(stop)
		}
	(endif)

(disambiguate by object name [me/myself] $Template $ObjList $Result)
	(current player $Player)
	($Player is one of $ObjList)
	(recover implicit action $Template $Player into $Result)

(disambiguate by object name $Words $Template $ObjList $Result)
	%% Since the player was given an explicit list of '(the full $)'
	%% descriptions, we have to match against those, in addition to the
	%% normal dict rules.

	(collect $A)
		(determine object $Obj)
			*($Obj is one of $ObjList)
			~(direction $Obj)
			~(relation $Obj)
			(words $Words sufficiently specify $Obj)
		(from words)
			(the full $Obj)
		(matching all of $Words)
		(recover implicit action $Template $Obj into $A)
	(into $Candidates)
	(nonempty $Candidates) %% otherwise fail into the next rule
	{
		($Candidates = [$Result])
	(or)
		(disambiguate action $Candidates $Result)
	}

(disambiguate by object name $Words $Template $ObjList $Result)
	(collect $A)
		(determine object $Obj)
			*($Obj is one of $ObjList)
			~(direction $Obj)
			~(relation $Obj)
			(words $Words sufficiently specify $Obj)
		(from words)
			*(dict $Obj)
		(matching all of $Words)
		(recover implicit action $Template $Obj into $A)
	(into $Candidates)
	(nonempty $Candidates)
	{
		($Candidates = [$Result])
	(or)
		(disambiguate action $Candidates $Result)
	}

(rephrase as object disambiguation [$Head | $Tail] $Complex $Template $ObjList)
	(all identical except object $Head $Tail $Pos [] $ObjList)
	(replace nth $Head $Pos [, | $ObjList] $Complex)
	(replace nth $Head $Pos [] $Template)

(replace nth [$ | $Tail] 1 $Element [$Element | $Tail])

(replace nth [$Head | $Tail] $N $Element [$Head | $SubOutput])
	($N minus 1 into $Nm1)
	(replace nth $Tail $Nm1 $Element $SubOutput)

(all identical except object $First [] $ObjPos $ObjIn [$LastObj | $ObjIn])
	(number $ObjPos)
	(nth $First $ObjPos $LastObj)

(all identical except object $First [$Second | $More] $ObjPos $ObjIn $ObjOut)
	(identical except object $First $Second 1 $ObjPos $FirstObj)
	(all identical except object
		$First
		$More
		$ObjPos
		[$FirstObj | $ObjIn]
		$ObjOut)

(identical except object [$H1 | $T1] [$H2 | $T2] $CurrPos $TargetPos $O1)
	(if) (object $H1) (object $H2) ~($H1 = $H2) (then)
		($CurrPos = $TargetPos)
		($O1 = $H2)
		($T1 = $T2)
	(else)
		($H1 = $H2)
		($CurrPos plus 1 into $NextPos)
		(identical except object $T1 $T2 $NextPos $TargetPos $O1)
	(endif)

(enumerate action $N $Action)
	(library links enabled)
	$N . (link [$N]) (describe action $Action)

(enumerate action $N $Action)
	$N . (describe action $Action)

(enumerate actions [$Item1 $Item2] $N $Np1)
	(just)
	(enumerate action $N $Item1) , or (line)
	($N plus 1 into $Np1)
	(enumerate action $Np1 $Item2) ? (line)
(enumerate actions [$Item1 $Item2 | $] 9 10)
	(just)
	(enumerate actions [$Item1 $Item2] 9 10)
	\(List truncated.\) (line)
(enumerate actions [$Head | $Tail] $N $Last)
	(enumerate action $N $Head) , (line)
	($N plus 1 into $Np1)
	(enumerate actions $Tail $Np1 $Last)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Asking for clarification

(interface (asking for object in $<Action))

(asking for object in $Action)
	(now) (implicit action is $Action)
	(now) ~(implicit action wants direction)
	(stop)

(interface (asking for direction in $<Action))

(asking for direction in $Action)
	(now) (implicit action is $Action)
	(now) (implicit action wants direction)
	(stop)

(recover implicit action [] $ into [])

(recover implicit action [[] | $More] $Obj into [$Obj | $More])

(recover implicit action [$Other | $MoreIn] $Obj into [$Other | $MoreOut])
	(recover implicit action $MoreIn $Obj into $MoreOut)

(action [inventory] preserves the question)
(action (command $) preserves the question)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Miscellaneous input routines

%% Asking a yes/no question:

(yesno)
	(space) (prompt and input $Words)
	(if) ($Words = [yes]) (or) ($Words = [y]) (then)
	(elseif) ($Words = [no]) (or) ($Words = [n]) (then)
		(fail)
	(else)
		(div @meta) { Please answer yes or no }
		(yesno)
	(endif)

%% Asking for a number:

(interface (get number from $<First to $<Last $>Number))

(get number from $First to $Last $N)
	$First - $Last (prompt and input $Input)
	(understand $Input as number $N)
	~($N < $First)
	~($N > $Last)

%% Waiting for a keypress:

(interface (any key))

(any key)
	(get key $)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Finding the shortest path from one room to another, using obvious exits.

(interface (shortest path from $<Room1 to $<Room2 is $>DirList))

(shortest path from $A to $B is $Path)
%%	($B is visited)
	(find paths starting at $A)
	(build path from $A to $B [] $Path)

(interface (first step from $<Room1 to $<Room2 is $>Dir))

(first step from $A to $B is $Dir)
%%	($B is visited)
	(find paths starting at $A)
	(reconstruct first hop $Dir from $A to $B)

(find paths starting at $Start)
	(exhaust) {
		*(room $R)
		(now) ~(last hop before $R is $)
	}
	(now) (last hop before $Start is [])
	(exhaust) {
		%% Explore the room graph starting from $A, set the last-hop
		%% variables, and fail when there are no rooms left.
		(elaborate paths from [$Start])
	}

($Door can be used in pathfinding)
	~($Door blocks passage)
($Door can be used in pathfinding)
	($Door is previously-used) %% New

(elaborate paths from $RoomList)
	(nonempty $RoomList)
	(collect $R)
		*($Here is one of $RoomList)
		{
			*(from $Here go $ to $R)
			(room $R)
		(or)
			*(from $Here through $Door to $R)
			($Door can be used in pathfinding)
		}
%%		($R is visited) %% TODO - should this be used?
		~(last hop before $R is $)
		(now) (last hop before $R is $Here)
	(into $NextGen)
	(elaborate paths from $NextGen)

%% Rooms have no locations, so '($ has relation $)' is unused for rooms.
%% We can repurpose it for path finding, to save RAM:

@(last hop before $A is $B) ($A has relation $B)

%% Reconstruct the full path from the 'last hop' links:

(build path from $Start to $End $SoFar $Path)
	(last hop before $End is $Last)
	(if) (empty $Last) (then)
		($Path = $SoFar)
	(else)
		(from $Last go $Dir to room $End)
		(build path from $Start to $Last [$Dir | $SoFar] $Path)
	(endif)

%% Reconstruct just the first hop:

(reconstruct first hop $Dir from $Start to $End)
	(last hop before $End is $Last)
	(if) ($Last = $Start) (then)
		(from $Start go $Dir to room $End)
	(else)
		(reconstruct first hop $Dir from $Start to $Last)
	(endif)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Updating and traversing the object tree

@($Obj is $Rel $Parent)
	%% The order of the following queries is critical when $Obj is unbound.
	*($Obj has parent $Parent)
	*($Obj has relation $Rel)

@($Obj is nowhere)
	~($Obj has parent $)

%% Determine what room ultimately surrounds a particular object:

(interface ($<Obj is in room $>Room))

((room $Room) is in room $Room)

($Obj is in room $Room)
	($Obj has parent $Loc)
	($Loc is in room $Room)

%% The following three predicates may be called with either parameter unbound.
%% They will traverse the object tree in the most efficient way for each case.

(interface ($>Obj has ancestor $>Ancestor))

($Obj has ancestor $Ancestor)
	(if) (fully bound $Obj) (then)
		($Obj has parent $Parent)
		{
			($Parent = $Ancestor)
		(or)
			*($Parent has ancestor $Ancestor)
		}
	(else)
		*($Sub has parent $Ancestor)
		{
			($Obj = $Sub)
		(or)
			*($Obj has ancestor $Sub)
		}
	(endif)

(interface ($>Obj is nested $>Rel $>Loc))

($Obj is nested $Rel $Loc)
	(if) (fully bound $Obj) (then)
		($Obj has parent $Parent)
		{
			($Obj has relation $Rel)
			($Parent = $Loc)
		(or)
			*($Parent is nested $Rel $Loc)
		}
	(else)
		*($Sub is $Rel $Loc)
		{
			($Obj = $Sub) (or)
			*($Obj has ancestor $Sub)
		}
	(endif)

(interface ($>Obj is part of $>Ancestor))

($Obj is part of $Ancestor)
	*($Obj is recursively #partof $Ancestor)

(interface ($>Obj is recursively $<Rel $>Ancestor))

($Obj is recursively $Rel $Ancestor)
	(if) (bound $Obj) (then)
		($Obj is $Rel $Parent)
		{
			($Parent = $Ancestor)
		(or)
			*($Parent is recursively $Rel $Ancestor)
		}
	(else)
		*($Obj is recursively $Rel $Ancestor top-down)
	(endif)

(interface ($>Obj is recursively $<Rel $<Ancestor top-down))

($Obj is recursively $Rel $Ancestor top-down)
	*($Sub is $Rel $Ancestor)
	{
		($Obj = $Sub)
	(or)
		*($Obj is recursively $Rel $Sub top-down)
	}

(interface ($>Obj is recursively $<Rel $<Ancestor bottom-up))

($Obj is recursively $Rel $Ancestor bottom-up)
	*($Sub is $Rel $Ancestor)
	{
		*($Obj is recursively $Rel $Sub bottom-up)
	(or)
		($Obj = $Sub)
	}

(interface ($>Obj is worn by $>Actor))

($Obj is worn by $Actor)
	(if) (bound $Obj) (then)
		($Obj is $Rel $Parent)
		(if) ($Rel = #wornby) (then)
			($Parent = $Actor)
		(else)
			($Rel = #under)
			($Parent is worn by $Actor)
		(endif)
	(else)
		(fully bound $Actor) %% Added to silence compiler warnings
		*($Obj is worn by $Actor top-down)
	(endif)

(interface ($>Obj is worn by $<Actor top-down))

($Obj is worn by $Actor top-down)
	*($Cover is #wornby $Actor)
	{
		($Obj = $Cover)
	(or)
		*($Obj is recursively #under $Cover top-down)
	}

(interface ($>Obj is worn by $<Actor bottom-up))

($Obj is worn by $Actor bottom-up)
	*($Cover is #wornby $Actor)
	{
		*($Obj is recursively #under $Cover bottom-up)
	(or)
		($Obj = $Cover)
	}

(interface (wearing $<New covers $<Old))

(wearing $New covers $Old)
	($Old recursively goes underneath $New)

(interface (wearing $<New removes $<Old))

(wearing $New removes $Old)
	($New recursively goes underneath $Old)

(interface ($<Obj recursively goes underneath $>Cover))

($Obj recursively goes underneath $Cover)
	($Obj goes underneath $Next)
	{
		($Next = $Cover)
	(or)
		*($Next recursively goes underneath $Cover)
	}

(interface ($<Obj goes underneath $>Cover))

($ goes underneath $)
	(fail)

%% The following predicates are useful when writing before-rules:

(interface (ensure $<Obj is held))

(ensure $Obj is held)
	(current player $Player)
	(if) (wearable $Obj) ($Obj is worn by $Player) (then)
		(first try [remove $Obj])
	(elseif) (item $Obj) ~($Obj is #heldby $Player) (then)
		(first try [take $Obj])
	(endif)

(recursively leave non-vehicles)
	(current player $Actor)
	($Actor has parent $Obj)
	~(room $Obj)
	~(vehicle $Obj)
	(first try [leave $Obj])
	(recursively leave non-vehicles)

(recursively leave descendants of $Obj)
	(current player $Actor)
	($Actor has parent $FirstObj)
	~($FirstObj = $Obj)
	(first try [leave $FirstObj])
	(recursively leave descendants of $Obj)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% List manipulation

(remove from [] matching $ into [])
	(just)
(remove from [$In | $MoreIn] matching $Keys into $MoreOut)
	($In is one of $Keys)
	(just)
	(remove from $MoreIn matching $Keys into $MoreOut)
(remove from [$In | $MoreIn] matching $Keys into [$In | $MoreOut])
	(remove from $MoreIn matching $Keys into $MoreOut)

(interface (remove duplicates $<Input $>Output))

(remove duplicates [] [])
	(just)
(remove duplicates [$Head | $MoreIn] $MoreOut)
	($Head is one of $MoreIn)
	(just)
	(remove duplicates $MoreIn $MoreOut)
(remove duplicates [$Head | $MoreIn] [$Head | $MoreOut])
	(remove duplicates $MoreIn $MoreOut)

(interface (length of $List into $>Number))

(length of [] into 0)
(length of [$ | $More] into $Np1)
	(length of $More into $N)
	($N plus 1 into $Np1)

(interface (nth $List $<Index $Element))

(nth [$Head | $] 1 $Head)
(nth [$ | $Tail] $N $Result)
	($N minus 1 into $Nm1)
	(nth $Tail $Nm1 $Result)

(last [$Last] $Last)
(last [$ | $Tail] $Last)
	(last $Tail $Last)

(take 0 from $ into [])
(take $N from [$Head | $MoreIn] into [$Head | $MoreOut])
	($N minus 1 into $Nm1)
	(take $Nm1 from $MoreIn into $MoreOut)

(interface ($<List1 contains one of $<List2))

($X contains one of $Y)
	(split $X by $Y into $ and $)

(interface ($<List1 contains sublist $<List2))

($ contains sublist [])
($List contains sublist [$Head | $Tail])
	(split $List by [$Head] into $ and $Rest)
	(append $Tail $ $Rest)

($List recursively contains $Element)
	*($Obj is one of $List)
	{
		($Obj = $Element)
	(or)
		(nonempty $Obj)
		($Obj recursively contains $Element)
	}

(reverse $Input $Output)
	(reverse-sub $Input $Output [])

(reverse-sub [] $Output $Output)
(reverse-sub [$Head | $Tail] $Output $SoFar)
	(reverse-sub $Tail $Output [$Head | $SoFar])

(split [$First $Second | $Tail] anywhere into [$First] and [$Second | $Tail])
(split [$First | $More] anywhere into [$First | $Left] and $Right)
	*(split $More anywhere into $Left and $Right)

(interface (print words $<Words))

(print words $List)
	(exhaust) {
		*($Word is one of $List)
		$Word
	}

(interface (Print Words $<Words))

(Print Words $List)
	(exhaust) {
		*($Word is one of $List)
		(uppercase) $Word
	}

(interface (randomly select $>Element from $<List))

(randomly select $Element from $List)
	(length of $List into $N)
	(random from 1 to $N into $Index)
	(nth $List $Index $Element)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Get rid of some compiler warnings

(plural name $)			(fail)
(from $ go $ to $)		(fail)
($ unlocks $)			(fail)
(from $ through $ to $)		(fail)
(topic keyword $)		(fail)
(scoring enabled)		(fail)
(maximum score $)		(fail)
(amusing enabled)		(fail)
(amusing)			(fail)
(library links enabled)		(fail)
(default actions enabled)	(fail)
(heads $)			(fail)
(room $)			(fail)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fatal runtime errors

(error $Code entry point)
	(div @error) {
		(roman) \( Technical trouble:
		(report fatal error $Code)
		Attempting to recover with UNDO. \) (line)
	}
	(if) (undo) (or) (then)
		(div @error) { Undo failed! }
	(endif)

(report fatal error 1)	Heap space exhausted.
(report fatal error 2)	Auxiliary heap space exhausted.
(report fatal error 3)	Type error: Expected object.
(report fatal error 4)	Type error: Expected bound value.
(report fatal error 5)	Invalid dynamic operation.
(report fatal error 6)	Long-term heap space exhausted.
(report fatal error 7)	Invalid output state.
(report fatal error $)	Invalid error code!
