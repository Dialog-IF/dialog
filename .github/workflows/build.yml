name: Build

on:
  push:
    branches: ['main']
    tags: ['release-*-*']
  pull_request:
    branches: ['main']

jobs:

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: install dependencies
      run: sudo apt install gcc-mingw-w64
    - name: install a more recent frotz
      run: |
        git clone --depth 1 --branch 2.55 https://gitlab.com/DavidGriffith/frotz.git
        cd frotz
        # Note: make install-dfrotz fails because it can't write a man page, so we do the install manually.
        make dfrotz
        install -c -m 755 dfrotz /usr/local/bin
    - name: make
      run: make --directory=./src
    - name: make (windows)
      run: make --directory=./src dgdebug.exe dialogc.exe
    - name: make test
      run: make test
    - uses: actions/upload-artifact@v4
      with:
        name: linux-x86_64
        path: |
          src/dgdebug
          src/dialogc
    - uses: actions/upload-artifact@v4
      with:
        name: win32
        path: |
          src/dgdebug.exe
          src/dialogc.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies
        run: |
          brew update
          brew install frotz diffutils
      - name: make
        run: make --directory=./src
      - name: make test
        run: make test
      - uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: |
            src/dgdebug
            src/dialogc

  build-release:
    runs-on: ubuntu-latest
    needs: ['build-linux', 'build-macos']
    permissions:
      contents: write
      packages: read
    steps:
      # TODO: check that the tag matches the version number in the files
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: assemble release bundle
        # TODO: include generated doc HTML instead of the raw markup
        run: |
          # Determine the bundle name, and save it in the persistent environment
          if [[ "$GITHUB_REF_NAME" == release-* ]]; then
            BUNDLE=$(echo "$GITHUB_REF_NAME" | sed 's/^release-/dialog-/')
          else
            BUNDLE="dialog-prerelease"
          fi
          echo "DIALOG_BUNDLE_NAME=$BUNDLE" >> "$GITHUB_ENV"
          cat "$GITHUB_ENV"
          # Create the bundle and add the prebuild binaries in
          mkdir -p "$BUNDLE/prebuilt"
          mv artifacts/linux-x86_64 "$BUNDLE/prebuilt/"
          mv artifacts/macos-arm64 "$BUNDLE/prebuilt/"
          mv artifacts/win32 "$BUNDLE/prebuilt/"
          chmod +x "$BUNDLE"/prebuilt/*/*
          # Include all the other relevant files from the release
          mv prebuilt/win32/* "$BUNDLE/prebuilt/win32/"
          cp --recursive src "$BUNDLE/"
          cp --recursive manual/modules "$BUNDLE"/docs
          cp *.dg "$BUNDLE"/
          cp *.txt "$BUNDLE"/
          # Group them together in a single zip
          zip -r "$BUNDLE".zip "$BUNDLE"
      - uses: actions/upload-artifact@v4
        with:
          name: dialog-release
          path: ${{ env.DIALOG_BUNDLE_NAME }}.zip
      - uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.DIALOG_BUNDLE_NAME }}.zip
          body: >
            This is a test release: please ignore.
          draft: true
          generate_release_notes: true
